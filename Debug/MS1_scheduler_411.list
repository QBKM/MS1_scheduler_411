
MS1_scheduler_411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b630  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800b7d0  0800b7d0  0001b7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be4c  0800be4c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800be4c  0800be4c  0001be4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be54  0800be54  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be54  0800be54  0001be54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be58  0800be58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800be5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005920  20000078  0800bed4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005998  0800bed4  00025998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c197  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f27  00000000  00000000  0004c23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  00052168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c18  00000000  00000000  00053ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef7b  00000000  00000000  00055c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029160  00000000  00000000  00074b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af7a6  00000000  00000000  0009dce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008440  00000000  00000000  0014d4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b7b8 	.word	0x0800b7b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800b7b8 	.word	0x0800b7b8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200058e0 	.word	0x200058e0

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <handler_application>:

/* ------------------------------------------------------------- --
   functions
-- ------------------------------------------------------------- */
static void handler_application(void* parameters)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b087      	sub	sp, #28
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
 8000574:	f007 f948 	bl	8007808 <xTaskGetTickCount>
 8000578:	4603      	mov	r3, r0
 800057a:	60fb      	str	r3, [r7, #12]

    /* delay until start */
    vTaskDelay(pdMS_TO_TICKS(5000));
 800057c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000580:	f006 fffa 	bl	8007578 <vTaskDelay>

    BUZZER_SEND_PARAMETER(BUZZER_WAIT_PERIOD, BUZZER_WAIT_DUTYCYCLE);
 8000584:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058c:	f000 fb76 	bl	8000c7c <API_BUZZER_SEND_PARAMETER>
    LEDS_SEND_PARAMETER(E_LIST_LED_RGB, E_CMD_LEDS_BLUE);
 8000590:	2103      	movs	r1, #3
 8000592:	2000      	movs	r0, #0
 8000594:	f001 f9ca 	bl	800192c <API_LEDS_SEND_PARAMETER>

    HMI_SEND_DATA(HMI_ID_APP_PHASE, "WAIT");
 8000598:	4944      	ldr	r1, [pc, #272]	; (80006ac <handler_application+0x140>)
 800059a:	2010      	movs	r0, #16
 800059c:	f000 fcce 	bl	8000f3c <API_HMI_SEND_DATA>
    HMI_SEND_DATA(HMI_ID_APP_AEROC, "WAIT");
 80005a0:	4942      	ldr	r1, [pc, #264]	; (80006ac <handler_application+0x140>)
 80005a2:	2011      	movs	r0, #17
 80005a4:	f000 fcca 	bl	8000f3c <API_HMI_SEND_DATA>
//////////////////////////////////////////////////////////////////////////////////////////////////////////
#if APPLICATION_INC_FLAG_AEROC
        /* This section is used to scan the flagAero variable.
           The variable is set to true by the IT callback when the aerocontact is triggered.
           The purpose is to initialize set the start by starting the window timers */
        if(flagAeroc == true)
 80005a8:	4b41      	ldr	r3, [pc, #260]	; (80006b0 <handler_application+0x144>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d023      	beq.n	80005fa <handler_application+0x8e>
        {
            /* user indicators */
            BUZZER_SEND_PARAMETER(BUZZER_ASCEND_PERIOD, BUZZER_ASCEND_DUTYCYCLE);
 80005b2:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80006b4 <handler_application+0x148>
 80005b6:	2064      	movs	r0, #100	; 0x64
 80005b8:	f000 fb60 	bl	8000c7c <API_BUZZER_SEND_PARAMETER>
            HMI_SEND_DATA(HMI_ID_APP_AEROC, "GO");
 80005bc:	493e      	ldr	r1, [pc, #248]	; (80006b8 <handler_application+0x14c>)
 80005be:	2011      	movs	r0, #17
 80005c0:	f000 fcbc 	bl	8000f3c <API_HMI_SEND_DATA>

            /* start the window timers */
            xTimerStart(TimerHandle_window_in, 0);
 80005c4:	4b3d      	ldr	r3, [pc, #244]	; (80006bc <handler_application+0x150>)
 80005c6:	681c      	ldr	r4, [r3, #0]
 80005c8:	f007 f91e 	bl	8007808 <xTaskGetTickCount>
 80005cc:	4602      	mov	r2, r0
 80005ce:	2300      	movs	r3, #0
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2101      	movs	r1, #1
 80005d6:	4620      	mov	r0, r4
 80005d8:	f007 fdf4 	bl	80081c4 <xTimerGenericCommand>
            xTimerStart(TimerHandle_window_out, 0);
 80005dc:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <handler_application+0x154>)
 80005de:	681c      	ldr	r4, [r3, #0]
 80005e0:	f007 f912 	bl	8007808 <xTaskGetTickCount>
 80005e4:	4602      	mov	r2, r0
 80005e6:	2300      	movs	r3, #0
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	2101      	movs	r1, #1
 80005ee:	4620      	mov	r0, r4
 80005f0:	f007 fde8 	bl	80081c4 <xTimerGenericCommand>

            /* reset flag */
            flagAeroc = false;
 80005f4:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <handler_application+0x144>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
//////////////////////////////////////////////////////////////////////////////////////////////////////////
#if APPLICATION_INC_FLAG_WINOUT
        /* This section is use to deploy the parachute if the sensors haven't detected the apogee.
           It may enter in this condition if the variable flagWinOut == true.
           flagWinOut is set to true by the software timer started by the aerocontact */
        if(flagWinOut == true)
 80005fa:	4b32      	ldr	r3, [pc, #200]	; (80006c4 <handler_application+0x158>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00f      	beq.n	8000624 <handler_application+0xb8>
        {
            if(flagDeploy == false)
 8000604:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <handler_application+0x15c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f083 0301 	eor.w	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <handler_application+0xac>
            {
                process_deploy();
 8000614:	f000 f864 	bl	80006e0 <process_deploy>
            }

            /* reset flag */
            flagWinIn = false;
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <handler_application+0x160>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
            flagWinOut = false;
 800061e:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <handler_application+0x158>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
#if APPLICATION_INC_FLAG_WININ
        /* This section is use to scan when deploy the parachute and deploy it.
           To do that, the angles are used to determine if the rocket has 
           reach an angle. At the apogee, the rocket must have a specific angle
           that can be determined in the simulations. */
        if(flagWinIn == true)
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <handler_application+0x160>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d003      	beq.n	8000636 <handler_application+0xca>
        {
        	 LEDS_SEND_PARAMETER(E_LIST_LED_RGB, E_CMD_LEDS_GREEN);
 800062e:	2102      	movs	r1, #2
 8000630:	2000      	movs	r0, #0
 8000632:	f001 f97b 	bl	800192c <API_LEDS_SEND_PARAMETER>
        }
#endif

//////////////////////////////////////////////////////////////////////////////////////////////////////////
#if APPLICATION_INC_MNTR_RECOV
        if(API_RECOVERY_GET_MNTR(&mntr_recov) == true)
 8000636:	4826      	ldr	r0, [pc, #152]	; (80006d0 <handler_application+0x164>)
 8000638:	f001 fd26 	bl	8002088 <API_RECOVERY_GET_MNTR>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d003      	beq.n	800064a <handler_application+0xde>
        {
            process_mntr_recov(mntr_recov);
 8000642:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <handler_application+0x164>)
 8000644:	6818      	ldr	r0, [r3, #0]
 8000646:	f000 f8c1 	bl	80007cc <process_mntr_recov>
        }
#endif

//////////////////////////////////////////////////////////////////////////////////////////////////////////
#if APPLICATION_INC_MNTR_PAYLOAD
        if(API_PAYLOAD_GET_MNTR(&mntr_payload) == true)
 800064a:	4822      	ldr	r0, [pc, #136]	; (80006d4 <handler_application+0x168>)
 800064c:	f001 faee 	bl	8001c2c <API_PAYLOAD_GET_MNTR>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <handler_application+0xf2>
        {
            process_mntr_payload(mntr_payload);
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <handler_application+0x168>)
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	f000 f917 	bl	800088c <process_mntr_payload>
        }
#endif

//////////////////////////////////////////////////////////////////////////////////////////////////////////
#if APPLICATION_INC_MNTR_BATTERY
        if(API_BATTERY_GET_MNTR(&mntr_battery) == true)
 800065e:	481e      	ldr	r0, [pc, #120]	; (80006d8 <handler_application+0x16c>)
 8000660:	f000 fbe6 	bl	8000e30 <API_BATTERY_GET_MNTR>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00a      	beq.n	8000680 <handler_application+0x114>
        {
            process_mntr_battery(mntr_battery);
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <handler_application+0x16c>)
 800066c:	466c      	mov	r4, sp
 800066e:	f103 0210 	add.w	r2, r3, #16
 8000672:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000676:	e884 0003 	stmia.w	r4, {r0, r1}
 800067a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800067c:	f000 f966 	bl	800094c <process_mntr_battery>

//////////////////////////////////////////////////////////////////////////////////////////////////////////
#if APPLICATION_INC_USER_BTN
        /* This section is use to scan when the user button is pressed.
           It can be use to open or close the payload or recovery system manually */
        if(userBtn != E_APP_ISR_NONE)
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <handler_application+0x170>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d008      	beq.n	800069c <handler_application+0x130>
        {
            process_user_btn(userBtn);
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <handler_application+0x170>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f841 	bl	8000718 <process_user_btn>
            userBtn = E_APP_ISR_NONE;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <handler_application+0x170>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
        }
#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    /* wait until next period */
    vTaskDelayUntil(&xLastWakeTime, TASK_PERIOD_APPLICATION);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2101      	movs	r1, #1
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 fee6 	bl	8007474 <xTaskDelayUntil>
        if(flagAeroc == true)
 80006a8:	e77e      	b.n	80005a8 <handler_application+0x3c>
 80006aa:	bf00      	nop
 80006ac:	0800b7d0 	.word	0x0800b7d0
 80006b0:	200055e9 	.word	0x200055e9
 80006b4:	3dcccccd 	.word	0x3dcccccd
 80006b8:	0800b7d8 	.word	0x0800b7d8
 80006bc:	200055ec 	.word	0x200055ec
 80006c0:	200055f4 	.word	0x200055f4
 80006c4:	200055f0 	.word	0x200055f0
 80006c8:	200055fc 	.word	0x200055fc
 80006cc:	200055ea 	.word	0x200055ea
 80006d0:	20000094 	.word	0x20000094
 80006d4:	20000098 	.word	0x20000098
 80006d8:	2000009c 	.word	0x2000009c
 80006dc:	200055e8 	.word	0x200055e8

080006e0 <process_deploy>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void process_deploy(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    flagDeploy = true;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <process_deploy+0x30>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
    API_RECOVERY_SEND_CMD(E_CMD_RECOV_OPEN);
 80006ea:	2002      	movs	r0, #2
 80006ec:	f001 fcba 	bl	8002064 <API_RECOVERY_SEND_CMD>
    BUZZER_SEND_PARAMETER(BUZZER_DESCEND_PERIOD, BUZZER_DESCEND_DUTYCYCLE);
 80006f0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80006f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f8:	f000 fac0 	bl	8000c7c <API_BUZZER_SEND_PARAMETER>
    HMI_SEND_DATA(HMI_ID_APP_PHASE, "DESCEND");
 80006fc:	4905      	ldr	r1, [pc, #20]	; (8000714 <process_deploy+0x34>)
 80006fe:	2010      	movs	r0, #16
 8000700:	f000 fc1c 	bl	8000f3c <API_HMI_SEND_DATA>
    LEDS_SEND_PARAMETER(E_LIST_LED_RGB, E_CMD_LEDS_RED);
 8000704:	2101      	movs	r1, #1
 8000706:	2000      	movs	r0, #0
 8000708:	f001 f910 	bl	800192c <API_LEDS_SEND_PARAMETER>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200055fc 	.word	0x200055fc
 8000714:	0800b7dc 	.word	0x0800b7dc

08000718 <process_user_btn>:
 * @brief       
 * 
 * ************************************************************* **/
#if APPLICATION_INC_USER_BTN
static void process_user_btn(ENUM_APP_ISR_ID_t ID)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
    switch (ID)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	3b02      	subs	r3, #2
 8000726:	2b03      	cmp	r3, #3
 8000728:	d846      	bhi.n	80007b8 <process_user_btn+0xa0>
 800072a:	a201      	add	r2, pc, #4	; (adr r2, 8000730 <process_user_btn+0x18>)
 800072c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000730:	08000741 	.word	0x08000741
 8000734:	0800075f 	.word	0x0800075f
 8000738:	0800077d 	.word	0x0800077d
 800073c:	0800079b 	.word	0x0800079b
    {
        /* force to open the recovery */
        case E_APP_ISR_RECOV_OPEN:
            if(HAL_GPIO_ReadPin(IHM_DIO1_GPIO_Port, IHM_DIO1_Pin) == GPIO_PIN_SET)
 8000740:	2120      	movs	r1, #32
 8000742:	4820      	ldr	r0, [pc, #128]	; (80007c4 <process_user_btn+0xac>)
 8000744:	f003 fea8 	bl	8004498 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d103      	bne.n	8000756 <process_user_btn+0x3e>
            {
                API_RECOVERY_SEND_CMD(E_CMD_RECOV_OPEN);
 800074e:	2002      	movs	r0, #2
 8000750:	f001 fc88 	bl	8002064 <API_RECOVERY_SEND_CMD>
            }
            else
            {
                API_RECOVERY_SEND_CMD(E_CMD_RECOV_STOP);
            }
            break;
 8000754:	e031      	b.n	80007ba <process_user_btn+0xa2>
                API_RECOVERY_SEND_CMD(E_CMD_RECOV_STOP);
 8000756:	2001      	movs	r0, #1
 8000758:	f001 fc84 	bl	8002064 <API_RECOVERY_SEND_CMD>
            break;
 800075c:	e02d      	b.n	80007ba <process_user_btn+0xa2>

        /* force to close the recovery */
        case E_APP_ISR_RECOV_CLOSE:
            if(HAL_GPIO_ReadPin(IHM_DIO2_GPIO_Port, IHM_DIO2_Pin) == GPIO_PIN_SET)
 800075e:	2110      	movs	r1, #16
 8000760:	4818      	ldr	r0, [pc, #96]	; (80007c4 <process_user_btn+0xac>)
 8000762:	f003 fe99 	bl	8004498 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d103      	bne.n	8000774 <process_user_btn+0x5c>
            {
                API_RECOVERY_SEND_CMD(E_CMD_RECOV_CLOSE);
 800076c:	2003      	movs	r0, #3
 800076e:	f001 fc79 	bl	8002064 <API_RECOVERY_SEND_CMD>
            }
            else
            {
                API_RECOVERY_SEND_CMD(E_CMD_RECOV_STOP);
            }
            break;
 8000772:	e022      	b.n	80007ba <process_user_btn+0xa2>
                API_RECOVERY_SEND_CMD(E_CMD_RECOV_STOP);
 8000774:	2001      	movs	r0, #1
 8000776:	f001 fc75 	bl	8002064 <API_RECOVERY_SEND_CMD>
            break;
 800077a:	e01e      	b.n	80007ba <process_user_btn+0xa2>

        /* force to open the payload */
        case E_APP_ISR_PAYLOAD_OPEN:
            if(HAL_GPIO_ReadPin(IHM_DIO3_GPIO_Port, IHM_DIO3_Pin) == GPIO_PIN_SET)
 800077c:	2108      	movs	r1, #8
 800077e:	4811      	ldr	r0, [pc, #68]	; (80007c4 <process_user_btn+0xac>)
 8000780:	f003 fe8a 	bl	8004498 <HAL_GPIO_ReadPin>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d103      	bne.n	8000792 <process_user_btn+0x7a>
            {
                API_PAYLOAD_SEND_CMD(E_CMD_PL_OPEN);
 800078a:	2002      	movs	r0, #2
 800078c:	f001 fa3c 	bl	8001c08 <API_PAYLOAD_SEND_CMD>
            }
            else
            {
                API_PAYLOAD_SEND_CMD(E_CMD_PL_STOP);
            }
            break;
 8000790:	e013      	b.n	80007ba <process_user_btn+0xa2>
                API_PAYLOAD_SEND_CMD(E_CMD_PL_STOP);
 8000792:	2001      	movs	r0, #1
 8000794:	f001 fa38 	bl	8001c08 <API_PAYLOAD_SEND_CMD>
            break;
 8000798:	e00f      	b.n	80007ba <process_user_btn+0xa2>

        /* force to close the payload */
        case E_APP_ISR_PAYLOAD_CLOSE:
        	if(HAL_GPIO_ReadPin(IHM_DIO4_GPIO_Port, IHM_DIO4_Pin) == GPIO_PIN_SET)
 800079a:	2104      	movs	r1, #4
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <process_user_btn+0xb0>)
 800079e:	f003 fe7b 	bl	8004498 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d103      	bne.n	80007b0 <process_user_btn+0x98>
            {
                API_PAYLOAD_SEND_CMD(E_CMD_PL_CLOSE);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f001 fa2d 	bl	8001c08 <API_PAYLOAD_SEND_CMD>
            }
            else
            {
                API_PAYLOAD_SEND_CMD(E_CMD_PL_STOP);
            }
        	break;
 80007ae:	e004      	b.n	80007ba <process_user_btn+0xa2>
                API_PAYLOAD_SEND_CMD(E_CMD_PL_STOP);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f001 fa29 	bl	8001c08 <API_PAYLOAD_SEND_CMD>
        	break;
 80007b6:	e000      	b.n	80007ba <process_user_btn+0xa2>

        default :
        	break;
 80007b8:	bf00      	nop
    }
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40020c00 	.word	0x40020c00

080007cc <process_mntr_recov>:
 * 
 * @param       MNTR_RECOV 
 * ************************************************************* **/
#if APPLICATION_INC_MNTR_RECOV
static void process_mntr_recov(STRUCT_RECOV_MNTR_t MNTR_RECOV)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	80b8      	strh	r0, [r7, #4]
    /* send to hmi the last cmd received by the recovery */
    switch(MNTR_RECOV.last_cmd)
 80007d4:	793b      	ldrb	r3, [r7, #4]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d81e      	bhi.n	8000818 <process_mntr_recov+0x4c>
 80007da:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <process_mntr_recov+0x14>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	080007f1 	.word	0x080007f1
 80007e4:	080007fb 	.word	0x080007fb
 80007e8:	08000805 	.word	0x08000805
 80007ec:	0800080f 	.word	0x0800080f
    {
        case E_CMD_RECOV_NONE:  HMI_SEND_DATA(HMI_ID_RECOV_LAST_CMD, "NONE");  break;
 80007f0:	4921      	ldr	r1, [pc, #132]	; (8000878 <process_mntr_recov+0xac>)
 80007f2:	2040      	movs	r0, #64	; 0x40
 80007f4:	f000 fba2 	bl	8000f3c <API_HMI_SEND_DATA>
 80007f8:	e00f      	b.n	800081a <process_mntr_recov+0x4e>
        case E_CMD_RECOV_STOP:  HMI_SEND_DATA(HMI_ID_RECOV_LAST_CMD, "STOP");  break;
 80007fa:	4920      	ldr	r1, [pc, #128]	; (800087c <process_mntr_recov+0xb0>)
 80007fc:	2040      	movs	r0, #64	; 0x40
 80007fe:	f000 fb9d 	bl	8000f3c <API_HMI_SEND_DATA>
 8000802:	e00a      	b.n	800081a <process_mntr_recov+0x4e>
        case E_CMD_RECOV_OPEN:  HMI_SEND_DATA(HMI_ID_RECOV_LAST_CMD, "OPEN");  break;
 8000804:	491e      	ldr	r1, [pc, #120]	; (8000880 <process_mntr_recov+0xb4>)
 8000806:	2040      	movs	r0, #64	; 0x40
 8000808:	f000 fb98 	bl	8000f3c <API_HMI_SEND_DATA>
 800080c:	e005      	b.n	800081a <process_mntr_recov+0x4e>
        case E_CMD_RECOV_CLOSE: HMI_SEND_DATA(HMI_ID_RECOV_LAST_CMD, "CLOSE"); break;
 800080e:	491d      	ldr	r1, [pc, #116]	; (8000884 <process_mntr_recov+0xb8>)
 8000810:	2040      	movs	r0, #64	; 0x40
 8000812:	f000 fb93 	bl	8000f3c <API_HMI_SEND_DATA>
 8000816:	e000      	b.n	800081a <process_mntr_recov+0x4e>
        default: break;
 8000818:	bf00      	nop
    }

    /* send to hmi the status of the recovery */
    switch(MNTR_RECOV.status)
 800081a:	797b      	ldrb	r3, [r7, #5]
 800081c:	2b04      	cmp	r3, #4
 800081e:	d826      	bhi.n	800086e <process_mntr_recov+0xa2>
 8000820:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <process_mntr_recov+0x5c>)
 8000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000826:	bf00      	nop
 8000828:	0800083d 	.word	0x0800083d
 800082c:	08000847 	.word	0x08000847
 8000830:	08000851 	.word	0x08000851
 8000834:	0800085b 	.word	0x0800085b
 8000838:	08000865 	.word	0x08000865
    {
        case E_STATUS_RECOV_NONE:    HMI_SEND_DATA(HMI_ID_RECOV_STATUS, "NONE");    break;
 800083c:	490e      	ldr	r1, [pc, #56]	; (8000878 <process_mntr_recov+0xac>)
 800083e:	2041      	movs	r0, #65	; 0x41
 8000840:	f000 fb7c 	bl	8000f3c <API_HMI_SEND_DATA>
 8000844:	e014      	b.n	8000870 <process_mntr_recov+0xa4>
        case E_STATUS_RECOV_STOP:    HMI_SEND_DATA(HMI_ID_RECOV_STATUS, "STOP");    break;
 8000846:	490d      	ldr	r1, [pc, #52]	; (800087c <process_mntr_recov+0xb0>)
 8000848:	2041      	movs	r0, #65	; 0x41
 800084a:	f000 fb77 	bl	8000f3c <API_HMI_SEND_DATA>
 800084e:	e00f      	b.n	8000870 <process_mntr_recov+0xa4>
        case E_STATUS_RECOV_RUNNING: HMI_SEND_DATA(HMI_ID_RECOV_STATUS, "RUNNING"); break;
 8000850:	490d      	ldr	r1, [pc, #52]	; (8000888 <process_mntr_recov+0xbc>)
 8000852:	2041      	movs	r0, #65	; 0x41
 8000854:	f000 fb72 	bl	8000f3c <API_HMI_SEND_DATA>
 8000858:	e00a      	b.n	8000870 <process_mntr_recov+0xa4>
        case E_STATUS_RECOV_OPENED:  HMI_SEND_DATA(HMI_ID_RECOV_STATUS, "OPEN");    break;
 800085a:	4909      	ldr	r1, [pc, #36]	; (8000880 <process_mntr_recov+0xb4>)
 800085c:	2041      	movs	r0, #65	; 0x41
 800085e:	f000 fb6d 	bl	8000f3c <API_HMI_SEND_DATA>
 8000862:	e005      	b.n	8000870 <process_mntr_recov+0xa4>
        case E_STATUS_RECOV_CLOSED:  HMI_SEND_DATA(HMI_ID_RECOV_STATUS, "CLOSE");   break;
 8000864:	4907      	ldr	r1, [pc, #28]	; (8000884 <process_mntr_recov+0xb8>)
 8000866:	2041      	movs	r0, #65	; 0x41
 8000868:	f000 fb68 	bl	8000f3c <API_HMI_SEND_DATA>
 800086c:	e000      	b.n	8000870 <process_mntr_recov+0xa4>
        default: break;
 800086e:	bf00      	nop
    }
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	0800b7e4 	.word	0x0800b7e4
 800087c:	0800b7ec 	.word	0x0800b7ec
 8000880:	0800b7f4 	.word	0x0800b7f4
 8000884:	0800b7fc 	.word	0x0800b7fc
 8000888:	0800b804 	.word	0x0800b804

0800088c <process_mntr_payload>:
 * 
 * @param       MNTR_PAYLOAD 
 * ************************************************************* **/
#if APPLICATION_INC_MNTR_PAYLOAD
static void process_mntr_payload(STRUCT_PAYLOAD_MNTR_t MNTR_PAYLOAD)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	80b8      	strh	r0, [r7, #4]
    /* send to hmi the last cmd received by the recovery */
    switch(MNTR_PAYLOAD.last_cmd)
 8000894:	793b      	ldrb	r3, [r7, #4]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d81e      	bhi.n	80008d8 <process_mntr_payload+0x4c>
 800089a:	a201      	add	r2, pc, #4	; (adr r2, 80008a0 <process_mntr_payload+0x14>)
 800089c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a0:	080008b1 	.word	0x080008b1
 80008a4:	080008bb 	.word	0x080008bb
 80008a8:	080008c5 	.word	0x080008c5
 80008ac:	080008cf 	.word	0x080008cf
    {
        case E_CMD_PL_NONE:  HMI_SEND_DATA(HMI_ID_RECOV_LAST_CMD, "NONE");   break;
 80008b0:	4921      	ldr	r1, [pc, #132]	; (8000938 <process_mntr_payload+0xac>)
 80008b2:	2040      	movs	r0, #64	; 0x40
 80008b4:	f000 fb42 	bl	8000f3c <API_HMI_SEND_DATA>
 80008b8:	e00f      	b.n	80008da <process_mntr_payload+0x4e>
        case E_CMD_PL_STOP:  HMI_SEND_DATA(HMI_ID_RECOV_LAST_CMD, "STOP");   break;
 80008ba:	4920      	ldr	r1, [pc, #128]	; (800093c <process_mntr_payload+0xb0>)
 80008bc:	2040      	movs	r0, #64	; 0x40
 80008be:	f000 fb3d 	bl	8000f3c <API_HMI_SEND_DATA>
 80008c2:	e00a      	b.n	80008da <process_mntr_payload+0x4e>
        case E_CMD_PL_OPEN:  HMI_SEND_DATA(HMI_ID_RECOV_LAST_CMD, "OPEN");   break;
 80008c4:	491e      	ldr	r1, [pc, #120]	; (8000940 <process_mntr_payload+0xb4>)
 80008c6:	2040      	movs	r0, #64	; 0x40
 80008c8:	f000 fb38 	bl	8000f3c <API_HMI_SEND_DATA>
 80008cc:	e005      	b.n	80008da <process_mntr_payload+0x4e>
        case E_CMD_PL_CLOSE: HMI_SEND_DATA(HMI_ID_RECOV_LAST_CMD, "CLOSE");  break;
 80008ce:	491d      	ldr	r1, [pc, #116]	; (8000944 <process_mntr_payload+0xb8>)
 80008d0:	2040      	movs	r0, #64	; 0x40
 80008d2:	f000 fb33 	bl	8000f3c <API_HMI_SEND_DATA>
 80008d6:	e000      	b.n	80008da <process_mntr_payload+0x4e>
        default: break;
 80008d8:	bf00      	nop
    }

    /* send to hmi the status of the recovery */
    switch(MNTR_PAYLOAD.status)
 80008da:	797b      	ldrb	r3, [r7, #5]
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d826      	bhi.n	800092e <process_mntr_payload+0xa2>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <process_mntr_payload+0x5c>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	080008fd 	.word	0x080008fd
 80008ec:	08000907 	.word	0x08000907
 80008f0:	08000911 	.word	0x08000911
 80008f4:	0800091b 	.word	0x0800091b
 80008f8:	08000925 	.word	0x08000925
    {
        case E_STATUS_PL_NONE:    HMI_SEND_DATA(HMI_ID_RECOV_STATUS, "NONE");    break;
 80008fc:	490e      	ldr	r1, [pc, #56]	; (8000938 <process_mntr_payload+0xac>)
 80008fe:	2041      	movs	r0, #65	; 0x41
 8000900:	f000 fb1c 	bl	8000f3c <API_HMI_SEND_DATA>
 8000904:	e014      	b.n	8000930 <process_mntr_payload+0xa4>
        case E_STATUS_PL_STOP:    HMI_SEND_DATA(HMI_ID_RECOV_STATUS, "STOP");    break;
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <process_mntr_payload+0xb0>)
 8000908:	2041      	movs	r0, #65	; 0x41
 800090a:	f000 fb17 	bl	8000f3c <API_HMI_SEND_DATA>
 800090e:	e00f      	b.n	8000930 <process_mntr_payload+0xa4>
        case E_STATUS_PL_RUNNING: HMI_SEND_DATA(HMI_ID_RECOV_STATUS, "RUNNING"); break;
 8000910:	490d      	ldr	r1, [pc, #52]	; (8000948 <process_mntr_payload+0xbc>)
 8000912:	2041      	movs	r0, #65	; 0x41
 8000914:	f000 fb12 	bl	8000f3c <API_HMI_SEND_DATA>
 8000918:	e00a      	b.n	8000930 <process_mntr_payload+0xa4>
        case E_STATUS_PL_OPENED:  HMI_SEND_DATA(HMI_ID_RECOV_STATUS, "OPEN");    break;
 800091a:	4909      	ldr	r1, [pc, #36]	; (8000940 <process_mntr_payload+0xb4>)
 800091c:	2041      	movs	r0, #65	; 0x41
 800091e:	f000 fb0d 	bl	8000f3c <API_HMI_SEND_DATA>
 8000922:	e005      	b.n	8000930 <process_mntr_payload+0xa4>
        case E_STATUS_PL_CLOSED:  HMI_SEND_DATA(HMI_ID_RECOV_STATUS, "CLOSE");   break;
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <process_mntr_payload+0xb8>)
 8000926:	2041      	movs	r0, #65	; 0x41
 8000928:	f000 fb08 	bl	8000f3c <API_HMI_SEND_DATA>
 800092c:	e000      	b.n	8000930 <process_mntr_payload+0xa4>
        default: break;
 800092e:	bf00      	nop
    }
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	0800b7e4 	.word	0x0800b7e4
 800093c:	0800b7ec 	.word	0x0800b7ec
 8000940:	0800b7f4 	.word	0x0800b7f4
 8000944:	0800b7fc 	.word	0x0800b7fc
 8000948:	0800b804 	.word	0x0800b804

0800094c <process_mntr_battery>:
 * 
 * @param       MNTR_battery 
 * ************************************************************* **/
#if APPLICATION_INC_MNTR_BATTERY
static void process_mntr_battery(STRUCT_BATTERY_MNTR_t MNTR_battery)
{
 800094c:	b084      	sub	sp, #16
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
 8000952:	f107 0c08 	add.w	ip, r7, #8
 8000956:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    /* check status SEQ */
    if(MNTR_battery.BAT_SEQ.status == E_BATTERY_KO)
 800095a:	7a3b      	ldrb	r3, [r7, #8]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d108      	bne.n	8000972 <process_mntr_battery+0x26>
    {
        HMI_SEND_DATA(HMI_ID_MNTR_BAT_SEQ, "DEFECT");
 8000960:	491f      	ldr	r1, [pc, #124]	; (80009e0 <process_mntr_battery+0x94>)
 8000962:	2030      	movs	r0, #48	; 0x30
 8000964:	f000 faea 	bl	8000f3c <API_HMI_SEND_DATA>
        LEDS_SEND_PARAMETER(E_LIST_LED_VBAT_SEQ, E_CMD_LEDS_RED);
 8000968:	2101      	movs	r1, #1
 800096a:	2001      	movs	r0, #1
 800096c:	f000 ffde 	bl	800192c <API_LEDS_SEND_PARAMETER>
 8000970:	e007      	b.n	8000982 <process_mntr_battery+0x36>
    }
    else
    {
        HMI_SEND_DATA(HMI_ID_MNTR_BAT_SEQ, "OK");
 8000972:	491c      	ldr	r1, [pc, #112]	; (80009e4 <process_mntr_battery+0x98>)
 8000974:	2030      	movs	r0, #48	; 0x30
 8000976:	f000 fae1 	bl	8000f3c <API_HMI_SEND_DATA>
        LEDS_SEND_PARAMETER(E_LIST_LED_VBAT_SEQ, E_CMD_LEDS_NONE);
 800097a:	2100      	movs	r1, #0
 800097c:	2001      	movs	r0, #1
 800097e:	f000 ffd5 	bl	800192c <API_LEDS_SEND_PARAMETER>
    }

    /* check status MOTOR1 */
    if(MNTR_battery.BAT_RECOV.status == E_BATTERY_KO)
 8000982:	7c3b      	ldrb	r3, [r7, #16]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d108      	bne.n	800099a <process_mntr_battery+0x4e>
    {
        HMI_SEND_DATA(HMI_ID_MNTR_BAT_RECOV, "DEFECT");
 8000988:	4915      	ldr	r1, [pc, #84]	; (80009e0 <process_mntr_battery+0x94>)
 800098a:	2031      	movs	r0, #49	; 0x31
 800098c:	f000 fad6 	bl	8000f3c <API_HMI_SEND_DATA>
        LEDS_SEND_PARAMETER(E_LIST_LED_VBAT_RECOV, E_CMD_LEDS_RED);
 8000990:	2101      	movs	r1, #1
 8000992:	2002      	movs	r0, #2
 8000994:	f000 ffca 	bl	800192c <API_LEDS_SEND_PARAMETER>
 8000998:	e007      	b.n	80009aa <process_mntr_battery+0x5e>
    }
    else
    {
        HMI_SEND_DATA(HMI_ID_MNTR_BAT_RECOV, "OK");
 800099a:	4912      	ldr	r1, [pc, #72]	; (80009e4 <process_mntr_battery+0x98>)
 800099c:	2031      	movs	r0, #49	; 0x31
 800099e:	f000 facd 	bl	8000f3c <API_HMI_SEND_DATA>
        LEDS_SEND_PARAMETER(E_LIST_LED_VBAT_RECOV, E_CMD_LEDS_NONE);
 80009a2:	2100      	movs	r1, #0
 80009a4:	2002      	movs	r0, #2
 80009a6:	f000 ffc1 	bl	800192c <API_LEDS_SEND_PARAMETER>
    }

    /* check status MOTOR2 */
    if(MNTR_battery.BAT_PAYLOAD.status == E_BATTERY_KO)
 80009aa:	7e3b      	ldrb	r3, [r7, #24]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d108      	bne.n	80009c2 <process_mntr_battery+0x76>
    {
        HMI_SEND_DATA(HMI_ID_MNTR_BAT_PAYLOAD, "DEFECT");
 80009b0:	490b      	ldr	r1, [pc, #44]	; (80009e0 <process_mntr_battery+0x94>)
 80009b2:	2032      	movs	r0, #50	; 0x32
 80009b4:	f000 fac2 	bl	8000f3c <API_HMI_SEND_DATA>
        LEDS_SEND_PARAMETER(E_LIST_LED_VBAT_PAYLOAD, E_CMD_LEDS_RED);
 80009b8:	2101      	movs	r1, #1
 80009ba:	2003      	movs	r0, #3
 80009bc:	f000 ffb6 	bl	800192c <API_LEDS_SEND_PARAMETER>
    else
    {
        HMI_SEND_DATA(HMI_ID_MNTR_BAT_PAYLOAD, "OK");
        LEDS_SEND_PARAMETER(E_LIST_LED_VBAT_PAYLOAD, E_CMD_LEDS_NONE);
    }
}
 80009c0:	e007      	b.n	80009d2 <process_mntr_battery+0x86>
        HMI_SEND_DATA(HMI_ID_MNTR_BAT_PAYLOAD, "OK");
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <process_mntr_battery+0x98>)
 80009c4:	2032      	movs	r0, #50	; 0x32
 80009c6:	f000 fab9 	bl	8000f3c <API_HMI_SEND_DATA>
        LEDS_SEND_PARAMETER(E_LIST_LED_VBAT_PAYLOAD, E_CMD_LEDS_NONE);
 80009ca:	2100      	movs	r1, #0
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 ffad 	bl	800192c <API_LEDS_SEND_PARAMETER>
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009da:	b004      	add	sp, #16
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	0800b80c 	.word	0x0800b80c
 80009e4:	0800b814 	.word	0x0800b814

080009e8 <API_APPLICATION_START>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
void API_APPLICATION_START(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af02      	add	r7, sp, #8
    BaseType_t status;

    flagAeroc = false;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <API_APPLICATION_START+0x8c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
    flagWinIn = false;
 80009f4:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <API_APPLICATION_START+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
    flagWinOut = false;
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <API_APPLICATION_START+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
    flagDeploy = false;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <API_APPLICATION_START+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
    
    /* create the tasks */
    status = xTaskCreate(handler_application, "task_application", 2*configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_APPLICATION, &TaskHandle_application);
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <API_APPLICATION_START+0x9c>)
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a14:	491c      	ldr	r1, [pc, #112]	; (8000a88 <API_APPLICATION_START+0xa0>)
 8000a16:	481d      	ldr	r0, [pc, #116]	; (8000a8c <API_APPLICATION_START+0xa4>)
 8000a18:	f006 fbc8 	bl	80071ac <xTaskCreate>
 8000a1c:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d00a      	beq.n	8000a3a <API_APPLICATION_START+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a28:	f383 8811 	msr	BASEPRI, r3
 8000a2c:	f3bf 8f6f 	isb	sy
 8000a30:	f3bf 8f4f 	dsb	sy
 8000a34:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000a36:	bf00      	nop
 8000a38:	e7fe      	b.n	8000a38 <API_APPLICATION_START+0x50>

    /* init the temporal window timers */
    TimerHandle_window_in  = xTimerCreate("timer_window_in", pdMS_TO_TICKS(WINDOW_IN_TIME), pdFALSE, (void*)0, callback_timer_window_in);
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <API_APPLICATION_START+0xa8>)
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <API_APPLICATION_START+0xac>)
 8000a48:	f007 fb60 	bl	800810c <xTimerCreate>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <API_APPLICATION_START+0xb0>)
 8000a50:	6013      	str	r3, [r2, #0]
    TimerHandle_window_out = xTimerCreate("timer_window_out", pdMS_TO_TICKS(WINDOW_OUT_TIME), pdFALSE, (void*)0, callback_timer_window_out);
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <API_APPLICATION_START+0xb4>)
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2300      	movs	r3, #0
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a5e:	4810      	ldr	r0, [pc, #64]	; (8000aa0 <API_APPLICATION_START+0xb8>)
 8000a60:	f007 fb54 	bl	800810c <xTimerCreate>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <API_APPLICATION_START+0xbc>)
 8000a68:	6013      	str	r3, [r2, #0]
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200055e9 	.word	0x200055e9
 8000a78:	200055ea 	.word	0x200055ea
 8000a7c:	200055f0 	.word	0x200055f0
 8000a80:	200055fc 	.word	0x200055fc
 8000a84:	200055f8 	.word	0x200055f8
 8000a88:	0800b818 	.word	0x0800b818
 8000a8c:	0800056d 	.word	0x0800056d
 8000a90:	08000aa9 	.word	0x08000aa9
 8000a94:	0800b82c 	.word	0x0800b82c
 8000a98:	200055ec 	.word	0x200055ec
 8000a9c:	08000ac9 	.word	0x08000ac9
 8000aa0:	0800b83c 	.word	0x0800b83c
 8000aa4:	200055f4 	.word	0x200055f4

08000aa8 <callback_timer_window_in>:
 * @brief       
 * 
 * @param       xTimer 
 * ************************************************************* **/
static void callback_timer_window_in(TimerHandle_t xTimer)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    flagWinIn = true;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <callback_timer_window_in+0x1c>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200055ea 	.word	0x200055ea

08000ac8 <callback_timer_window_out>:
 * @brief       
 * 
 * @param       xTimer 
 * ************************************************************* **/
static void callback_timer_window_out(TimerHandle_t xTimer)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    flagWinOut = true;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <callback_timer_window_out+0x1c>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	200055f0 	.word	0x200055f0

08000ae8 <API_APPLICATION_CALLBACK_ISR>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
void API_APPLICATION_CALLBACK_ISR(ENUM_APP_ISR_ID_t ID)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
    switch(ID)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	d820      	bhi.n	8000b3c <API_APPLICATION_CALLBACK_ISR+0x54>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <API_APPLICATION_CALLBACK_ISR+0x18>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b15 	.word	0x08000b15
 8000b04:	08000b1d 	.word	0x08000b1d
 8000b08:	08000b25 	.word	0x08000b25
 8000b0c:	08000b2d 	.word	0x08000b2d
 8000b10:	08000b35 	.word	0x08000b35
    {
        case E_APP_ISR_AEROC :          flagAeroc = true; break;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <API_APPLICATION_CALLBACK_ISR+0x64>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e010      	b.n	8000b3e <API_APPLICATION_CALLBACK_ISR+0x56>

        case E_APP_ISR_RECOV_OPEN :     userBtn = ID; break;
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <API_APPLICATION_CALLBACK_ISR+0x68>)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	7013      	strb	r3, [r2, #0]
 8000b22:	e00c      	b.n	8000b3e <API_APPLICATION_CALLBACK_ISR+0x56>
        case E_APP_ISR_RECOV_CLOSE :    userBtn = ID; break;
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <API_APPLICATION_CALLBACK_ISR+0x68>)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	7013      	strb	r3, [r2, #0]
 8000b2a:	e008      	b.n	8000b3e <API_APPLICATION_CALLBACK_ISR+0x56>
        case E_APP_ISR_PAYLOAD_OPEN :   userBtn = ID; break;
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <API_APPLICATION_CALLBACK_ISR+0x68>)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	7013      	strb	r3, [r2, #0]
 8000b32:	e004      	b.n	8000b3e <API_APPLICATION_CALLBACK_ISR+0x56>
        case E_APP_ISR_PAYLOAD_CLOSE :  userBtn = ID; break;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <API_APPLICATION_CALLBACK_ISR+0x68>)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	7013      	strb	r3, [r2, #0]
 8000b3a:	e000      	b.n	8000b3e <API_APPLICATION_CALLBACK_ISR+0x56>
        default :  break;
 8000b3c:	bf00      	nop
    }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	200055e9 	.word	0x200055e9
 8000b50:	200055e8 	.word	0x200055e8

08000b54 <handler_buzzer>:
 *              to send new parameters
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_buzzer(void* parameters)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    while(1)
    {
        /* (alpha) part of dutycycle */
        HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8000b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b60:	4824      	ldr	r0, [pc, #144]	; (8000bf4 <handler_buzzer+0xa0>)
 8000b62:	f003 fcca 	bl	80044fa <HAL_GPIO_TogglePin>
        xQueueReceive(QueueHandle_buzzer, &buzzer, pdMS_TO_TICKS(buzzer.period * buzzer.dutycycle));
 8000b66:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <handler_buzzer+0xa4>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <handler_buzzer+0xa8>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	ee07 3a90 	vmov	s15, r3
 8000b72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <handler_buzzer+0xa8>)
 8000b78:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b84:	ee17 2a90 	vmov	r2, s15
 8000b88:	2364      	movs	r3, #100	; 0x64
 8000b8a:	fb03 f302 	mul.w	r3, r3, r2
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <handler_buzzer+0xac>)
 8000b90:	fba2 2303 	umull	r2, r3, r2, r3
 8000b94:	099b      	lsrs	r3, r3, #6
 8000b96:	461a      	mov	r2, r3
 8000b98:	4918      	ldr	r1, [pc, #96]	; (8000bfc <handler_buzzer+0xa8>)
 8000b9a:	f006 f881 	bl	8006ca0 <xQueueReceive>

        /* (1 - alpha) part of dutycycle */
        HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8000b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <handler_buzzer+0xa0>)
 8000ba4:	f003 fca9 	bl	80044fa <HAL_GPIO_TogglePin>
        xQueueReceive(QueueHandle_buzzer, &buzzer, pdMS_TO_TICKS(buzzer.period - buzzer.period * buzzer.dutycycle));
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <handler_buzzer+0xa4>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <handler_buzzer+0xa8>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <handler_buzzer+0xa8>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	ee07 3a90 	vmov	s15, r3
 8000bc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <handler_buzzer+0xa8>)
 8000bc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bd6:	ee17 2a90 	vmov	r2, s15
 8000bda:	2364      	movs	r3, #100	; 0x64
 8000bdc:	fb03 f302 	mul.w	r3, r3, r2
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <handler_buzzer+0xac>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	099b      	lsrs	r3, r3, #6
 8000be8:	461a      	mov	r2, r3
 8000bea:	4904      	ldr	r1, [pc, #16]	; (8000bfc <handler_buzzer+0xa8>)
 8000bec:	f006 f858 	bl	8006ca0 <xQueueReceive>
        HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8000bf0:	e7b4      	b.n	8000b5c <handler_buzzer+0x8>
 8000bf2:	bf00      	nop
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	20005604 	.word	0x20005604
 8000bfc:	200000b4 	.word	0x200000b4
 8000c00:	10624dd3 	.word	0x10624dd3

08000c04 <API_BUZZER_START>:
/** ************************************************************* *
 * @brief       init and start the buzzer task
 * 
 * ************************************************************* **/
void API_BUZZER_START(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af02      	add	r7, sp, #8
    BaseType_t status;

    /* init the main structure */
    buzzer.period    = BUZZER_DEFAULT_PERIOD;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <API_BUZZER_START+0x60>)
 8000c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c10:	801a      	strh	r2, [r3, #0]
    buzzer.dutycycle = BUZZER_DEFAULT_DUTYCYCLE;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <API_BUZZER_START+0x60>)
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <API_BUZZER_START+0x64>)
 8000c16:	605a      	str	r2, [r3, #4]

    /* create the queue */
    QueueHandle_buzzer = xQueueCreate (1, sizeof(STRUCT_BUZZER_t));
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f005 fdd3 	bl	80067c8 <xQueueGenericCreate>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <API_BUZZER_START+0x68>)
 8000c26:	6013      	str	r3, [r2, #0]
    
    /* create the task */
    status = xTaskCreate(handler_buzzer, "task_buzzer", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_BUZZER, &TaskHandle_buzzer);
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <API_BUZZER_START+0x6c>)
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2300      	movs	r3, #0
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	490f      	ldr	r1, [pc, #60]	; (8000c74 <API_BUZZER_START+0x70>)
 8000c36:	4810      	ldr	r0, [pc, #64]	; (8000c78 <API_BUZZER_START+0x74>)
 8000c38:	f006 fab8 	bl	80071ac <xTaskCreate>
 8000c3c:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d00a      	beq.n	8000c5a <API_BUZZER_START+0x56>
        __asm volatile
 8000c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c48:	f383 8811 	msr	BASEPRI, r3
 8000c4c:	f3bf 8f6f 	isb	sy
 8000c50:	f3bf 8f4f 	dsb	sy
 8000c54:	603b      	str	r3, [r7, #0]
    }
 8000c56:	bf00      	nop
 8000c58:	e7fe      	b.n	8000c58 <API_BUZZER_START+0x54>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000b4 	.word	0x200000b4
 8000c68:	3c75c28f 	.word	0x3c75c28f
 8000c6c:	20005604 	.word	0x20005604
 8000c70:	20005600 	.word	0x20005600
 8000c74:	0800b850 	.word	0x0800b850
 8000c78:	08000b55 	.word	0x08000b55

08000c7c <API_BUZZER_SEND_PARAMETER>:
 * 
 * @param       period 
 * @param       dutycycle 
 * ************************************************************* **/
void API_BUZZER_SEND_PARAMETER(uint16_t period, float dutycycle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	ed87 0a00 	vstr	s0, [r7]
 8000c88:	80fb      	strh	r3, [r7, #6]
    STRUCT_BUZZER_t param = {.dutycycle = dutycycle, .period = period};
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	813b      	strh	r3, [r7, #8]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
    xQueueSend(QueueHandle_buzzer, &param, 0);
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <API_BUZZER_SEND_PARAMETER+0x30>)
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	f107 0108 	add.w	r1, r7, #8
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f005 fe1b 	bl	80068d8 <xQueueGenericSend>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20005604 	.word	0x20005604

08000cb0 <handler_battery>:
 * @brief       
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_battery(void* parameters)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
 8000cb8:	f006 fda6 	bl	8007808 <xTaskGetTickCount>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

    STRUCT_BATTERY_t DATA = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	615a      	str	r2, [r3, #20]

    uint32_t adc_result[3];
    HAL_ADC_Start_DMA(BATTERY_ADC_HANDLE, adc_result, 3); // start adc in DMA mode
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4821      	ldr	r0, [pc, #132]	; (8000d60 <handler_battery+0xb0>)
 8000cdc:	f002 fa48 	bl	8003170 <HAL_ADC_Start_DMA>

    while(1)
    {
        /* update batteries values from ADC */
        DATA.BAT_SEQ.volt       = convert_adc_volt(adc_result[BATTERY_ADC_VBAT_SEQ]);
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f840 	bl	8000d68 <convert_adc_volt>
 8000ce8:	eef0 7a40 	vmov.f32	s15, s0
 8000cec:	edc7 7a06 	vstr	s15, [r7, #24]
        DATA.BAT_RECOV.volt    = convert_adc_volt(adc_result[BATTERY_ADC_VBAT_RECOV]);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f838 	bl	8000d68 <convert_adc_volt>
 8000cf8:	eef0 7a40 	vmov.f32	s15, s0
 8000cfc:	edc7 7a08 	vstr	s15, [r7, #32]
        DATA.BAT_PAYLOAD.volt    = convert_adc_volt(adc_result[BATTERY_ADC_VBAT_PAYLOAD]);
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f830 	bl	8000d68 <convert_adc_volt>
 8000d08:	eef0 7a40 	vmov.f32	s15, s0
 8000d0c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

        /* update batteries status */
        DATA.BAT_SEQ.status    = update_status(DATA.BAT_SEQ.volt);
 8000d10:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d14:	eeb0 0a67 	vmov.f32	s0, s15
 8000d18:	f000 f840 	bl	8000d9c <update_status>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	753b      	strb	r3, [r7, #20]
        DATA.BAT_RECOV.status = update_status(DATA.BAT_RECOV.volt);
 8000d20:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d24:	eeb0 0a67 	vmov.f32	s0, s15
 8000d28:	f000 f838 	bl	8000d9c <update_status>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	773b      	strb	r3, [r7, #28]
        DATA.BAT_PAYLOAD.status = update_status(DATA.BAT_PAYLOAD.volt);
 8000d30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d34:	eeb0 0a67 	vmov.f32	s0, s15
 8000d38:	f000 f830 	bl	8000d9c <update_status>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

        xQueueSend(QueueHandle_battery_mntr, &DATA, 0);
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <handler_battery+0xb4>)
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	f107 0114 	add.w	r1, r7, #20
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f005 fdc3 	bl	80068d8 <xQueueGenericSend>

        /* wait until next task period */
        vTaskDelayUntil(&xLastWakeTime, TASK_PERIOD_BATTERY);
 8000d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d56:	2164      	movs	r1, #100	; 0x64
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f006 fb8b 	bl	8007474 <xTaskDelayUntil>
        DATA.BAT_SEQ.volt       = convert_adc_volt(adc_result[BATTERY_ADC_VBAT_SEQ]);
 8000d5e:	e7bf      	b.n	8000ce0 <handler_battery+0x30>
 8000d60:	2000563c 	.word	0x2000563c
 8000d64:	20005608 	.word	0x20005608

08000d68 <convert_adc_volt>:
 * 
 * @param       raw_adc 
 * @return      float 
 * ************************************************************* **/
static float convert_adc_volt(uint32_t raw_adc)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    return (BATTERY_MAX_VOLTAGE * ((float)raw_adc / BATTERY_ADC_RANGE));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d7a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000d98 <convert_adc_volt+0x30>
 8000d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d82:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8000d86:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	457fc000 	.word	0x457fc000

08000d9c <update_status>:
 * 
 * @param       volt 
 * @return      ENUM_BATTERY_STATUS_t 
 * ************************************************************* **/
static ENUM_BATTERY_STATUS_t update_status(TYPE_BATTERY_VOLTAGE_t volt)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	ed87 0a01 	vstr	s0, [r7, #4]
	ENUM_BATTERY_STATUS_t result;

	if(volt < BATTERY_THRESHOLD_VOLTAGE)
 8000da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000daa:	eeb1 7a0e 	vmov.f32	s14, #30	; 0x40f00000  7.5
 8000dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db6:	d502      	bpl.n	8000dbe <update_status+0x22>
    {
    	result = E_BATTERY_KO;
 8000db8:	2302      	movs	r3, #2
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e001      	b.n	8000dc2 <update_status+0x26>
    }
    else
    {
    	result = E_BATTERY_OK;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <API_BATTERY_START>:
/** ************************************************************* *
 * @brief       init and start the battery task
 * 
 * ************************************************************* **/
void API_BATTERY_START(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af02      	add	r7, sp, #8
    BaseType_t status;

    /* create the queue */
    QueueHandle_battery_mntr = xQueueCreate(1, sizeof(STRUCT_BATTERY_t));
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2118      	movs	r1, #24
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f005 fcf4 	bl	80067c8 <xQueueGenericCreate>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <API_BATTERY_START+0x50>)
 8000de4:	6013      	str	r3, [r2, #0]

    /* create the task */
    status = xTaskCreate(handler_battery, "task_battery", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_BATTERY, &TaskHandle_battery);
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <API_BATTERY_START+0x54>)
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	2302      	movs	r3, #2
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2300      	movs	r3, #0
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	490d      	ldr	r1, [pc, #52]	; (8000e28 <API_BATTERY_START+0x58>)
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <API_BATTERY_START+0x5c>)
 8000df6:	f006 f9d9 	bl	80071ac <xTaskCreate>
 8000dfa:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d00a      	beq.n	8000e18 <API_BATTERY_START+0x48>
        __asm volatile
 8000e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e06:	f383 8811 	msr	BASEPRI, r3
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	f3bf 8f4f 	dsb	sy
 8000e12:	603b      	str	r3, [r7, #0]
    }
 8000e14:	bf00      	nop
 8000e16:	e7fe      	b.n	8000e16 <API_BATTERY_START+0x46>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20005608 	.word	0x20005608
 8000e24:	2000560c 	.word	0x2000560c
 8000e28:	0800b85c 	.word	0x0800b85c
 8000e2c:	08000cb1 	.word	0x08000cb1

08000e30 <API_BATTERY_GET_MNTR>:
 *              -> if no new data
 * 
 * @param       dataStruct 
 * ************************************************************* **/
bool API_BATTERY_GET_MNTR(STRUCT_BATTERY_MNTR_t* monitoring)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
    return (xQueueReceive(QueueHandle_battery_mntr, monitoring, (TickType_t)0)) ? true : false;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <API_BATTERY_GET_MNTR+0x2c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f005 ff2d 	bl	8006ca0 <xQueueReceive>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bf14      	ite	ne
 8000e4c:	2301      	movne	r3, #1
 8000e4e:	2300      	moveq	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20005608 	.word	0x20005608

08000e60 <TF_ClearMsg>:
 * Clear message struct
 *
 * @param msg - message to clear in-place
 */
static inline void TF_ClearMsg(TF_Msg *msg)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    memset(msg, 0, sizeof(TF_Msg));
 8000e68:	2214      	movs	r2, #20
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f009 ffe7 	bl	800ae40 <memset>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <handler_hmi>:
 *              operate.
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_hmi(void* parameters)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	; 0x30
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    TF_Msg msg;

    while(1)
    {
        /* wait until receiving something */
        xQueueReceive(QueueHandle_hmi, &form, portMAX_DELAY);
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <handler_hmi+0x48>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f107 011c 	add.w	r1, r7, #28
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	4618      	mov	r0, r3
 8000e92:	f005 ff05 	bl	8006ca0 <xQueueReceive>

        TF_ClearMsg(&msg);
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffe0 	bl	8000e60 <TF_ClearMsg>
        
        msg.type = form.ID;
 8000ea0:	7f3b      	ldrb	r3, [r7, #28]
 8000ea2:	72bb      	strb	r3, [r7, #10]
        msg.data = form.buffer;
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
        msg.len = sizeof(form.buffer);
 8000eac:	2310      	movs	r3, #16
 8000eae:	823b      	strh	r3, [r7, #16]

        TF_Send(TinyFrame_TX, &msg);
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <handler_hmi+0x4c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f107 0208 	add.w	r2, r7, #8
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fbb6 	bl	800162c <TF_Send>
        xQueueReceive(QueueHandle_hmi, &form, portMAX_DELAY);
 8000ec0:	e7e0      	b.n	8000e84 <handler_hmi+0x8>
 8000ec2:	bf00      	nop
 8000ec4:	20005614 	.word	0x20005614
 8000ec8:	20005610 	.word	0x20005610

08000ecc <API_HMI_START>:
/** ************************************************************* *
 * @brief       init and start the HMI task
 * 
 * ************************************************************* **/
void API_HMI_START(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af02      	add	r7, sp, #8
    BaseType_t status;

    TinyFrame_TX = TF_Init(TF_MASTER); // 1 = master, 0 = slave
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f000 f8f0 	bl	80010b8 <TF_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <API_HMI_START+0x5c>)
 8000edc:	6013      	str	r3, [r2, #0]

    /* create the queue */
    QueueHandle_hmi = xQueueCreate(HMI_DEFAULT_QUEUE_SIZE, sizeof(STRUCT_HMI_FORM_t));
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2111      	movs	r1, #17
 8000ee2:	2020      	movs	r0, #32
 8000ee4:	f005 fc70 	bl	80067c8 <xQueueGenericCreate>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <API_HMI_START+0x60>)
 8000eec:	6013      	str	r3, [r2, #0]

    /* create the task */
    status = xTaskCreate(handler_hmi, "task_hmi", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_HMI, &TaskHandle_hmi);
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <API_HMI_START+0x64>)
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	490e      	ldr	r1, [pc, #56]	; (8000f34 <API_HMI_START+0x68>)
 8000efc:	480e      	ldr	r0, [pc, #56]	; (8000f38 <API_HMI_START+0x6c>)
 8000efe:	f006 f955 	bl	80071ac <xTaskCreate>
 8000f02:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d00a      	beq.n	8000f20 <API_HMI_START+0x54>
        __asm volatile
 8000f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f0e:	f383 8811 	msr	BASEPRI, r3
 8000f12:	f3bf 8f6f 	isb	sy
 8000f16:	f3bf 8f4f 	dsb	sy
 8000f1a:	603b      	str	r3, [r7, #0]
    }
 8000f1c:	bf00      	nop
 8000f1e:	e7fe      	b.n	8000f1e <API_HMI_START+0x52>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20005610 	.word	0x20005610
 8000f2c:	20005614 	.word	0x20005614
 8000f30:	20005618 	.word	0x20005618
 8000f34:	0800b86c 	.word	0x0800b86c
 8000f38:	08000e7d 	.word	0x08000e7d

08000f3c <API_HMI_SEND_DATA>:
 * @param       dataID 
 * @param       fmt
 * @param       ... 
 * ************************************************************* **/
void API_HMI_SEND_DATA(TYPE_HMI_ID_t  dataID, const char *fmt, ...)
{
 8000f3c:	b40e      	push	{r1, r2, r3}
 8000f3e:	b590      	push	{r4, r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
    va_list args;
    va_start(args, fmt);
 8000f48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f4c:	61fb      	str	r3, [r7, #28]

    STRUCT_HMI_FORM_t form;
    form.ID = dataID;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	723b      	strb	r3, [r7, #8]
    memcpy(form.buffer, fmt, HMI_DEFAULT_BUFFER_SIZE);
 8000f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f54:	f107 0309 	add.w	r3, r7, #9
 8000f58:	6814      	ldr	r4, [r2, #0]
 8000f5a:	6850      	ldr	r0, [r2, #4]
 8000f5c:	6891      	ldr	r1, [r2, #8]
 8000f5e:	68d2      	ldr	r2, [r2, #12]
 8000f60:	601c      	str	r4, [r3, #0]
 8000f62:	6058      	str	r0, [r3, #4]
 8000f64:	6099      	str	r1, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]

    va_end(args);

    /* send to task */
    xQueueSend(QueueHandle_hmi, &form, 0);
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <API_HMI_SEND_DATA+0x4c>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	f107 0108 	add.w	r1, r7, #8
 8000f70:	2300      	movs	r3, #0
 8000f72:	2200      	movs	r2, #0
 8000f74:	f005 fcb0 	bl	80068d8 <xQueueGenericSend>
}
 8000f78:	bf00      	nop
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f82:	b003      	add	sp, #12
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20005614 	.word	0x20005614

08000f8c <TF_WriteImpl>:
/**
 * This function should be defined in the application code.
 * It implements the lowest layer - sending bytes to UART (or other)
 */
void TF_WriteImpl(TinyFrame *tf, const uint8_t *buff, uint32_t len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
    /* send data on UART */
    HAL_UART_Transmit(HMI_UART_HANDLE, (uint8_t*)buff, len, HMI_DEFAULT_UART_TIMEOUT);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <TF_WriteImpl+0x24>)
 8000fa2:	f005 f82c 	bl	8005ffe <HAL_UART_Transmit>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20005858 	.word	0x20005858

08000fb4 <TF_ClaimTx>:
    // Not thread safe lock implementation, used if user did not provide a better one.
    // This is less reliable than a real mutex, but will catch most bugs caused by
    // inappropriate use fo the API.

    /** Claim the TX interface before composing and sending a frame */
    static bool TF_ClaimTx(TinyFrame *tf) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
        if (tf->soft_lock) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 34a6 	ldrb.w	r3, [r3, #1190]	; 0x4a6
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <TF_ClaimTx+0x1c>
            TF_Error("TF already locked for tx!");
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <TF_ClaimTx+0x30>)
 8000fc8:	f00a f85a 	bl	800b080 <puts>
            return false;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e004      	b.n	8000fda <TF_ClaimTx+0x26>
        }

        tf->soft_lock = true;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
        return true;
 8000fd8:	2301      	movs	r3, #1
    }
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	0800b878 	.word	0x0800b878

08000fe8 <TF_ReleaseTx>:

    /** Free the TX interface after composing and sending a frame */
    static void TF_ReleaseTx(TinyFrame *tf)
    {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
        tf->soft_lock = false;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
    }
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <TF_CksumStart>:
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
    };

    static TF_CKSUM TF_CksumStart(void)
      { return 0; }
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
 8001008:	2300      	movs	r3, #0
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <TF_CksumAdd>:

    static TF_CKSUM TF_CksumAdd(TF_CKSUM cksum, uint8_t byte)
      { return (cksum >> 8) ^ crc16_table[(cksum ^ byte) & 0xff]; }
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	460a      	mov	r2, r1
 800101e:	80fb      	strh	r3, [r7, #6]
 8001020:	4613      	mov	r3, r2
 8001022:	717b      	strb	r3, [r7, #5]
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	b29a      	uxth	r2, r3
 800102a:	88f9      	ldrh	r1, [r7, #6]
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	404b      	eors	r3, r1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4905      	ldr	r1, [pc, #20]	; (8001048 <TF_CksumAdd+0x34>)
 8001034:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001038:	4053      	eors	r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	0800bbb4 	.word	0x0800bbb4

0800104c <TF_CksumEnd>:

    static TF_CKSUM TF_CksumEnd(TF_CKSUM cksum)
      { return cksum; }
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <TF_InitStatic>:

//region Init

/** Init with a user-allocated buffer */
bool _TF_FN TF_InitStatic(TinyFrame *tf, TF_Peer peer_bit)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
    if (tf == NULL) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d104      	bne.n	8001080 <TF_InitStatic+0x1c>
        TF_Error("TF_InitStatic() failed, tf is null.");
 8001076:	480f      	ldr	r0, [pc, #60]	; (80010b4 <TF_InitStatic+0x50>)
 8001078:	f00a f802 	bl	800b080 <puts>
        return false;
 800107c:	2300      	movs	r3, #0
 800107e:	e015      	b.n	80010ac <TF_InitStatic+0x48>
    }

    // Zero it out, keeping user config
    uint32_t usertag = tf->usertag;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	60fb      	str	r3, [r7, #12]
    void * userdata = tf->userdata;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	60bb      	str	r3, [r7, #8]

    memset(tf, 0, sizeof(struct TinyFrame_));
 800108c:	f44f 62d6 	mov.w	r2, #1712	; 0x6b0
 8001090:	2100      	movs	r1, #0
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f009 fed4 	bl	800ae40 <memset>

    tf->usertag = usertag;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	605a      	str	r2, [r3, #4]
    tf->userdata = userdata;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	601a      	str	r2, [r3, #0]

    tf->peer_bit = peer_bit;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	721a      	strb	r2, [r3, #8]
    return true;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	0800b898 	.word	0x0800b898

080010b8 <TF_Init>:

/** Init with malloc */
TinyFrame * _TF_FN TF_Init(TF_Peer peer_bit)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
    TinyFrame *tf = malloc(sizeof(TinyFrame));
 80010c2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80010c6:	f009 fe97 	bl	800adf8 <malloc>
 80010ca:	4603      	mov	r3, r0
 80010cc:	60fb      	str	r3, [r7, #12]
    if (!tf) {
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d104      	bne.n	80010de <TF_Init+0x26>
        TF_Error("TF_Init() failed, out of memory.");
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <TF_Init+0x3c>)
 80010d6:	f009 ffd3 	bl	800b080 <puts>
        return NULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	e005      	b.n	80010ea <TF_Init+0x32>
    }

    TF_InitStatic(tf, peer_bit);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4619      	mov	r1, r3
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff ffbe 	bl	8001064 <TF_InitStatic>
    return tf;
 80010e8:	68fb      	ldr	r3, [r7, #12]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0800b8c4 	.word	0x0800b8c4

080010f8 <TF_AddIdListener>:
    }
}

/** Add a new ID listener. Returns 1 on success. */
bool _TF_FN TF_AddIdListener(TinyFrame *tf, TF_Msg *msg, TF_Listener cb, TF_Listener_Timeout ftimeout, TF_TICKS timeout)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
    TF_COUNT i;
    struct TF_IdListener_ *lst;
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]
 800110a:	e037      	b.n	800117c <TF_AddIdListener+0x84>
        lst = &tf->id_listeners[i];
 800110c:	7dfa      	ldrb	r2, [r7, #23]
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	f503 6395 	add.w	r3, r3, #1192	; 0x4a8
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        // test for empty slot
        if (lst->fn == NULL) {
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d126      	bne.n	8001176 <TF_AddIdListener+0x7e>
            lst->fn = cb;
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	605a      	str	r2, [r3, #4]
            lst->fn_timeout = ftimeout;
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	609a      	str	r2, [r3, #8]
            lst->id = msg->frame_id;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	701a      	strb	r2, [r3, #0]
            lst->userdata = msg->userdata;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	611a      	str	r2, [r3, #16]
            lst->userdata2 = msg->userdata2;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	615a      	str	r2, [r3, #20]
            lst->timeout_max = lst->timeout = timeout;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	8c3a      	ldrh	r2, [r7, #32]
 8001150:	819a      	strh	r2, [r3, #12]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	899a      	ldrh	r2, [r3, #12]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	81da      	strh	r2, [r3, #14]
            if (i >= tf->count_id_lst) {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f893 36ac 	ldrb.w	r3, [r3, #1708]	; 0x6ac
 8001160:	7dfa      	ldrb	r2, [r7, #23]
 8001162:	429a      	cmp	r2, r3
 8001164:	d305      	bcc.n	8001172 <TF_AddIdListener+0x7a>
                tf->count_id_lst = (TF_COUNT) (i + 1);
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	3301      	adds	r3, #1
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
            }
            return true;
 8001172:	2301      	movs	r3, #1
 8001174:	e009      	b.n	800118a <TF_AddIdListener+0x92>
    for (i = 0; i < TF_MAX_ID_LST; i++) {
 8001176:	7dfb      	ldrb	r3, [r7, #23]
 8001178:	3301      	adds	r3, #1
 800117a:	75fb      	strb	r3, [r7, #23]
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	2b09      	cmp	r3, #9
 8001180:	d9c4      	bls.n	800110c <TF_AddIdListener+0x14>
        }
    }

    TF_Error("Failed to add ID listener");
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <TF_AddIdListener+0x9c>)
 8001184:	f009 ff7c 	bl	800b080 <puts>
    return false;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	0800b8ec 	.word	0x0800b8ec

08001198 <TF_ComposeHead>:
 * @param outbuff - buffer to store the result in
 * @param msg - message written to the buffer
 * @return nr of bytes in outbuff used by the frame, 0 on failure
 */
static inline uint32_t _TF_FN TF_ComposeHead(TinyFrame *tf, uint8_t *outbuff, TF_Msg *msg)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
    int8_t si = 0; // signed small int
 80011a4:	2300      	movs	r3, #0
 80011a6:	77fb      	strb	r3, [r7, #31]
    uint8_t b = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	75fb      	strb	r3, [r7, #23]
    TF_ID id = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	77bb      	strb	r3, [r7, #30]
    TF_CKSUM cksum = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	83bb      	strh	r3, [r7, #28]
    uint32_t pos = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]

    (void)cksum; // suppress "unused" warning if checksums are disabled

    CKSUM_RESET(cksum);
 80011b8:	f7ff ff24 	bl	8001004 <TF_CksumStart>
 80011bc:	4603      	mov	r3, r0
 80011be:	83bb      	strh	r3, [r7, #28]

    // Gen ID
    if (msg->is_response) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <TF_ComposeHead+0x38>
        id = msg->frame_id;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	77bb      	strb	r3, [r7, #30]
 80011ce:	e010      	b.n	80011f2 <TF_ComposeHead+0x5a>
    }
    else {
        id = (TF_ID) (tf->next_id++ & TF_ID_MASK);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	7a5b      	ldrb	r3, [r3, #9]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	b2d1      	uxtb	r1, r2
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	7251      	strb	r1, [r2, #9]
 80011dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011e0:	77bb      	strb	r3, [r7, #30]
        if (tf->peer_bit) {
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	7a1b      	ldrb	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <TF_ComposeHead+0x5a>
            id |= TF_ID_PEERBIT;
 80011ea:	7fbb      	ldrb	r3, [r7, #30]
 80011ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011f0:	77bb      	strb	r3, [r7, #30]
        }
    }

    msg->frame_id = id; // put the resolved ID into the message object for later use
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7fba      	ldrb	r2, [r7, #30]
 80011f6:	701a      	strb	r2, [r3, #0]

    // --- Start ---
    CKSUM_RESET(cksum);
 80011f8:	f7ff ff04 	bl	8001004 <TF_CksumStart>
 80011fc:	4603      	mov	r3, r0
 80011fe:	83bb      	strh	r3, [r7, #28]

#if TF_USE_SOF_BYTE
    outbuff[pos++] = TF_SOF_BYTE;
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	61ba      	str	r2, [r7, #24]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	4413      	add	r3, r2
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
    CKSUM_ADD(cksum, TF_SOF_BYTE);
 800120e:	8bbb      	ldrh	r3, [r7, #28]
 8001210:	2101      	movs	r1, #1
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fefe 	bl	8001014 <TF_CksumAdd>
 8001218:	4603      	mov	r3, r0
 800121a:	83bb      	strh	r3, [r7, #28]
#endif

    WRITENUM_CKSUM(TF_ID, id);
 800121c:	2300      	movs	r3, #0
 800121e:	77fb      	strb	r3, [r7, #31]
 8001220:	e01b      	b.n	800125a <TF_ComposeHead+0xc2>
 8001222:	7fba      	ldrb	r2, [r7, #30]
 8001224:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	fa42 f303 	asr.w	r3, r2, r3
 800122e:	75fb      	strb	r3, [r7, #23]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	61ba      	str	r2, [r7, #24]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	4413      	add	r3, r2
 800123a:	7dfa      	ldrb	r2, [r7, #23]
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	7dfa      	ldrb	r2, [r7, #23]
 8001240:	8bbb      	ldrh	r3, [r7, #28]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fee5 	bl	8001014 <TF_CksumAdd>
 800124a:	4603      	mov	r3, r0
 800124c:	83bb      	strh	r3, [r7, #28]
 800124e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	3b01      	subs	r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	77fb      	strb	r3, [r7, #31]
 800125a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800125e:	2b00      	cmp	r3, #0
 8001260:	dadf      	bge.n	8001222 <TF_ComposeHead+0x8a>
    WRITENUM_CKSUM(TF_LEN, msg->len);
 8001262:	2301      	movs	r3, #1
 8001264:	77fb      	strb	r3, [r7, #31]
 8001266:	e01d      	b.n	80012a4 <TF_ComposeHead+0x10c>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	891b      	ldrh	r3, [r3, #8]
 800126c:	461a      	mov	r2, r3
 800126e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	fa42 f303 	asr.w	r3, r2, r3
 8001278:	75fb      	strb	r3, [r7, #23]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	61ba      	str	r2, [r7, #24]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	4413      	add	r3, r2
 8001284:	7dfa      	ldrb	r2, [r7, #23]
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	7dfa      	ldrb	r2, [r7, #23]
 800128a:	8bbb      	ldrh	r3, [r7, #28]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fec0 	bl	8001014 <TF_CksumAdd>
 8001294:	4603      	mov	r3, r0
 8001296:	83bb      	strh	r3, [r7, #28]
 8001298:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3b01      	subs	r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	77fb      	strb	r3, [r7, #31]
 80012a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	dadd      	bge.n	8001268 <TF_ComposeHead+0xd0>
    WRITENUM_CKSUM(TF_TYPE, msg->type);
 80012ac:	2300      	movs	r3, #0
 80012ae:	77fb      	strb	r3, [r7, #31]
 80012b0:	e01d      	b.n	80012ee <TF_ComposeHead+0x156>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	789b      	ldrb	r3, [r3, #2]
 80012b6:	461a      	mov	r2, r3
 80012b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	fa42 f303 	asr.w	r3, r2, r3
 80012c2:	75fb      	strb	r3, [r7, #23]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	61ba      	str	r2, [r7, #24]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	4413      	add	r3, r2
 80012ce:	7dfa      	ldrb	r2, [r7, #23]
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	7dfa      	ldrb	r2, [r7, #23]
 80012d4:	8bbb      	ldrh	r3, [r7, #28]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe9b 	bl	8001014 <TF_CksumAdd>
 80012de:	4603      	mov	r3, r0
 80012e0:	83bb      	strh	r3, [r7, #28]
 80012e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	3b01      	subs	r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	77fb      	strb	r3, [r7, #31]
 80012ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dadd      	bge.n	80012b2 <TF_ComposeHead+0x11a>

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(cksum);
 80012f6:	8bbb      	ldrh	r3, [r7, #28]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fea7 	bl	800104c <TF_CksumEnd>
 80012fe:	4603      	mov	r3, r0
 8001300:	83bb      	strh	r3, [r7, #28]
    WRITENUM(TF_CKSUM, cksum);
 8001302:	2301      	movs	r3, #1
 8001304:	77fb      	strb	r3, [r7, #31]
 8001306:	e013      	b.n	8001330 <TF_ComposeHead+0x198>
 8001308:	8bba      	ldrh	r2, [r7, #28]
 800130a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	fa42 f303 	asr.w	r3, r2, r3
 8001314:	75fb      	strb	r3, [r7, #23]
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	61ba      	str	r2, [r7, #24]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	4413      	add	r3, r2
 8001320:	7dfa      	ldrb	r2, [r7, #23]
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	3b01      	subs	r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	77fb      	strb	r3, [r7, #31]
 8001330:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001334:	2b00      	cmp	r3, #0
 8001336:	dae7      	bge.n	8001308 <TF_ComposeHead+0x170>
#endif

    return pos;
 8001338:	69bb      	ldr	r3, [r7, #24]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <TF_ComposeBody>:
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeBody(uint8_t *outbuff,
                                    const uint8_t *data, TF_LEN data_len,
                                    TF_CKSUM *cksum)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b088      	sub	sp, #32
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4613      	mov	r3, r2
 8001350:	80fb      	strh	r3, [r7, #6]
    TF_LEN i = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	83fb      	strh	r3, [r7, #30]
    uint8_t b = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
    uint32_t pos = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < data_len; i++) {
 800135e:	2300      	movs	r3, #0
 8001360:	83fb      	strh	r3, [r7, #30]
 8001362:	e019      	b.n	8001398 <TF_ComposeBody+0x56>
        b = data[i];
 8001364:	8bfb      	ldrh	r3, [r7, #30]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	4413      	add	r3, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	75fb      	strb	r3, [r7, #23]
        outbuff[pos++] = b;
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	61ba      	str	r2, [r7, #24]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	7dfa      	ldrb	r2, [r7, #23]
 800137a:	701a      	strb	r2, [r3, #0]
        CKSUM_ADD(*cksum, b);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	7dfa      	ldrb	r2, [r7, #23]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe45 	bl	8001014 <TF_CksumAdd>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < data_len; i++) {
 8001392:	8bfb      	ldrh	r3, [r7, #30]
 8001394:	3301      	adds	r3, #1
 8001396:	83fb      	strh	r3, [r7, #30]
 8001398:	8bfa      	ldrh	r2, [r7, #30]
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	429a      	cmp	r2, r3
 800139e:	d3e1      	bcc.n	8001364 <TF_ComposeBody+0x22>
    }

    return pos;
 80013a0:	69bb      	ldr	r3, [r7, #24]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <TF_ComposeTail>:
 * @param outbuff - buffer to store the result in
 * @param cksum - checksum variable used for the body
 * @return nr of bytes in outbuff used
 */
static inline uint32_t _TF_FN TF_ComposeTail(uint8_t *outbuff, TF_CKSUM *cksum)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
    int8_t si = 0; // signed small int
 80013b4:	2300      	movs	r3, #0
 80013b6:	75fb      	strb	r3, [r7, #23]
    uint8_t b = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]
    uint32_t pos = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]

#if TF_CKSUM_TYPE != TF_CKSUM_NONE
    CKSUM_FINALIZE(*cksum);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fe41 	bl	800104c <TF_CksumEnd>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	801a      	strh	r2, [r3, #0]
    WRITENUM(TF_CKSUM, *cksum);
 80013d2:	2301      	movs	r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]
 80013d6:	e015      	b.n	8001404 <TF_ComposeTail+0x5a>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	fa42 f303 	asr.w	r3, r2, r3
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	613a      	str	r2, [r7, #16]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3b01      	subs	r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	75fb      	strb	r3, [r7, #23]
 8001404:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001408:	2b00      	cmp	r3, #0
 800140a:	dae5      	bge.n	80013d8 <TF_ComposeTail+0x2e>
#endif
    return pos;
 800140c:	693b      	ldr	r3, [r7, #16]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <TF_SendFrame_Begin>:
 * @param ftimeout - time out callback
 * @param timeout - listener timeout ticks, 0 = indefinite
 * @return success (mutex claimed and listener added, if any)
 */
static bool _TF_FN TF_SendFrame_Begin(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_Listener_Timeout ftimeout, TF_TICKS timeout)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af02      	add	r7, sp, #8
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	603b      	str	r3, [r7, #0]
    TF_TRY(TF_ClaimTx(tf));
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7ff fdc5 	bl	8000fb4 <TF_ClaimTx>
 800142a:	4603      	mov	r3, r0
 800142c:	f083 0301 	eor.w	r3, r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <TF_SendFrame_Begin+0x24>
 8001436:	2300      	movs	r3, #0
 8001438:	e02f      	b.n	800149a <TF_SendFrame_Begin+0x84>

    tf->tx_pos = (uint32_t) TF_ComposeHead(tf, tf->sendbuf, msg); // frame ID is incremented here if it's not a response
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f203 431a 	addw	r3, r3, #1050	; 0x41a
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4619      	mov	r1, r3
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f7ff fea7 	bl	8001198 <TF_ComposeHead>
 800144a:	4602      	mov	r2, r0
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    tf->tx_len = msg->len;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	891b      	ldrh	r3, [r3, #8]
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

    if (listener) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d012      	beq.n	800148a <TF_SendFrame_Begin+0x74>
        if(!TF_AddIdListener(tf, msg, listener, ftimeout, timeout)) {
 8001464:	8b3b      	ldrh	r3, [r7, #24]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f7ff fe42 	bl	80010f8 <TF_AddIdListener>
 8001474:	4603      	mov	r3, r0
 8001476:	f083 0301 	eor.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <TF_SendFrame_Begin+0x74>
            TF_ReleaseTx(tf);
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f7ff fdb1 	bl	8000fe8 <TF_ReleaseTx>
            return false;
 8001486:	2300      	movs	r3, #0
 8001488:	e007      	b.n	800149a <TF_SendFrame_Begin+0x84>
        }
    }

    CKSUM_RESET(tf->tx_cksum);
 800148a:	f7ff fdbb 	bl	8001004 <TF_CksumStart>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
    return true;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <TF_SendFrame_Chunk>:
 * @param tf - instance
 * @param buff - bytes to write
 * @param length - count
 */
static void _TF_FN TF_SendFrame_Chunk(TinyFrame *tf, const uint8_t *buff, uint32_t length)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b088      	sub	sp, #32
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
    uint32_t remain;
    uint32_t chunk;
    uint32_t sent = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]

    remain = length;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	61fb      	str	r3, [r7, #28]
    while (remain > 0) {
 80014b6:	e03d      	b.n	8001534 <TF_SendFrame_Chunk+0x92>
        // Write what can fit in the tx buffer
        chunk = TF_MIN(TF_SENDBUF_LEN - tf->tx_pos, remain);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 80014be:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bf28      	it	cs
 80014c8:	4613      	movcs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
        tf->tx_pos += TF_ComposeBody(tf->sendbuf+tf->tx_pos, buff+sent, (TF_LEN) chunk, &tf->tx_cksum);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f203 421a 	addw	r2, r3, #1050	; 0x41a
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 80014d8:	18d0      	adds	r0, r2, r3
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	18d1      	adds	r1, r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80014ea:	f7ff ff2a 	bl	8001342 <TF_ComposeBody>
 80014ee:	4602      	mov	r2, r0
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 80014f6:	441a      	add	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
        remain -= chunk;
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	61fb      	str	r3, [r7, #28]
        sent += chunk;
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	4413      	add	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]

        // Flush if the buffer is full
        if (tf->tx_pos == TF_SENDBUF_LEN) {
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8001514:	2b80      	cmp	r3, #128	; 0x80
 8001516:	d10d      	bne.n	8001534 <TF_SendFrame_Chunk+0x92>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f203 411a 	addw	r1, r3, #1050	; 0x41a
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8001524:	461a      	mov	r2, r3
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff fd30 	bl	8000f8c <TF_WriteImpl>
            tf->tx_pos = 0;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    while (remain > 0) {
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1be      	bne.n	80014b8 <TF_SendFrame_Chunk+0x16>
        }
    }
}
 800153a:	bf00      	nop
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <TF_SendFrame_End>:
 * End a multi-part frame. This sends the checksum and releases mutex.
 *
 * @param tf - instance
 */
static void _TF_FN TF_SendFrame_End(TinyFrame *tf)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    // Checksum only if message had a body
    if (tf->tx_len > 0) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d02a      	beq.n	80015ac <TF_SendFrame_End+0x68>
        // Flush if checksum wouldn't fit in the buffer
        if (TF_SENDBUF_LEN - tf->tx_pos < sizeof(TF_CKSUM)) {
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 800155c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001560:	2b01      	cmp	r3, #1
 8001562:	d80d      	bhi.n	8001580 <TF_SendFrame_End+0x3c>
            TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f203 411a 	addw	r1, r3, #1050	; 0x41a
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8001570:	461a      	mov	r2, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fd0a 	bl	8000f8c <TF_WriteImpl>
            tf->tx_pos = 0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
        }

        // Add checksum, flush what remains to be sent
        tf->tx_pos += TF_ComposeTail(tf->sendbuf + tf->tx_pos, &tf->tx_cksum);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f203 421a 	addw	r2, r3, #1050	; 0x41a
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 800158c:	441a      	add	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f7ff ff07 	bl	80013aa <TF_ComposeTail>
 800159c:	4602      	mov	r2, r0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 80015a4:	441a      	add	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    }

    TF_WriteImpl(tf, (const uint8_t *) tf->sendbuf, tf->tx_pos);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f203 411a 	addw	r1, r3, #1050	; 0x41a
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 80015b8:	461a      	mov	r2, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fce6 	bl	8000f8c <TF_WriteImpl>
    TF_ReleaseTx(tf);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fd11 	bl	8000fe8 <TF_ReleaseTx>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <TF_SendFrame>:
 * @param ftimeout - time out callback
 * @param timeout - listener timeout, 0 is none
 * @return true if sent
 */
static bool _TF_FN TF_SendFrame(TinyFrame *tf, TF_Msg *msg, TF_Listener listener, TF_Listener_Timeout ftimeout, TF_TICKS timeout)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af02      	add	r7, sp, #8
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	603b      	str	r3, [r7, #0]
    TF_TRY(TF_SendFrame_Begin(tf, msg, listener, ftimeout, timeout));
 80015dc:	8b3b      	ldrh	r3, [r7, #24]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f7ff ff15 	bl	8001416 <TF_SendFrame_Begin>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f083 0301 	eor.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <TF_SendFrame+0x2e>
 80015f8:	2300      	movs	r3, #0
 80015fa:	e013      	b.n	8001624 <TF_SendFrame+0x56>
    if (msg->len == 0 || msg->data != NULL) {
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	891b      	ldrh	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <TF_SendFrame+0x3e>
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00a      	beq.n	8001622 <TF_SendFrame+0x54>
        // Send the payload and checksum only if we're not starting a multi-part frame.
        // A multi-part frame is identified by passing NULL to the data field and setting the length.
        // User then needs to call those functions manually
        TF_SendFrame_Chunk(tf, msg->data, msg->len);
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	891b      	ldrh	r3, [r3, #8]
 8001614:	461a      	mov	r2, r3
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff ff43 	bl	80014a2 <TF_SendFrame_Chunk>
        TF_SendFrame_End(tf);
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff ff91 	bl	8001544 <TF_SendFrame_End>
    }
    return true;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <TF_Send>:

//region Sending API funcs

/** send without listener */
bool _TF_FN TF_Send(TinyFrame *tf, TF_Msg *msg)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af02      	add	r7, sp, #8
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
    return TF_SendFrame(tf, msg, NULL, NULL, 0);
 8001636:	2300      	movs	r3, #0
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	2200      	movs	r2, #0
 800163e:	6839      	ldr	r1, [r7, #0]
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffc4 	bl	80015ce <TF_SendFrame>
 8001646:	4603      	mov	r3, r0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <handler_leds>:
 *              commands
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_leds(void* parameters)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    STRUCT_LEDS_t led;

    while(1)
    {
        /* check for new command */
        if(xQueueReceive(QueueHandle_leds_cmd, &led, portMAX_DELAY)) 
 8001658:	4b5f      	ldr	r3, [pc, #380]	; (80017d8 <handler_leds+0x188>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f107 010c 	add.w	r1, r7, #12
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	4618      	mov	r0, r3
 8001666:	f005 fb1b 	bl	8006ca0 <xQueueReceive>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80ae 	beq.w	80017ce <handler_leds+0x17e>
        {
            switch (led.list)
 8001672:	7b7b      	ldrb	r3, [r7, #13]
 8001674:	2b03      	cmp	r3, #3
 8001676:	f200 80ac 	bhi.w	80017d2 <handler_leds+0x182>
 800167a:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <handler_leds+0x30>)
 800167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001680:	08001691 	.word	0x08001691
 8001684:	08001749 	.word	0x08001749
 8001688:	08001775 	.word	0x08001775
 800168c:	080017a1 	.word	0x080017a1
            {
                /* LED RGB */
                case E_LIST_LED_RGB :
                    switch (led.cmd)
 8001690:	7b3b      	ldrb	r3, [r7, #12]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d856      	bhi.n	8001744 <handler_leds+0xf4>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <handler_leds+0x4c>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016d3 	.word	0x080016d3
 80016a4:	080016f9 	.word	0x080016f9
 80016a8:	0800171f 	.word	0x0800171f
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b2:	484a      	ldr	r0, [pc, #296]	; (80017dc <handler_leds+0x18c>)
 80016b4:	f002 ff08 	bl	80044c8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016be:	4847      	ldr	r0, [pc, #284]	; (80017dc <handler_leds+0x18c>)
 80016c0:	f002 ff02 	bl	80044c8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ca:	4845      	ldr	r0, [pc, #276]	; (80017e0 <handler_leds+0x190>)
 80016cc:	f002 fefc 	bl	80044c8 <HAL_GPIO_WritePin>
                            break;
 80016d0:	e039      	b.n	8001746 <handler_leds+0xf6>

                        case E_CMD_LEDS_RED:    
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016d8:	4840      	ldr	r0, [pc, #256]	; (80017dc <handler_leds+0x18c>)
 80016da:	f002 fef5 	bl	80044c8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e4:	483e      	ldr	r0, [pc, #248]	; (80017e0 <handler_leds+0x190>)
 80016e6:	f002 feef 	bl	80044c8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016f0:	483a      	ldr	r0, [pc, #232]	; (80017dc <handler_leds+0x18c>)
 80016f2:	f002 fee9 	bl	80044c8 <HAL_GPIO_WritePin>
                            break;
 80016f6:	e026      	b.n	8001746 <handler_leds+0xf6>

                        case E_CMD_LEDS_GREEN: 
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016fe:	4837      	ldr	r0, [pc, #220]	; (80017dc <handler_leds+0x18c>)
 8001700:	f002 fee2 	bl	80044c8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800170a:	4835      	ldr	r0, [pc, #212]	; (80017e0 <handler_leds+0x190>)
 800170c:	f002 fedc 	bl	80044c8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_SET);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001716:	4831      	ldr	r0, [pc, #196]	; (80017dc <handler_leds+0x18c>)
 8001718:	f002 fed6 	bl	80044c8 <HAL_GPIO_WritePin>
                            break;
 800171c:	e013      	b.n	8001746 <handler_leds+0xf6>

                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001724:	482d      	ldr	r0, [pc, #180]	; (80017dc <handler_leds+0x18c>)
 8001726:	f002 fecf 	bl	80044c8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001730:	482a      	ldr	r0, [pc, #168]	; (80017dc <handler_leds+0x18c>)
 8001732:	f002 fec9 	bl	80044c8 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173c:	4828      	ldr	r0, [pc, #160]	; (80017e0 <handler_leds+0x190>)
 800173e:	f002 fec3 	bl	80044c8 <HAL_GPIO_WritePin>
                            break;
 8001742:	e000      	b.n	8001746 <handler_leds+0xf6>

                        default:
                            break;
 8001744:	bf00      	nop
                    }
                    break;
 8001746:	e045      	b.n	80017d4 <handler_leds+0x184>

                /* LED VBAT SEQ */
                case E_LIST_LED_VBAT_SEQ :
                    switch (led.cmd)
 8001748:	7b3b      	ldrb	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <handler_leds+0x10a>
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0f      	blt.n	8001772 <handler_leds+0x122>
 8001752:	3b01      	subs	r3, #1
 8001754:	2b02      	cmp	r3, #2
 8001756:	d80c      	bhi.n	8001772 <handler_leds+0x122>
 8001758:	e005      	b.n	8001766 <handler_leds+0x116>
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(LED_VBAT_SEQ_GPIO_Port, LED_VBAT_SEQ_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2102      	movs	r1, #2
 800175e:	481f      	ldr	r0, [pc, #124]	; (80017dc <handler_leds+0x18c>)
 8001760:	f002 feb2 	bl	80044c8 <HAL_GPIO_WritePin>
                            break;
 8001764:	e006      	b.n	8001774 <handler_leds+0x124>

                        case E_CMD_LEDS_RED:    
                        case E_CMD_LEDS_GREEN: 
                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(LED_VBAT_SEQ_GPIO_Port, LED_VBAT_SEQ_Pin, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	2102      	movs	r1, #2
 800176a:	481c      	ldr	r0, [pc, #112]	; (80017dc <handler_leds+0x18c>)
 800176c:	f002 feac 	bl	80044c8 <HAL_GPIO_WritePin>
                            break;
 8001770:	e000      	b.n	8001774 <handler_leds+0x124>

                        default:
                            break;
 8001772:	bf00      	nop
                    }

                /* LED VBAT RECOV */
                case E_LIST_LED_VBAT_RECOV :
                    switch (led.cmd)
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <handler_leds+0x136>
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0f      	blt.n	800179e <handler_leds+0x14e>
 800177e:	3b01      	subs	r3, #1
 8001780:	2b02      	cmp	r3, #2
 8001782:	d80c      	bhi.n	800179e <handler_leds+0x14e>
 8001784:	e005      	b.n	8001792 <handler_leds+0x142>
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(LED_VBAT_RECOV_GPIO_Port, LED_VBAT_RECOV_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2104      	movs	r1, #4
 800178a:	4814      	ldr	r0, [pc, #80]	; (80017dc <handler_leds+0x18c>)
 800178c:	f002 fe9c 	bl	80044c8 <HAL_GPIO_WritePin>
                            break;
 8001790:	e006      	b.n	80017a0 <handler_leds+0x150>

                        case E_CMD_LEDS_RED:    
                        case E_CMD_LEDS_GREEN: 
                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(LED_VBAT_RECOV_GPIO_Port, LED_VBAT_RECOV_Pin, GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	2104      	movs	r1, #4
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <handler_leds+0x18c>)
 8001798:	f002 fe96 	bl	80044c8 <HAL_GPIO_WritePin>
                            break;
 800179c:	e000      	b.n	80017a0 <handler_leds+0x150>

                        default:
                            break;
 800179e:	bf00      	nop
                    }

                /* LED VBAT PAYLOAD */
                case E_LIST_LED_VBAT_PAYLOAD :
                    switch (led.cmd)
 80017a0:	7b3b      	ldrb	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <handler_leds+0x162>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0f      	blt.n	80017ca <handler_leds+0x17a>
 80017aa:	3b01      	subs	r3, #1
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d80c      	bhi.n	80017ca <handler_leds+0x17a>
 80017b0:	e005      	b.n	80017be <handler_leds+0x16e>
                    {
                        case E_CMD_LEDS_NONE:   
                            HAL_GPIO_WritePin(LED_VBAT_PAYLOAD_GPIO_Port, LED_VBAT_PAYLOAD_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2108      	movs	r1, #8
 80017b6:	4809      	ldr	r0, [pc, #36]	; (80017dc <handler_leds+0x18c>)
 80017b8:	f002 fe86 	bl	80044c8 <HAL_GPIO_WritePin>
                            break;
 80017bc:	e006      	b.n	80017cc <handler_leds+0x17c>

                        case E_CMD_LEDS_RED:    
                        case E_CMD_LEDS_GREEN: 
                        case E_CMD_LEDS_BLUE:  
                            HAL_GPIO_WritePin(LED_VBAT_PAYLOAD_GPIO_Port, LED_VBAT_PAYLOAD_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2108      	movs	r1, #8
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <handler_leds+0x18c>)
 80017c4:	f002 fe80 	bl	80044c8 <HAL_GPIO_WritePin>
                            break;
 80017c8:	e000      	b.n	80017cc <handler_leds+0x17c>

                        default:
                            break;
 80017ca:	bf00      	nop
                    }                                        
                    break;
 80017cc:	e002      	b.n	80017d4 <handler_leds+0x184>
            
                default:
                    break;
            }
        }
 80017ce:	bf00      	nop
 80017d0:	e742      	b.n	8001658 <handler_leds+0x8>
                    break;
 80017d2:	bf00      	nop
        if(xQueueReceive(QueueHandle_leds_cmd, &led, portMAX_DELAY)) 
 80017d4:	e740      	b.n	8001658 <handler_leds+0x8>
 80017d6:	bf00      	nop
 80017d8:	2000561c 	.word	0x2000561c
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020000 	.word	0x40020000

080017e4 <API_LEDS_START>:
/** ************************************************************* *
 * @brief       init and start the payload task
 * 
 * ************************************************************* **/
void API_LEDS_START(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af02      	add	r7, sp, #8
    BaseType_t status;

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f0:	4848      	ldr	r0, [pc, #288]	; (8001914 <API_LEDS_START+0x130>)
 80017f2:	f002 fe69 	bl	80044c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017fc:	4845      	ldr	r0, [pc, #276]	; (8001914 <API_LEDS_START+0x130>)
 80017fe:	f002 fe63 	bl	80044c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_SET);
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001808:	4843      	ldr	r0, [pc, #268]	; (8001918 <API_LEDS_START+0x134>)
 800180a:	f002 fe5d 	bl	80044c8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LED_VBAT_SEQ_GPIO_Port, LED_VBAT_SEQ_Pin, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	2102      	movs	r1, #2
 8001812:	4840      	ldr	r0, [pc, #256]	; (8001914 <API_LEDS_START+0x130>)
 8001814:	f002 fe58 	bl	80044c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_VBAT_RECOV_GPIO_Port, LED_VBAT_RECOV_Pin, GPIO_PIN_SET);
 8001818:	2201      	movs	r2, #1
 800181a:	2104      	movs	r1, #4
 800181c:	483d      	ldr	r0, [pc, #244]	; (8001914 <API_LEDS_START+0x130>)
 800181e:	f002 fe53 	bl	80044c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_VBAT_PAYLOAD_GPIO_Port, LED_VBAT_PAYLOAD_Pin, GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	2108      	movs	r1, #8
 8001826:	483b      	ldr	r0, [pc, #236]	; (8001914 <API_LEDS_START+0x130>)
 8001828:	f002 fe4e 	bl	80044c8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001832:	4838      	ldr	r0, [pc, #224]	; (8001914 <API_LEDS_START+0x130>)
 8001834:	f002 fe48 	bl	80044c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_VBAT_SEQ_GPIO_Port, LED_VBAT_SEQ_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	2102      	movs	r1, #2
 800183c:	4835      	ldr	r0, [pc, #212]	; (8001914 <API_LEDS_START+0x130>)
 800183e:	f002 fe43 	bl	80044c8 <HAL_GPIO_WritePin>

    HAL_Delay(500);
 8001842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001846:	f001 fc2b 	bl	80030a0 <HAL_Delay>

    HAL_GPIO_WritePin(RGB1_R_GPIO_Port, RGB1_R_Pin, GPIO_PIN_SET);
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001850:	4830      	ldr	r0, [pc, #192]	; (8001914 <API_LEDS_START+0x130>)
 8001852:	f002 fe39 	bl	80044c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_VBAT_SEQ_GPIO_Port, LED_VBAT_SEQ_Pin, GPIO_PIN_SET);
 8001856:	2201      	movs	r2, #1
 8001858:	2102      	movs	r1, #2
 800185a:	482e      	ldr	r0, [pc, #184]	; (8001914 <API_LEDS_START+0x130>)
 800185c:	f002 fe34 	bl	80044c8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001866:	482b      	ldr	r0, [pc, #172]	; (8001914 <API_LEDS_START+0x130>)
 8001868:	f002 fe2e 	bl	80044c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_VBAT_RECOV_GPIO_Port, LED_VBAT_RECOV_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2104      	movs	r1, #4
 8001870:	4828      	ldr	r0, [pc, #160]	; (8001914 <API_LEDS_START+0x130>)
 8001872:	f002 fe29 	bl	80044c8 <HAL_GPIO_WritePin>

    HAL_Delay(500);
 8001876:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800187a:	f001 fc11 	bl	80030a0 <HAL_Delay>

    HAL_GPIO_WritePin(RGB1_G_GPIO_Port, RGB1_G_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001884:	4823      	ldr	r0, [pc, #140]	; (8001914 <API_LEDS_START+0x130>)
 8001886:	f002 fe1f 	bl	80044c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_VBAT_RECOV_GPIO_Port, LED_VBAT_RECOV_Pin, GPIO_PIN_SET);
 800188a:	2201      	movs	r2, #1
 800188c:	2104      	movs	r1, #4
 800188e:	4821      	ldr	r0, [pc, #132]	; (8001914 <API_LEDS_START+0x130>)
 8001890:	f002 fe1a 	bl	80044c8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189a:	481f      	ldr	r0, [pc, #124]	; (8001918 <API_LEDS_START+0x134>)
 800189c:	f002 fe14 	bl	80044c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_VBAT_PAYLOAD_GPIO_Port, LED_VBAT_PAYLOAD_Pin, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2108      	movs	r1, #8
 80018a4:	481b      	ldr	r0, [pc, #108]	; (8001914 <API_LEDS_START+0x130>)
 80018a6:	f002 fe0f 	bl	80044c8 <HAL_GPIO_WritePin>

    HAL_Delay(500);
 80018aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ae:	f001 fbf7 	bl	80030a0 <HAL_Delay>

    HAL_GPIO_WritePin(RGB1_B_GPIO_Port, RGB1_B_Pin, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b8:	4817      	ldr	r0, [pc, #92]	; (8001918 <API_LEDS_START+0x134>)
 80018ba:	f002 fe05 	bl	80044c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_VBAT_PAYLOAD_GPIO_Port, LED_VBAT_PAYLOAD_Pin, GPIO_PIN_SET);
 80018be:	2201      	movs	r2, #1
 80018c0:	2108      	movs	r1, #8
 80018c2:	4814      	ldr	r0, [pc, #80]	; (8001914 <API_LEDS_START+0x130>)
 80018c4:	f002 fe00 	bl	80044c8 <HAL_GPIO_WritePin>

    /* create the queues */
    QueueHandle_leds_cmd  = xQueueCreate(32, sizeof(ENUM_LEDS_CMD_t));
 80018c8:	2200      	movs	r2, #0
 80018ca:	2101      	movs	r1, #1
 80018cc:	2020      	movs	r0, #32
 80018ce:	f004 ff7b 	bl	80067c8 <xQueueGenericCreate>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a11      	ldr	r2, [pc, #68]	; (800191c <API_LEDS_START+0x138>)
 80018d6:	6013      	str	r3, [r2, #0]

    status = xTaskCreate(handler_leds, "task_leds", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_LEDS, &TaskHandle_leds);
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <API_LEDS_START+0x13c>)
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2301      	movs	r3, #1
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2300      	movs	r3, #0
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	490f      	ldr	r1, [pc, #60]	; (8001924 <API_LEDS_START+0x140>)
 80018e6:	4810      	ldr	r0, [pc, #64]	; (8001928 <API_LEDS_START+0x144>)
 80018e8:	f005 fc60 	bl	80071ac <xTaskCreate>
 80018ec:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d00a      	beq.n	800190a <API_LEDS_START+0x126>
        __asm volatile
 80018f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f8:	f383 8811 	msr	BASEPRI, r3
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	603b      	str	r3, [r7, #0]
    }
 8001906:	bf00      	nop
 8001908:	e7fe      	b.n	8001908 <API_LEDS_START+0x124>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40020800 	.word	0x40020800
 8001918:	40020000 	.word	0x40020000
 800191c:	2000561c 	.word	0x2000561c
 8001920:	20005620 	.word	0x20005620
 8001924:	0800bab4 	.word	0x0800bab4
 8001928:	08001651 	.word	0x08001651

0800192c <API_LEDS_SEND_PARAMETER>:
 * @brief       send a command to the payload task
 * 
 * @param       cmd 
 * ************************************************************* **/
void API_LEDS_SEND_PARAMETER(ENUM_LEDS_LIST_t led, ENUM_LEDS_CMD_t command)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	71bb      	strb	r3, [r7, #6]
    STRUCT_LEDS_t data =
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	733b      	strb	r3, [r7, #12]
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	737b      	strb	r3, [r7, #13]
    {
        .cmd = command, 
        .list = led
    };

    xQueueSend(QueueHandle_leds_cmd, &data, (TickType_t)0);
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <API_LEDS_SEND_PARAMETER+0x30>)
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	f107 010c 	add.w	r1, r7, #12
 800194c:	2300      	movs	r3, #0
 800194e:	2200      	movs	r2, #0
 8001950:	f004 ffc2 	bl	80068d8 <xQueueGenericSend>
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000561c 	.word	0x2000561c

08001960 <handler_payload>:
 *              commands
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_payload(void* parameters)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
 8001968:	f005 ff4e 	bl	8007808 <xTaskGetTickCount>
 800196c:	4603      	mov	r3, r0
 800196e:	60fb      	str	r3, [r7, #12]
    
    ENUM_PAYLOAD_CMD_t cmd = E_CMD_PL_NONE;
 8001970:	2300      	movs	r3, #0
 8001972:	72fb      	strb	r3, [r7, #11]

    while(1)
    {
        /* check for new command */
        if(xQueueReceive(QueueHandle_payload_cmd, &cmd, (TickType_t)0)) 
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <handler_payload+0x44>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f107 010b 	add.w	r1, r7, #11
 800197c:	2200      	movs	r2, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f005 f98e 	bl	8006ca0 <xQueueReceive>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <handler_payload+0x32>
        {
            process_cmd(cmd);
 800198a:	7afb      	ldrb	r3, [r7, #11]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f80b 	bl	80019a8 <process_cmd>
        }

        /* check if the system has reach the end */
        check_position();
 8001992:	f000 f89b 	bl	8001acc <check_position>

        /* wait until next task period */
        vTaskDelayUntil(&xLastWakeTime, TASK_PERIOD_PAYLOAD);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	210a      	movs	r1, #10
 800199c:	4618      	mov	r0, r3
 800199e:	f005 fd69 	bl	8007474 <xTaskDelayUntil>
        if(xQueueReceive(QueueHandle_payload_cmd, &cmd, (TickType_t)0)) 
 80019a2:	e7e7      	b.n	8001974 <handler_payload+0x14>
 80019a4:	20005624 	.word	0x20005624

080019a8 <process_cmd>:
 * @brief       
 * 
 * @param       cmd 
 * ************************************************************* **/
static void process_cmd(ENUM_PAYLOAD_CMD_t cmd)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
    switch(cmd)
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d032      	beq.n	8001a1e <process_cmd+0x76>
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	dc71      	bgt.n	8001aa0 <process_cmd+0xf8>
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d05b      	beq.n	8001a78 <process_cmd+0xd0>
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d16d      	bne.n	8001aa0 <process_cmd+0xf8>
    {
        case E_CMD_PL_OPEN :
            /* diasable the motors */
            HAL_GPIO_WritePin(M3_ENA_GPIO_Port, M3_ENA_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2101      	movs	r1, #1
 80019c8:	483b      	ldr	r0, [pc, #236]	; (8001ab8 <process_cmd+0x110>)
 80019ca:	f002 fd7d 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M3_ENB_GPIO_Port, M3_ENB_Pin, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2120      	movs	r1, #32
 80019d2:	483a      	ldr	r0, [pc, #232]	; (8001abc <process_cmd+0x114>)
 80019d4:	f002 fd78 	bl	80044c8 <HAL_GPIO_WritePin>

            /* disable the pwm */
            HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80019d8:	2108      	movs	r1, #8
 80019da:	4839      	ldr	r0, [pc, #228]	; (8001ac0 <process_cmd+0x118>)
 80019dc:	f003 fd66 	bl	80054ac <HAL_TIM_PWM_Stop>

            /* run motors clockwise */
            HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	2104      	movs	r1, #4
 80019e4:	4834      	ldr	r0, [pc, #208]	; (8001ab8 <process_cmd+0x110>)
 80019e6:	f002 fd6f 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2102      	movs	r1, #2
 80019ee:	4832      	ldr	r0, [pc, #200]	; (8001ab8 <process_cmd+0x110>)
 80019f0:	f002 fd6a 	bl	80044c8 <HAL_GPIO_WritePin>

            /* enable the pwm */
            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019f4:	2108      	movs	r1, #8
 80019f6:	4832      	ldr	r0, [pc, #200]	; (8001ac0 <process_cmd+0x118>)
 80019f8:	f003 fca8 	bl	800534c <HAL_TIM_PWM_Start>

            /* enable the motors */
            HAL_GPIO_WritePin(M3_ENA_GPIO_Port, M3_ENA_Pin, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2101      	movs	r1, #1
 8001a00:	482d      	ldr	r0, [pc, #180]	; (8001ab8 <process_cmd+0x110>)
 8001a02:	f002 fd61 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M3_ENB_GPIO_Port, M3_ENB_Pin, GPIO_PIN_SET);
 8001a06:	2201      	movs	r2, #1
 8001a08:	2120      	movs	r1, #32
 8001a0a:	482c      	ldr	r0, [pc, #176]	; (8001abc <process_cmd+0x114>)
 8001a0c:	f002 fd5c 	bl	80044c8 <HAL_GPIO_WritePin>

            /* update system structure */
            payload_mntr.status 	= E_STATUS_PL_RUNNING;
 8001a10:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <process_cmd+0x11c>)
 8001a12:	2202      	movs	r2, #2
 8001a14:	705a      	strb	r2, [r3, #1]
            payload_mntr.last_cmd = cmd;
 8001a16:	4a2b      	ldr	r2, [pc, #172]	; (8001ac4 <process_cmd+0x11c>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	7013      	strb	r3, [r2, #0]
            break;
 8001a1c:	e041      	b.n	8001aa2 <process_cmd+0xfa>

        case E_CMD_PL_CLOSE :
            /* disable the motors */
            HAL_GPIO_WritePin(M3_ENA_GPIO_Port, M3_ENA_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2101      	movs	r1, #1
 8001a22:	4825      	ldr	r0, [pc, #148]	; (8001ab8 <process_cmd+0x110>)
 8001a24:	f002 fd50 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M3_ENB_GPIO_Port, M3_ENB_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	4823      	ldr	r0, [pc, #140]	; (8001abc <process_cmd+0x114>)
 8001a2e:	f002 fd4b 	bl	80044c8 <HAL_GPIO_WritePin>

            /* disable the pwm */
            HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001a32:	2108      	movs	r1, #8
 8001a34:	4822      	ldr	r0, [pc, #136]	; (8001ac0 <process_cmd+0x118>)
 8001a36:	f003 fd39 	bl	80054ac <HAL_TIM_PWM_Stop>

            /* run motors anti-clockwise */
            HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	481e      	ldr	r0, [pc, #120]	; (8001ab8 <process_cmd+0x110>)
 8001a40:	f002 fd42 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2102      	movs	r1, #2
 8001a48:	481b      	ldr	r0, [pc, #108]	; (8001ab8 <process_cmd+0x110>)
 8001a4a:	f002 fd3d 	bl	80044c8 <HAL_GPIO_WritePin>

            /* enable the pwm */
            HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001a4e:	2108      	movs	r1, #8
 8001a50:	481b      	ldr	r0, [pc, #108]	; (8001ac0 <process_cmd+0x118>)
 8001a52:	f003 fc7b 	bl	800534c <HAL_TIM_PWM_Start>

            /* enable the motors */
            HAL_GPIO_WritePin(M3_ENA_GPIO_Port, M3_ENA_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4817      	ldr	r0, [pc, #92]	; (8001ab8 <process_cmd+0x110>)
 8001a5c:	f002 fd34 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M3_ENB_GPIO_Port, M3_ENB_Pin, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2120      	movs	r1, #32
 8001a64:	4815      	ldr	r0, [pc, #84]	; (8001abc <process_cmd+0x114>)
 8001a66:	f002 fd2f 	bl	80044c8 <HAL_GPIO_WritePin>
            
            /* update system structure */
            payload_mntr.status 	= E_STATUS_PL_RUNNING;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <process_cmd+0x11c>)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	705a      	strb	r2, [r3, #1]
            payload_mntr.last_cmd = cmd;
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <process_cmd+0x11c>)
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	7013      	strb	r3, [r2, #0]
            break;
 8001a76:	e014      	b.n	8001aa2 <process_cmd+0xfa>

        case E_CMD_PL_STOP :
            /* disable the motors */
            HAL_GPIO_WritePin(M3_ENA_GPIO_Port, M3_ENA_Pin, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <process_cmd+0x110>)
 8001a7e:	f002 fd23 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M3_ENB_GPIO_Port, M3_ENB_Pin, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2120      	movs	r1, #32
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <process_cmd+0x114>)
 8001a88:	f002 fd1e 	bl	80044c8 <HAL_GPIO_WritePin>

            /* disable the pwm */
            HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <process_cmd+0x118>)
 8001a90:	f003 fd0c 	bl	80054ac <HAL_TIM_PWM_Stop>

            /* update system structure */
            payload_mntr.status 	= E_STATUS_PL_STOP;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <process_cmd+0x11c>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	705a      	strb	r2, [r3, #1]
            payload_mntr.last_cmd = cmd;
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <process_cmd+0x11c>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	7013      	strb	r3, [r2, #0]

        default :
            break;
 8001aa0:	bf00      	nop
    }

    /* update monitoring queue */
    xQueueSend(QueueHandle_payload_mntr, &payload_mntr, (TickType_t)0);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <process_cmd+0x120>)
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4906      	ldr	r1, [pc, #24]	; (8001ac4 <process_cmd+0x11c>)
 8001aac:	f004 ff14 	bl	80068d8 <xQueueGenericSend>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	20005810 	.word	0x20005810
 8001ac4:	200000bc 	.word	0x200000bc
 8001ac8:	2000562c 	.word	0x2000562c

08001acc <check_position>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void check_position(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    /* check if the system has reach the open point */
    if(HAL_GPIO_ReadPin(M3_OPEN_GPIO_Port, M3_OPEN_Pin) == GPIO_PIN_RESET)
 8001ad0:	2110      	movs	r1, #16
 8001ad2:	4823      	ldr	r0, [pc, #140]	; (8001b60 <check_position+0x94>)
 8001ad4:	f002 fce0 	bl	8004498 <HAL_GPIO_ReadPin>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d11b      	bne.n	8001b16 <check_position+0x4a>
    {
    	if(payload_mntr.last_cmd == E_CMD_PL_OPEN)
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <check_position+0x98>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d117      	bne.n	8001b16 <check_position+0x4a>
    	{
            /* diasable the motors */
            HAL_GPIO_WritePin(M3_ENA_GPIO_Port, M3_ENA_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2101      	movs	r1, #1
 8001aea:	481f      	ldr	r0, [pc, #124]	; (8001b68 <check_position+0x9c>)
 8001aec:	f002 fcec 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M3_ENB_GPIO_Port, M3_ENB_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2120      	movs	r1, #32
 8001af4:	481d      	ldr	r0, [pc, #116]	; (8001b6c <check_position+0xa0>)
 8001af6:	f002 fce7 	bl	80044c8 <HAL_GPIO_WritePin>

            /* disable the pwm */
            HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001afa:	2108      	movs	r1, #8
 8001afc:	481c      	ldr	r0, [pc, #112]	; (8001b70 <check_position+0xa4>)
 8001afe:	f003 fcd5 	bl	80054ac <HAL_TIM_PWM_Stop>

            /* update the status */
            payload_mntr.status = E_STATUS_PL_OPENED;
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <check_position+0x98>)
 8001b04:	2203      	movs	r2, #3
 8001b06:	705a      	strb	r2, [r3, #1]

            /* update monitoring queue */
            xQueueSend(QueueHandle_payload_mntr, &payload_mntr, (TickType_t)0);
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <check_position+0xa8>)
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4914      	ldr	r1, [pc, #80]	; (8001b64 <check_position+0x98>)
 8001b12:	f004 fee1 	bl	80068d8 <xQueueGenericSend>
    	}
    }

    /* check if the system has reach the close point */
    if(HAL_GPIO_ReadPin(M3_CLOSE_GPIO_Port, M3_CLOSE_Pin) == GPIO_PIN_RESET)
 8001b16:	2108      	movs	r1, #8
 8001b18:	4811      	ldr	r0, [pc, #68]	; (8001b60 <check_position+0x94>)
 8001b1a:	f002 fcbd 	bl	8004498 <HAL_GPIO_ReadPin>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d11b      	bne.n	8001b5c <check_position+0x90>
    {
    	if(payload_mntr.last_cmd == E_CMD_PL_CLOSE)
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <check_position+0x98>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d117      	bne.n	8001b5c <check_position+0x90>
    	{
            /* diasable the motors */
            HAL_GPIO_WritePin(M3_ENA_GPIO_Port, M3_ENA_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2101      	movs	r1, #1
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <check_position+0x9c>)
 8001b32:	f002 fcc9 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M3_ENB_GPIO_Port, M3_ENB_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2120      	movs	r1, #32
 8001b3a:	480c      	ldr	r0, [pc, #48]	; (8001b6c <check_position+0xa0>)
 8001b3c:	f002 fcc4 	bl	80044c8 <HAL_GPIO_WritePin>

            /* disable the pwm */
            HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001b40:	2108      	movs	r1, #8
 8001b42:	480b      	ldr	r0, [pc, #44]	; (8001b70 <check_position+0xa4>)
 8001b44:	f003 fcb2 	bl	80054ac <HAL_TIM_PWM_Stop>

            /* update the status */
            payload_mntr.status = E_STATUS_PL_CLOSED;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <check_position+0x98>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	705a      	strb	r2, [r3, #1]

            /* update monitoring queue */
            xQueueSend(QueueHandle_payload_mntr, &payload_mntr, (TickType_t)0);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <check_position+0xa8>)
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	2300      	movs	r3, #0
 8001b54:	2200      	movs	r2, #0
 8001b56:	4903      	ldr	r1, [pc, #12]	; (8001b64 <check_position+0x98>)
 8001b58:	f004 febe 	bl	80068d8 <xQueueGenericSend>
    	}
    }
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40020000 	.word	0x40020000
 8001b64:	200000bc 	.word	0x200000bc
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	20005810 	.word	0x20005810
 8001b74:	2000562c 	.word	0x2000562c

08001b78 <API_PAYLOAD_START>:
/** ************************************************************* *
 * @brief       init and start the payload task
 * 
 * ************************************************************* **/
void API_PAYLOAD_START(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af02      	add	r7, sp, #8
    BaseType_t status;

    /* init the main structure */
    payload_mntr.last_cmd   = E_CMD_PL_NONE;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <API_PAYLOAD_START+0x78>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
    payload_mntr.status     = E_STATUS_PL_NONE;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <API_PAYLOAD_START+0x78>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	705a      	strb	r2, [r3, #1]

    /* init the motors pwm dutycycle */
    TIM2->CCR3 = PAYLOAD_CCR_M3;
 8001b8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b8e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001b92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* create the queues */
    QueueHandle_payload_cmd  = xQueueCreate(1, sizeof(ENUM_PAYLOAD_CMD_t));
 8001b94:	2200      	movs	r2, #0
 8001b96:	2101      	movs	r1, #1
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f004 fe15 	bl	80067c8 <xQueueGenericCreate>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <API_PAYLOAD_START+0x7c>)
 8001ba2:	6013      	str	r3, [r2, #0]
    QueueHandle_payload_mntr = xQueueCreate(1, sizeof(STRUCT_PAYLOAD_MNTR_t));
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f004 fe0d 	bl	80067c8 <xQueueGenericCreate>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <API_PAYLOAD_START+0x80>)
 8001bb2:	6013      	str	r3, [r2, #0]
    
    /* create the task */
    status = xTaskCreate(handler_payload, "task_payload", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_PAYLOAD, &TaskHandle_payload);
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <API_PAYLOAD_START+0x84>)
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	2303      	movs	r3, #3
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	490f      	ldr	r1, [pc, #60]	; (8001c00 <API_PAYLOAD_START+0x88>)
 8001bc2:	4810      	ldr	r0, [pc, #64]	; (8001c04 <API_PAYLOAD_START+0x8c>)
 8001bc4:	f005 faf2 	bl	80071ac <xTaskCreate>
 8001bc8:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d00a      	beq.n	8001be6 <API_PAYLOAD_START+0x6e>
        __asm volatile
 8001bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd4:	f383 8811 	msr	BASEPRI, r3
 8001bd8:	f3bf 8f6f 	isb	sy
 8001bdc:	f3bf 8f4f 	dsb	sy
 8001be0:	603b      	str	r3, [r7, #0]
    }
 8001be2:	bf00      	nop
 8001be4:	e7fe      	b.n	8001be4 <API_PAYLOAD_START+0x6c>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200000bc 	.word	0x200000bc
 8001bf4:	20005624 	.word	0x20005624
 8001bf8:	2000562c 	.word	0x2000562c
 8001bfc:	20005628 	.word	0x20005628
 8001c00:	0800bac0 	.word	0x0800bac0
 8001c04:	08001961 	.word	0x08001961

08001c08 <API_PAYLOAD_SEND_CMD>:
 * @brief       send a command to the payload task
 * 
 * @param       cmd 
 * ************************************************************* **/
void API_PAYLOAD_SEND_CMD(ENUM_PAYLOAD_CMD_t command)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
    xQueueSend(QueueHandle_payload_cmd, &command, (TickType_t)0);
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <API_PAYLOAD_SEND_CMD+0x20>)
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	1df9      	adds	r1, r7, #7
 8001c18:	2300      	movs	r3, #0
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f004 fe5c 	bl	80068d8 <xQueueGenericSend>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20005624 	.word	0x20005624

08001c2c <API_PAYLOAD_GET_MNTR>:
 * @param       monitoring 
 * @return      true    new status received
 * @return      false   nothing received
 * ************************************************************* **/
bool API_PAYLOAD_GET_MNTR(STRUCT_PAYLOAD_MNTR_t* monitoring)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    return (xQueueReceive(QueueHandle_payload_mntr, monitoring, (TickType_t)0)) ? true : false;
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <API_PAYLOAD_GET_MNTR+0x2c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 f82f 	bl	8006ca0 <xQueueReceive>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000562c 	.word	0x2000562c

08001c5c <handler_recovery>:
 *              commands
 * 
 * @param       parameters 
 * ************************************************************* **/
static void handler_recovery(void* parameters)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
 8001c64:	f005 fdd0 	bl	8007808 <xTaskGetTickCount>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60fb      	str	r3, [r7, #12]
    
    ENUM_RECOV_CMD_t cmd = E_CMD_RECOV_NONE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	72fb      	strb	r3, [r7, #11]

    while(1)
    {
        /* check for new command */
        if(xQueueReceive(QueueHandle_recov_cmd, &cmd, (TickType_t)0)) 
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <handler_recovery+0x44>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f107 010b 	add.w	r1, r7, #11
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f005 f810 	bl	8006ca0 <xQueueReceive>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <handler_recovery+0x32>
        {
            process_cmd(cmd);
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f80b 	bl	8001ca4 <process_cmd>
        }

        /* check if the system has reach the end */
        check_position();
 8001c8e:	f000 f913 	bl	8001eb8 <check_position>

        /* wait until next task period */
        vTaskDelayUntil(&xLastWakeTime, TASK_PERIOD_RECOVERY);
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	210a      	movs	r1, #10
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f005 fbeb 	bl	8007474 <xTaskDelayUntil>
        if(xQueueReceive(QueueHandle_recov_cmd, &cmd, (TickType_t)0)) 
 8001c9e:	e7e7      	b.n	8001c70 <handler_recovery+0x14>
 8001ca0:	20005630 	.word	0x20005630

08001ca4 <process_cmd>:
 * @brief       
 * 
 * @param       cmd 
 * ************************************************************* **/
static void process_cmd(ENUM_RECOV_CMD_t cmd)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
    switch(cmd)
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d065      	beq.n	8001d80 <process_cmd+0xdc>
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	f300 80e5 	bgt.w	8001e84 <process_cmd+0x1e0>
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	f000 80bd 	beq.w	8001e3a <process_cmd+0x196>
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	f040 80df 	bne.w	8001e84 <process_cmd+0x1e0>
    {
        case E_CMD_RECOV_OPEN :
            /* diasable the motors */
            HAL_GPIO_WritePin(M1_ENA_GPIO_Port, M1_ENA_Pin, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ccc:	4873      	ldr	r0, [pc, #460]	; (8001e9c <process_cmd+0x1f8>)
 8001cce:	f002 fbfb 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M1_ENB_GPIO_Port, M1_ENB_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	4871      	ldr	r0, [pc, #452]	; (8001e9c <process_cmd+0x1f8>)
 8001cd8:	f002 fbf6 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENA_GPIO_Port, M2_ENA_Pin, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce2:	486f      	ldr	r0, [pc, #444]	; (8001ea0 <process_cmd+0x1fc>)
 8001ce4:	f002 fbf0 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENB_GPIO_Port, M2_ENB_Pin, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cee:	486c      	ldr	r0, [pc, #432]	; (8001ea0 <process_cmd+0x1fc>)
 8001cf0:	f002 fbea 	bl	80044c8 <HAL_GPIO_WritePin>

            /* disable the pwm */
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	486b      	ldr	r0, [pc, #428]	; (8001ea4 <process_cmd+0x200>)
 8001cf8:	f003 fbd8 	bl	80054ac <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	486a      	ldr	r0, [pc, #424]	; (8001ea8 <process_cmd+0x204>)
 8001d00:	f003 fbd4 	bl	80054ac <HAL_TIM_PWM_Stop>

            /* run motors clockwise */
            HAL_GPIO_WritePin(M1_INA_GPIO_Port, M1_INA_Pin, GPIO_PIN_SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d0a:	4868      	ldr	r0, [pc, #416]	; (8001eac <process_cmd+0x208>)
 8001d0c:	f002 fbdc 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d16:	4861      	ldr	r0, [pc, #388]	; (8001e9c <process_cmd+0x1f8>)
 8001d18:	f002 fbd6 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_INA_GPIO_Port, M2_INA_Pin, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d22:	485f      	ldr	r0, [pc, #380]	; (8001ea0 <process_cmd+0x1fc>)
 8001d24:	f002 fbd0 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_INB_GPIO_Port, M2_INB_Pin, GPIO_PIN_RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d2e:	485c      	ldr	r0, [pc, #368]	; (8001ea0 <process_cmd+0x1fc>)
 8001d30:	f002 fbca 	bl	80044c8 <HAL_GPIO_WritePin>

            /* enable the pwm */
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d34:	2104      	movs	r1, #4
 8001d36:	485b      	ldr	r0, [pc, #364]	; (8001ea4 <process_cmd+0x200>)
 8001d38:	f003 fb08 	bl	800534c <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	485a      	ldr	r0, [pc, #360]	; (8001ea8 <process_cmd+0x204>)
 8001d40:	f003 fb04 	bl	800534c <HAL_TIM_PWM_Start>

            /* enable the motors */
            HAL_GPIO_WritePin(M1_ENA_GPIO_Port, M1_ENA_Pin, GPIO_PIN_SET);
 8001d44:	2201      	movs	r2, #1
 8001d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d4a:	4854      	ldr	r0, [pc, #336]	; (8001e9c <process_cmd+0x1f8>)
 8001d4c:	f002 fbbc 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M1_ENB_GPIO_Port, M1_ENB_Pin, GPIO_PIN_SET);
 8001d50:	2201      	movs	r2, #1
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	4851      	ldr	r0, [pc, #324]	; (8001e9c <process_cmd+0x1f8>)
 8001d56:	f002 fbb7 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENA_GPIO_Port, M2_ENA_Pin, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d60:	484f      	ldr	r0, [pc, #316]	; (8001ea0 <process_cmd+0x1fc>)
 8001d62:	f002 fbb1 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENB_GPIO_Port, M2_ENB_Pin, GPIO_PIN_SET);
 8001d66:	2201      	movs	r2, #1
 8001d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6c:	484c      	ldr	r0, [pc, #304]	; (8001ea0 <process_cmd+0x1fc>)
 8001d6e:	f002 fbab 	bl	80044c8 <HAL_GPIO_WritePin>

            /* update system structure */
            recov_mntr.status 	= E_STATUS_RECOV_RUNNING;
 8001d72:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <process_cmd+0x20c>)
 8001d74:	2202      	movs	r2, #2
 8001d76:	705a      	strb	r2, [r3, #1]
            recov_mntr.last_cmd = cmd;
 8001d78:	4a4d      	ldr	r2, [pc, #308]	; (8001eb0 <process_cmd+0x20c>)
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	7013      	strb	r3, [r2, #0]
            break;
 8001d7e:	e082      	b.n	8001e86 <process_cmd+0x1e2>

        case E_CMD_RECOV_CLOSE :
            /* disable the motors */
            HAL_GPIO_WritePin(M1_ENA_GPIO_Port, M1_ENA_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d86:	4845      	ldr	r0, [pc, #276]	; (8001e9c <process_cmd+0x1f8>)
 8001d88:	f002 fb9e 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M1_ENB_GPIO_Port, M1_ENB_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	4842      	ldr	r0, [pc, #264]	; (8001e9c <process_cmd+0x1f8>)
 8001d92:	f002 fb99 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENA_GPIO_Port, M2_ENA_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d9c:	4840      	ldr	r0, [pc, #256]	; (8001ea0 <process_cmd+0x1fc>)
 8001d9e:	f002 fb93 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENB_GPIO_Port, M2_ENB_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da8:	483d      	ldr	r0, [pc, #244]	; (8001ea0 <process_cmd+0x1fc>)
 8001daa:	f002 fb8d 	bl	80044c8 <HAL_GPIO_WritePin>

            /* disable the pwm */
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001dae:	2104      	movs	r1, #4
 8001db0:	483c      	ldr	r0, [pc, #240]	; (8001ea4 <process_cmd+0x200>)
 8001db2:	f003 fb7b 	bl	80054ac <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001db6:	2100      	movs	r1, #0
 8001db8:	483b      	ldr	r0, [pc, #236]	; (8001ea8 <process_cmd+0x204>)
 8001dba:	f003 fb77 	bl	80054ac <HAL_TIM_PWM_Stop>

            /* run motors anti-clockwise */
            HAL_GPIO_WritePin(M1_INA_GPIO_Port, M1_INA_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc4:	4839      	ldr	r0, [pc, #228]	; (8001eac <process_cmd+0x208>)
 8001dc6:	f002 fb7f 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, GPIO_PIN_SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd0:	4832      	ldr	r0, [pc, #200]	; (8001e9c <process_cmd+0x1f8>)
 8001dd2:	f002 fb79 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_INA_GPIO_Port, M2_INA_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ddc:	4830      	ldr	r0, [pc, #192]	; (8001ea0 <process_cmd+0x1fc>)
 8001dde:	f002 fb73 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_INB_GPIO_Port, M2_INB_Pin, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de8:	482d      	ldr	r0, [pc, #180]	; (8001ea0 <process_cmd+0x1fc>)
 8001dea:	f002 fb6d 	bl	80044c8 <HAL_GPIO_WritePin>

            /* enable the pwm */
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001dee:	2104      	movs	r1, #4
 8001df0:	482c      	ldr	r0, [pc, #176]	; (8001ea4 <process_cmd+0x200>)
 8001df2:	f003 faab 	bl	800534c <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001df6:	2100      	movs	r1, #0
 8001df8:	482b      	ldr	r0, [pc, #172]	; (8001ea8 <process_cmd+0x204>)
 8001dfa:	f003 faa7 	bl	800534c <HAL_TIM_PWM_Start>

            /* enable the motors */
            HAL_GPIO_WritePin(M1_ENA_GPIO_Port, M1_ENA_Pin, GPIO_PIN_SET);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e04:	4825      	ldr	r0, [pc, #148]	; (8001e9c <process_cmd+0x1f8>)
 8001e06:	f002 fb5f 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M1_ENB_GPIO_Port, M1_ENB_Pin, GPIO_PIN_SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	4823      	ldr	r0, [pc, #140]	; (8001e9c <process_cmd+0x1f8>)
 8001e10:	f002 fb5a 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENA_GPIO_Port, M2_ENA_Pin, GPIO_PIN_SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1a:	4821      	ldr	r0, [pc, #132]	; (8001ea0 <process_cmd+0x1fc>)
 8001e1c:	f002 fb54 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENB_GPIO_Port, M2_ENB_Pin, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e26:	481e      	ldr	r0, [pc, #120]	; (8001ea0 <process_cmd+0x1fc>)
 8001e28:	f002 fb4e 	bl	80044c8 <HAL_GPIO_WritePin>
            
            /* update system structure */
            recov_mntr.status 	= E_STATUS_RECOV_RUNNING;
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <process_cmd+0x20c>)
 8001e2e:	2202      	movs	r2, #2
 8001e30:	705a      	strb	r2, [r3, #1]
            recov_mntr.last_cmd = cmd;
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <process_cmd+0x20c>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	7013      	strb	r3, [r2, #0]
            break;
 8001e38:	e025      	b.n	8001e86 <process_cmd+0x1e2>

        case E_CMD_RECOV_STOP :
            /* disable the motors */
            HAL_GPIO_WritePin(M1_ENA_GPIO_Port, M1_ENA_Pin, GPIO_PIN_RESET);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e40:	4816      	ldr	r0, [pc, #88]	; (8001e9c <process_cmd+0x1f8>)
 8001e42:	f002 fb41 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M1_ENB_GPIO_Port, M1_ENB_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	4814      	ldr	r0, [pc, #80]	; (8001e9c <process_cmd+0x1f8>)
 8001e4c:	f002 fb3c 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENA_GPIO_Port, M2_ENA_Pin, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e56:	4812      	ldr	r0, [pc, #72]	; (8001ea0 <process_cmd+0x1fc>)
 8001e58:	f002 fb36 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENB_GPIO_Port, M2_ENB_Pin, GPIO_PIN_RESET);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e62:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <process_cmd+0x1fc>)
 8001e64:	f002 fb30 	bl	80044c8 <HAL_GPIO_WritePin>

            /* disable the pwm */
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001e68:	2104      	movs	r1, #4
 8001e6a:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <process_cmd+0x200>)
 8001e6c:	f003 fb1e 	bl	80054ac <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001e70:	2100      	movs	r1, #0
 8001e72:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <process_cmd+0x204>)
 8001e74:	f003 fb1a 	bl	80054ac <HAL_TIM_PWM_Stop>

            /* update system structure */
            recov_mntr.status 	= E_STATUS_RECOV_STOP;
 8001e78:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <process_cmd+0x20c>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	705a      	strb	r2, [r3, #1]
            recov_mntr.last_cmd = cmd;
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <process_cmd+0x20c>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	7013      	strb	r3, [r2, #0]

        default :
            break;
 8001e84:	bf00      	nop
    }

    /* update monitoring queue */
    xQueueSend(QueueHandle_recov_mntr, &recov_mntr, (TickType_t)0);
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <process_cmd+0x210>)
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4908      	ldr	r1, [pc, #32]	; (8001eb0 <process_cmd+0x20c>)
 8001e90:	f004 fd22 	bl	80068d8 <xQueueGenericSend>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	200057c8 	.word	0x200057c8
 8001ea8:	20005780 	.word	0x20005780
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	200000c0 	.word	0x200000c0
 8001eb4:	20005638 	.word	0x20005638

08001eb8 <check_position>:
/** ************************************************************* *
 * @brief       
 * 
 * ************************************************************* **/
static void check_position(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    /* check if the system has reach the open point */
    if(HAL_GPIO_ReadPin(M1_OPEN_GPIO_Port, M1_OPEN_Pin) == GPIO_PIN_RESET
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	483b      	ldr	r0, [pc, #236]	; (8001fac <check_position+0xf4>)
 8001ec0:	f002 faea 	bl	8004498 <HAL_GPIO_ReadPin>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <check_position+0x20>
    || HAL_GPIO_ReadPin(M2_OPEN_GPIO_Port, M2_OPEN_Pin) == GPIO_PIN_RESET)
 8001eca:	2140      	movs	r1, #64	; 0x40
 8001ecc:	4838      	ldr	r0, [pc, #224]	; (8001fb0 <check_position+0xf8>)
 8001ece:	f002 fae3 	bl	8004498 <HAL_GPIO_ReadPin>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d12c      	bne.n	8001f32 <check_position+0x7a>
    {
    	if(recov_mntr.last_cmd == E_CMD_RECOV_OPEN)
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <check_position+0xfc>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d128      	bne.n	8001f32 <check_position+0x7a>
    	{
            /* diasable the motors */
            HAL_GPIO_WritePin(M1_ENA_GPIO_Port, M1_ENA_Pin, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee6:	4831      	ldr	r0, [pc, #196]	; (8001fac <check_position+0xf4>)
 8001ee8:	f002 faee 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M1_ENB_GPIO_Port, M1_ENB_Pin, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	482e      	ldr	r0, [pc, #184]	; (8001fac <check_position+0xf4>)
 8001ef2:	f002 fae9 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENA_GPIO_Port, M2_ENA_Pin, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efc:	482e      	ldr	r0, [pc, #184]	; (8001fb8 <check_position+0x100>)
 8001efe:	f002 fae3 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENB_GPIO_Port, M2_ENB_Pin, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f08:	482b      	ldr	r0, [pc, #172]	; (8001fb8 <check_position+0x100>)
 8001f0a:	f002 fadd 	bl	80044c8 <HAL_GPIO_WritePin>

            /* disable the pwm */
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001f0e:	2104      	movs	r1, #4
 8001f10:	482a      	ldr	r0, [pc, #168]	; (8001fbc <check_position+0x104>)
 8001f12:	f003 facb 	bl	80054ac <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001f16:	2100      	movs	r1, #0
 8001f18:	4829      	ldr	r0, [pc, #164]	; (8001fc0 <check_position+0x108>)
 8001f1a:	f003 fac7 	bl	80054ac <HAL_TIM_PWM_Stop>

            /* update the status */
            recov_mntr.status = E_STATUS_RECOV_OPENED;
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <check_position+0xfc>)
 8001f20:	2203      	movs	r2, #3
 8001f22:	705a      	strb	r2, [r3, #1]

            /* update monitoring queue */
            xQueueSend(QueueHandle_recov_mntr, &recov_mntr, (TickType_t)0);
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <check_position+0x10c>)
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4921      	ldr	r1, [pc, #132]	; (8001fb4 <check_position+0xfc>)
 8001f2e:	f004 fcd3 	bl	80068d8 <xQueueGenericSend>
    	}
    }

    /* check if the system has reach the close point */
    if(HAL_GPIO_ReadPin(M1_CLOSE_GPIO_Port, M1_CLOSE_Pin) == GPIO_PIN_RESET
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	481e      	ldr	r0, [pc, #120]	; (8001fb0 <check_position+0xf8>)
 8001f36:	f002 faaf 	bl	8004498 <HAL_GPIO_ReadPin>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <check_position+0x96>
    || HAL_GPIO_ReadPin(M2_CLOSE_GPIO_Port, M2_CLOSE_Pin) == GPIO_PIN_RESET)
 8001f40:	2120      	movs	r1, #32
 8001f42:	481b      	ldr	r0, [pc, #108]	; (8001fb0 <check_position+0xf8>)
 8001f44:	f002 faa8 	bl	8004498 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d12c      	bne.n	8001fa8 <check_position+0xf0>
    {
    	if(recov_mntr.last_cmd == E_CMD_RECOV_CLOSE)
 8001f4e:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <check_position+0xfc>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d128      	bne.n	8001fa8 <check_position+0xf0>
    	{
            /* diasable the motors */
            HAL_GPIO_WritePin(M1_ENA_GPIO_Port, M1_ENA_Pin, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f5c:	4813      	ldr	r0, [pc, #76]	; (8001fac <check_position+0xf4>)
 8001f5e:	f002 fab3 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M1_ENB_GPIO_Port, M1_ENB_Pin, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	4811      	ldr	r0, [pc, #68]	; (8001fac <check_position+0xf4>)
 8001f68:	f002 faae 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENA_GPIO_Port, M2_ENA_Pin, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f72:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <check_position+0x100>)
 8001f74:	f002 faa8 	bl	80044c8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(M2_ENB_GPIO_Port, M2_ENB_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7e:	480e      	ldr	r0, [pc, #56]	; (8001fb8 <check_position+0x100>)
 8001f80:	f002 faa2 	bl	80044c8 <HAL_GPIO_WritePin>

            /* disable the pwm */
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001f84:	2104      	movs	r1, #4
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <check_position+0x104>)
 8001f88:	f003 fa90 	bl	80054ac <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <check_position+0x108>)
 8001f90:	f003 fa8c 	bl	80054ac <HAL_TIM_PWM_Stop>

            /* update the status */
            recov_mntr.status = E_STATUS_RECOV_CLOSED;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <check_position+0xfc>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	705a      	strb	r2, [r3, #1]

            /* update monitoring queue */
            xQueueSend(QueueHandle_recov_mntr, &recov_mntr, (TickType_t)0);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <check_position+0x10c>)
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <check_position+0xfc>)
 8001fa4:	f004 fc98 	bl	80068d8 <xQueueGenericSend>
    	}
    }
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	200000c0 	.word	0x200000c0
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	200057c8 	.word	0x200057c8
 8001fc0:	20005780 	.word	0x20005780
 8001fc4:	20005638 	.word	0x20005638

08001fc8 <API_RECOVERY_START>:
/** ************************************************************* *
 * @brief       init and start the recovery task
 * 
 * ************************************************************* **/
void API_RECOVERY_START(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af02      	add	r7, sp, #8
    BaseType_t status;

    /* init the main structure */
    recov_mntr.last_cmd   = E_CMD_RECOV_NONE;
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <API_RECOVERY_START+0x80>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
    recov_mntr.status     = E_STATUS_RECOV_NONE;
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <API_RECOVERY_START+0x80>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	705a      	strb	r2, [r3, #1]

    /* init the motors pwm dutycycle */
    TIM2->CCR2 = RECOVERY_CCR_M1;
 8001fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fde:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001fe2:	639a      	str	r2, [r3, #56]	; 0x38
    TIM3->CCR3 = RECOVERY_CCR_M2;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <API_RECOVERY_START+0x84>)
 8001fe6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001fea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* create the queues */
    QueueHandle_recov_cmd  = xQueueCreate(1, sizeof(ENUM_RECOV_CMD_t));
 8001fec:	2200      	movs	r2, #0
 8001fee:	2101      	movs	r1, #1
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f004 fbe9 	bl	80067c8 <xQueueGenericCreate>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4a15      	ldr	r2, [pc, #84]	; (8002050 <API_RECOVERY_START+0x88>)
 8001ffa:	6013      	str	r3, [r2, #0]
    QueueHandle_recov_mntr = xQueueCreate(1, sizeof(STRUCT_RECOV_MNTR_t));
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2102      	movs	r1, #2
 8002000:	2001      	movs	r0, #1
 8002002:	f004 fbe1 	bl	80067c8 <xQueueGenericCreate>
 8002006:	4603      	mov	r3, r0
 8002008:	4a12      	ldr	r2, [pc, #72]	; (8002054 <API_RECOVERY_START+0x8c>)
 800200a:	6013      	str	r3, [r2, #0]
    
    /* create the task */
    status = xTaskCreate(handler_recovery, "task_recovery", configMINIMAL_STACK_SIZE, NULL, TASK_PRIORITY_RECOVERY, &TaskHandle_recovery);
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <API_RECOVERY_START+0x90>)
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2303      	movs	r3, #3
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	4910      	ldr	r1, [pc, #64]	; (800205c <API_RECOVERY_START+0x94>)
 800201a:	4811      	ldr	r0, [pc, #68]	; (8002060 <API_RECOVERY_START+0x98>)
 800201c:	f005 f8c6 	bl	80071ac <xTaskCreate>
 8002020:	6078      	str	r0, [r7, #4]
    configASSERT(status == pdPASS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d00a      	beq.n	800203e <API_RECOVERY_START+0x76>
        __asm volatile
 8002028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202c:	f383 8811 	msr	BASEPRI, r3
 8002030:	f3bf 8f6f 	isb	sy
 8002034:	f3bf 8f4f 	dsb	sy
 8002038:	603b      	str	r3, [r7, #0]
    }
 800203a:	bf00      	nop
 800203c:	e7fe      	b.n	800203c <API_RECOVERY_START+0x74>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200000c0 	.word	0x200000c0
 800204c:	40000400 	.word	0x40000400
 8002050:	20005630 	.word	0x20005630
 8002054:	20005638 	.word	0x20005638
 8002058:	20005634 	.word	0x20005634
 800205c:	0800bad0 	.word	0x0800bad0
 8002060:	08001c5d 	.word	0x08001c5d

08002064 <API_RECOVERY_SEND_CMD>:
 * @brief       send a command to the recovery task
 * 
 * @param       cmd 
 * ************************************************************* **/
void API_RECOVERY_SEND_CMD(ENUM_RECOV_CMD_t command)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
    xQueueSend(QueueHandle_recov_cmd, &command, (TickType_t)0);
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <API_RECOVERY_SEND_CMD+0x20>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	1df9      	adds	r1, r7, #7
 8002074:	2300      	movs	r3, #0
 8002076:	2200      	movs	r2, #0
 8002078:	f004 fc2e 	bl	80068d8 <xQueueGenericSend>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20005630 	.word	0x20005630

08002088 <API_RECOVERY_GET_MNTR>:
 * @param       monitoring 
 * @return      true    new status received
 * @return      false   nothing received
 * ************************************************************* **/
bool API_RECOVERY_GET_MNTR(STRUCT_RECOV_MNTR_t* monitoring)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    return (xQueueReceive(QueueHandle_recov_mntr, monitoring, (TickType_t)0)) ? true : false;
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <API_RECOVERY_GET_MNTR+0x2c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2200      	movs	r2, #0
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f004 fe01 	bl	8006ca0 <xQueueReceive>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20005638 	.word	0x20005638

080020b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020be:	463b      	mov	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020ca:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <MX_ADC1_Init+0xd0>)
 80020cc:	4a2f      	ldr	r2, [pc, #188]	; (800218c <MX_ADC1_Init+0xd4>)
 80020ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <MX_ADC1_Init+0xd0>)
 80020d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <MX_ADC1_Init+0xd0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <MX_ADC1_Init+0xd0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <MX_ADC1_Init+0xd0>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020ea:	4b27      	ldr	r3, [pc, #156]	; (8002188 <MX_ADC1_Init+0xd0>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020f2:	4b25      	ldr	r3, [pc, #148]	; (8002188 <MX_ADC1_Init+0xd0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020f8:	4b23      	ldr	r3, [pc, #140]	; (8002188 <MX_ADC1_Init+0xd0>)
 80020fa:	4a25      	ldr	r2, [pc, #148]	; (8002190 <MX_ADC1_Init+0xd8>)
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <MX_ADC1_Init+0xd0>)
 8002100:	2200      	movs	r2, #0
 8002102:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <MX_ADC1_Init+0xd0>)
 8002106:	2203      	movs	r2, #3
 8002108:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <MX_ADC1_Init+0xd0>)
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <MX_ADC1_Init+0xd0>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002118:	481b      	ldr	r0, [pc, #108]	; (8002188 <MX_ADC1_Init+0xd0>)
 800211a:	f000 ffe5 	bl	80030e8 <HAL_ADC_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002124:	f000 fb5c 	bl	80027e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002128:	2300      	movs	r3, #0
 800212a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800212c:	2301      	movs	r3, #1
 800212e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002130:	2301      	movs	r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002134:	463b      	mov	r3, r7
 8002136:	4619      	mov	r1, r3
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <MX_ADC1_Init+0xd0>)
 800213a:	f001 f927 	bl	800338c <HAL_ADC_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002144:	f000 fb4c 	bl	80027e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002148:	2301      	movs	r3, #1
 800214a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800214c:	2302      	movs	r3, #2
 800214e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002150:	463b      	mov	r3, r7
 8002152:	4619      	mov	r1, r3
 8002154:	480c      	ldr	r0, [pc, #48]	; (8002188 <MX_ADC1_Init+0xd0>)
 8002156:	f001 f919 	bl	800338c <HAL_ADC_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002160:	f000 fb3e 	bl	80027e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002164:	2302      	movs	r3, #2
 8002166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002168:	2303      	movs	r3, #3
 800216a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800216c:	463b      	mov	r3, r7
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_ADC1_Init+0xd0>)
 8002172:	f001 f90b 	bl	800338c <HAL_ADC_ConfigChannel>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800217c:	f000 fb30 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	2000563c 	.word	0x2000563c
 800218c:	40012000 	.word	0x40012000
 8002190:	0f000001 	.word	0x0f000001

08002194 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <HAL_ADC_MspInit+0xdc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d157      	bne.n	8002266 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_ADC_MspInit+0xe0>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <HAL_ADC_MspInit+0xe0>)
 80021c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c4:	6453      	str	r3, [r2, #68]	; 0x44
 80021c6:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <HAL_ADC_MspInit+0xe0>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_ADC_MspInit+0xe0>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a26      	ldr	r2, [pc, #152]	; (8002274 <HAL_ADC_MspInit+0xe0>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_ADC_MspInit+0xe0>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = VBAT_SEQ_Pin|VBAT_RECOV_Pin|VBAT_PAYLOAD_Pin;
 80021ee:	2307      	movs	r3, #7
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f2:	2303      	movs	r3, #3
 80021f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	481d      	ldr	r0, [pc, #116]	; (8002278 <HAL_ADC_MspInit+0xe4>)
 8002202:	f001 ffc5 	bl	8004190 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_ADC_MspInit+0xe8>)
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <HAL_ADC_MspInit+0xec>)
 800220a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_ADC_MspInit+0xe8>)
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_ADC_MspInit+0xe8>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002218:	4b18      	ldr	r3, [pc, #96]	; (800227c <HAL_ADC_MspInit+0xe8>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_ADC_MspInit+0xe8>)
 8002220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002224:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_ADC_MspInit+0xe8>)
 8002228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800222c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_ADC_MspInit+0xe8>)
 8002230:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002234:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_ADC_MspInit+0xe8>)
 8002238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_ADC_MspInit+0xe8>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_ADC_MspInit+0xe8>)
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800224a:	480c      	ldr	r0, [pc, #48]	; (800227c <HAL_ADC_MspInit+0xe8>)
 800224c:	f001 fc30 	bl	8003ab0 <HAL_DMA_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002256:	f000 fac3 	bl	80027e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a07      	ldr	r2, [pc, #28]	; (800227c <HAL_ADC_MspInit+0xe8>)
 800225e:	639a      	str	r2, [r3, #56]	; 0x38
 8002260:	4a06      	ldr	r2, [pc, #24]	; (800227c <HAL_ADC_MspInit+0xe8>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40012000 	.word	0x40012000
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000
 800227c:	20005684 	.word	0x20005684
 8002280:	40026410 	.word	0x40026410

08002284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <MX_DMA_Init+0x3c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <MX_DMA_Init+0x3c>)
 8002294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <MX_DMA_Init+0x3c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2038      	movs	r0, #56	; 0x38
 80022ac:	f001 fbd6 	bl	8003a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022b0:	2038      	movs	r0, #56	; 0x38
 80022b2:	f001 fbef 	bl	8003a94 <HAL_NVIC_EnableIRQ>

}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800

080022c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b81      	ldr	r3, [pc, #516]	; (80024e4 <MX_GPIO_Init+0x220>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a80      	ldr	r2, [pc, #512]	; (80024e4 <MX_GPIO_Init+0x220>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b7e      	ldr	r3, [pc, #504]	; (80024e4 <MX_GPIO_Init+0x220>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b7a      	ldr	r3, [pc, #488]	; (80024e4 <MX_GPIO_Init+0x220>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a79      	ldr	r2, [pc, #484]	; (80024e4 <MX_GPIO_Init+0x220>)
 8002300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b77      	ldr	r3, [pc, #476]	; (80024e4 <MX_GPIO_Init+0x220>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <MX_GPIO_Init+0x220>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a72      	ldr	r2, [pc, #456]	; (80024e4 <MX_GPIO_Init+0x220>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b70      	ldr	r3, [pc, #448]	; (80024e4 <MX_GPIO_Init+0x220>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	4b6c      	ldr	r3, [pc, #432]	; (80024e4 <MX_GPIO_Init+0x220>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a6b      	ldr	r2, [pc, #428]	; (80024e4 <MX_GPIO_Init+0x220>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b69      	ldr	r3, [pc, #420]	; (80024e4 <MX_GPIO_Init+0x220>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <MX_GPIO_Init+0x220>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a64      	ldr	r2, [pc, #400]	; (80024e4 <MX_GPIO_Init+0x220>)
 8002354:	f043 0308 	orr.w	r3, r3, #8
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b62      	ldr	r3, [pc, #392]	; (80024e4 <MX_GPIO_Init+0x220>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|LED_VBAT_SEQ_Pin|LED_VBAT_RECOV_Pin|LED_VBAT_PAYLOAD_Pin
 8002366:	2200      	movs	r2, #0
 8002368:	f648 71ae 	movw	r1, #36782	; 0x8fae
 800236c:	485e      	ldr	r0, [pc, #376]	; (80024e8 <MX_GPIO_Init+0x224>)
 800236e:	f002 f8ab 	bl	80044c8 <HAL_GPIO_WritePin>
                          |M3_ENB_Pin|M1_ENB_Pin|M1_ENA_Pin|M1_INB_Pin
                          |RGB1_G_Pin|RGB1_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_ENA_Pin|M3_INB_Pin|M3_INA_Pin|M2_ENB_Pin
 8002372:	2200      	movs	r2, #0
 8002374:	f24f 0107 	movw	r1, #61447	; 0xf007
 8002378:	485c      	ldr	r0, [pc, #368]	; (80024ec <MX_GPIO_Init+0x228>)
 800237a:	f002 f8a5 	bl	80044c8 <HAL_GPIO_WritePin>
                          |M2_ENA_Pin|M2_INB_Pin|M2_INA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_INA_Pin|RGB1_B_Pin, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8002384:	485a      	ldr	r0, [pc, #360]	; (80024f0 <MX_GPIO_Init+0x22c>)
 8002386:	f002 f89f 	bl	80044c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_VBAT_SEQ_Pin|LED_VBAT_RECOV_Pin|LED_VBAT_PAYLOAD_Pin
 800238a:	f648 73ae 	movw	r3, #36782	; 0x8fae
 800238e:	617b      	str	r3, [r7, #20]
                          |M3_ENB_Pin|M1_ENB_Pin|M1_ENA_Pin|M1_INB_Pin
                          |RGB1_G_Pin|RGB1_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002390:	2301      	movs	r3, #1
 8002392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	4619      	mov	r1, r3
 80023a2:	4851      	ldr	r0, [pc, #324]	; (80024e8 <MX_GPIO_Init+0x224>)
 80023a4:	f001 fef4 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACCELEROC_Pin;
 80023a8:	2302      	movs	r3, #2
 80023aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCELEROC_GPIO_Port, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	484d      	ldr	r0, [pc, #308]	; (80024f4 <MX_GPIO_Init+0x230>)
 80023be:	f001 fee7 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_FROM_HMI_Pin;
 80023c2:	2301      	movs	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_FROM_HMI_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4619      	mov	r1, r3
 80023d6:	4844      	ldr	r0, [pc, #272]	; (80024e8 <MX_GPIO_Init+0x224>)
 80023d8:	f001 feda 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M3_CLOSE_Pin|M3_OPEN_Pin|M2_CLOSE_Pin|M2_OPEN_Pin
 80023dc:	23f8      	movs	r3, #248	; 0xf8
 80023de:	617b      	str	r3, [r7, #20]
                          |M1_CLOSE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4840      	ldr	r0, [pc, #256]	; (80024f0 <MX_GPIO_Init+0x22c>)
 80023f0:	f001 fece 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_OPEN_Pin;
 80023f4:	2310      	movs	r3, #16
 80023f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_OPEN_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	4838      	ldr	r0, [pc, #224]	; (80024e8 <MX_GPIO_Init+0x224>)
 8002408:	f001 fec2 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = M3_ENA_Pin|M3_INB_Pin|M3_INA_Pin|M2_ENB_Pin
 800240c:	f24f 0307 	movw	r3, #61447	; 0xf007
 8002410:	617b      	str	r3, [r7, #20]
                          |M2_ENA_Pin|M2_INB_Pin|M2_INA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4831      	ldr	r0, [pc, #196]	; (80024ec <MX_GPIO_Init+0x228>)
 8002426:	f001 feb3 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = M1_INA_Pin|RGB1_B_Pin;
 800242a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800242e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002430:	2301      	movs	r3, #1
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	482b      	ldr	r0, [pc, #172]	; (80024f0 <MX_GPIO_Init+0x22c>)
 8002444:	f001 fea4 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IHM_DIO4_Pin;
 8002448:	2304      	movs	r3, #4
 800244a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800244c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IHM_DIO4_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4826      	ldr	r0, [pc, #152]	; (80024f8 <MX_GPIO_Init+0x234>)
 800245e:	f001 fe97 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IHM_DIO3_Pin|IHM_DIO2_Pin|IHM_DIO1_Pin;
 8002462:	2338      	movs	r3, #56	; 0x38
 8002464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002466:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800246a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	4619      	mov	r1, r3
 8002476:	481d      	ldr	r0, [pc, #116]	; (80024ec <MX_GPIO_Init+0x228>)
 8002478:	f001 fe8a 	bl	8004190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	2006      	movs	r0, #6
 8002482:	f001 faeb 	bl	8003a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002486:	2006      	movs	r0, #6
 8002488:	f001 fb04 	bl	8003a94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 6, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2106      	movs	r1, #6
 8002490:	2007      	movs	r0, #7
 8002492:	f001 fae3 	bl	8003a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002496:	2007      	movs	r0, #7
 8002498:	f001 fafc 	bl	8003a94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 6, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	2106      	movs	r1, #6
 80024a0:	2008      	movs	r0, #8
 80024a2:	f001 fadb 	bl	8003a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80024a6:	2008      	movs	r0, #8
 80024a8:	f001 faf4 	bl	8003a94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 6, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2106      	movs	r1, #6
 80024b0:	2009      	movs	r0, #9
 80024b2:	f001 fad3 	bl	8003a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80024b6:	2009      	movs	r0, #9
 80024b8:	f001 faec 	bl	8003a94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2106      	movs	r1, #6
 80024c0:	200a      	movs	r0, #10
 80024c2:	f001 facb 	bl	8003a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80024c6:	200a      	movs	r0, #10
 80024c8:	f001 fae4 	bl	8003a94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2106      	movs	r1, #6
 80024d0:	2017      	movs	r0, #23
 80024d2:	f001 fac3 	bl	8003a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024d6:	2017      	movs	r0, #23
 80024d8:	f001 fadc 	bl	8003a94 <HAL_NVIC_EnableIRQ>

}
 80024dc:	bf00      	nop
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020400 	.word	0x40020400
 80024f0:	40020000 	.word	0x40020000
 80024f4:	40021c00 	.word	0x40021c00
 80024f8:	40020c00 	.word	0x40020c00

080024fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <MX_I2C1_Init+0x50>)
 8002502:	4a13      	ldr	r2, [pc, #76]	; (8002550 <MX_I2C1_Init+0x54>)
 8002504:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_I2C1_Init+0x50>)
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <MX_I2C1_Init+0x58>)
 800250a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <MX_I2C1_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_I2C1_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_I2C1_Init+0x50>)
 800251a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800251e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <MX_I2C1_Init+0x50>)
 8002522:	2200      	movs	r2, #0
 8002524:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_I2C1_Init+0x50>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <MX_I2C1_Init+0x50>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_I2C1_Init+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <MX_I2C1_Init+0x50>)
 800253a:	f002 f811 	bl	8004560 <HAL_I2C_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002544:	f000 f94c 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200056e4 	.word	0x200056e4
 8002550:	40005400 	.word	0x40005400
 8002554:	000186a0 	.word	0x000186a0

08002558 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_I2C_MspInit+0x84>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12c      	bne.n	80025d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002596:	f44f 7340 	mov.w	r3, #768	; 0x300
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259c:	2312      	movs	r3, #18
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025a8:	2304      	movs	r3, #4
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	480c      	ldr	r0, [pc, #48]	; (80025e4 <HAL_I2C_MspInit+0x8c>)
 80025b4:	f001 fdec 	bl	8004190 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 80025c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025c6:	6413      	str	r3, [r2, #64]	; 0x40
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_I2C_MspInit+0x88>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025d4:	bf00      	nop
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40005400 	.word	0x40005400
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020400 	.word	0x40020400

080025e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db12      	blt.n	8002620 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	490a      	ldr	r1, [pc, #40]	; (800262c <__NVIC_DisableIRQ+0x44>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	3320      	adds	r3, #32
 8002610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002614:	f3bf 8f4f 	dsb	sy
}
 8002618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800261a:	f3bf 8f6f 	isb	sy
}
 800261e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100

08002630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002634:	f000 fcf2 	bl	800301c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002638:	f000 f82c 	bl	8002694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800263c:	f7ff fe42 	bl	80022c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002640:	f7ff ff5c 	bl	80024fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002644:	f000 fc4e 	bl	8002ee4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002648:	f000 fa40 	bl	8002acc <MX_TIM1_Init>
  MX_TIM2_Init();
 800264c:	f000 fac2 	bl	8002bd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002650:	f000 fb18 	bl	8002c84 <MX_TIM3_Init>
  MX_DMA_Init();
 8002654:	f7ff fe16 	bl	8002284 <MX_DMA_Init>
  MX_ADC1_Init();
 8002658:	f7ff fd2e 	bl	80020b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= ( 1 << 0);
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <main+0x60>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <main+0x60>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8002668:	f006 fd3a 	bl	80090e0 <SEGGER_SYSVIEW_Conf>

  /* Init each components */
  API_HMI_START();
 800266c:	f7fe fc2e 	bl	8000ecc <API_HMI_START>
  API_BUZZER_START();
 8002670:	f7fe fac8 	bl	8000c04 <API_BUZZER_START>
  API_RECOVERY_START();
 8002674:	f7ff fca8 	bl	8001fc8 <API_RECOVERY_START>
  API_BATTERY_START();
 8002678:	f7fe fbaa 	bl	8000dd0 <API_BATTERY_START>
  API_PAYLOAD_START();
 800267c:	f7ff fa7c 	bl	8001b78 <API_PAYLOAD_START>
  API_APPLICATION_START();
 8002680:	f7fe f9b2 	bl	80009e8 <API_APPLICATION_START>
  //API_SENSORS_START();
  API_LEDS_START();
 8002684:	f7ff f8ae 	bl	80017e4 <API_LEDS_START>

  vTaskStartScheduler();
 8002688:	f004 ffae 	bl	80075e8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800268c:	e7fe      	b.n	800268c <main+0x5c>
 800268e:	bf00      	nop
 8002690:	e0001000 	.word	0xe0001000

08002694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b094      	sub	sp, #80	; 0x50
 8002698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269a:	f107 0320 	add.w	r3, r7, #32
 800269e:	2230      	movs	r2, #48	; 0x30
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f008 fbcc 	bl	800ae40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <SystemClock_Config+0xcc>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <SystemClock_Config+0xcc>)
 80026c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c6:	6413      	str	r3, [r2, #64]	; 0x40
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <SystemClock_Config+0xcc>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d4:	2300      	movs	r3, #0
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <SystemClock_Config+0xd0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a21      	ldr	r2, [pc, #132]	; (8002764 <SystemClock_Config+0xd0>)
 80026de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <SystemClock_Config+0xd0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026f0:	2302      	movs	r3, #2
 80026f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026f4:	2301      	movs	r3, #1
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026f8:	2310      	movs	r3, #16
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026fc:	2302      	movs	r3, #2
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002700:	2300      	movs	r3, #0
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002704:	2310      	movs	r3, #16
 8002706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002708:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800270c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800270e:	2304      	movs	r3, #4
 8002710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002712:	2304      	movs	r3, #4
 8002714:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002716:	f107 0320 	add.w	r3, r7, #32
 800271a:	4618      	mov	r0, r3
 800271c:	f002 f864 	bl	80047e8 <HAL_RCC_OscConfig>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002726:	f000 f85b 	bl	80027e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272a:	230f      	movs	r3, #15
 800272c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800272e:	2302      	movs	r3, #2
 8002730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	2102      	movs	r1, #2
 8002746:	4618      	mov	r0, r3
 8002748:	f002 fac6 	bl	8004cd8 <HAL_RCC_ClockConfig>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002752:	f000 f845 	bl	80027e0 <Error_Handler>
  }
}
 8002756:	bf00      	nop
 8002758:	3750      	adds	r7, #80	; 0x50
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40007000 	.word	0x40007000

08002768 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
	traceISR_ENTER();
 8002772:	f008 f801 	bl	800a778 <SEGGER_SYSVIEW_RecordEnterISR>
	switch (GPIO_Pin)
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	2b20      	cmp	r3, #32
 800277a:	d00d      	beq.n	8002798 <HAL_GPIO_EXTI_Callback+0x30>
 800277c:	2b20      	cmp	r3, #32
 800277e:	dc13      	bgt.n	80027a8 <HAL_GPIO_EXTI_Callback+0x40>
 8002780:	2b02      	cmp	r3, #2
 8002782:	d002      	beq.n	800278a <HAL_GPIO_EXTI_Callback+0x22>
 8002784:	2b10      	cmp	r3, #16
 8002786:	d00b      	beq.n	80027a0 <HAL_GPIO_EXTI_Callback+0x38>
	{
		case ACCELEROC_Pin:    API_APPLICATION_CALLBACK_ISR(E_APP_ISR_AEROC); 	  NVIC_DisableIRQ(EXTI15_10_IRQn); break;
		case IHM_DIO1_Pin:  API_APPLICATION_CALLBACK_ISR(E_APP_ISR_RECOV_OPEN);  break;
		case IHM_DIO2_Pin: API_APPLICATION_CALLBACK_ISR(E_APP_ISR_RECOV_CLOSE); break;
		default: break;
 8002788:	e00e      	b.n	80027a8 <HAL_GPIO_EXTI_Callback+0x40>
		case ACCELEROC_Pin:    API_APPLICATION_CALLBACK_ISR(E_APP_ISR_AEROC); 	  NVIC_DisableIRQ(EXTI15_10_IRQn); break;
 800278a:	2001      	movs	r0, #1
 800278c:	f7fe f9ac 	bl	8000ae8 <API_APPLICATION_CALLBACK_ISR>
 8002790:	2028      	movs	r0, #40	; 0x28
 8002792:	f7ff ff29 	bl	80025e8 <__NVIC_DisableIRQ>
 8002796:	e008      	b.n	80027aa <HAL_GPIO_EXTI_Callback+0x42>
		case IHM_DIO1_Pin:  API_APPLICATION_CALLBACK_ISR(E_APP_ISR_RECOV_OPEN);  break;
 8002798:	2002      	movs	r0, #2
 800279a:	f7fe f9a5 	bl	8000ae8 <API_APPLICATION_CALLBACK_ISR>
 800279e:	e004      	b.n	80027aa <HAL_GPIO_EXTI_Callback+0x42>
		case IHM_DIO2_Pin: API_APPLICATION_CALLBACK_ISR(E_APP_ISR_RECOV_CLOSE); break;
 80027a0:	2003      	movs	r0, #3
 80027a2:	f7fe f9a1 	bl	8000ae8 <API_APPLICATION_CALLBACK_ISR>
 80027a6:	e000      	b.n	80027aa <HAL_GPIO_EXTI_Callback+0x42>
		default: break;
 80027a8:	bf00      	nop
	}

	portYIELD_FROM_ISR(pdFALSE);
 80027aa:	f008 f827 	bl	800a7fc <SEGGER_SYSVIEW_RecordExitISR>
	traceISR_EXIT();
 80027ae:	f008 f825 	bl	800a7fc <SEGGER_SYSVIEW_RecordExitISR>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027ce:	f000 fc47 	bl	8003060 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40000c00 	.word	0x40000c00

080027e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027e4:	b672      	cpsid	i
}
 80027e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <Error_Handler+0x8>
	...

080027ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_MspInit+0x4c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	4a0f      	ldr	r2, [pc, #60]	; (8002838 <HAL_MspInit+0x4c>)
 80027fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002800:	6453      	str	r3, [r2, #68]	; 0x44
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <HAL_MspInit+0x4c>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_MspInit+0x4c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a08      	ldr	r2, [pc, #32]	; (8002838 <HAL_MspInit+0x4c>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_MspInit+0x4c>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800

0800283c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08c      	sub	sp, #48	; 0x30
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800284c:	2200      	movs	r2, #0
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	2032      	movs	r0, #50	; 0x32
 8002852:	f001 f903 	bl	8003a5c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002856:	2032      	movs	r0, #50	; 0x32
 8002858:	f001 f91c 	bl	8003a94 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <HAL_InitTick+0xa4>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <HAL_InitTick+0xa4>)
 8002866:	f043 0308 	orr.w	r3, r3, #8
 800286a:	6413      	str	r3, [r2, #64]	; 0x40
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_InitTick+0xa4>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002878:	f107 0210 	add.w	r2, r7, #16
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f002 fc24 	bl	80050d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002888:	f002 fbfa 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 800288c:	4603      	mov	r3, r0
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <HAL_InitTick+0xa8>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0c9b      	lsrs	r3, r3, #18
 800289c:	3b01      	subs	r3, #1
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_InitTick+0xac>)
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <HAL_InitTick+0xb0>)
 80028a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_InitTick+0xac>)
 80028a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028ac:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80028ae:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <HAL_InitTick+0xac>)
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_InitTick+0xac>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_InitTick+0xac>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80028c0:	4809      	ldr	r0, [pc, #36]	; (80028e8 <HAL_InitTick+0xac>)
 80028c2:	f002 fc37 	bl	8005134 <HAL_TIM_Base_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80028cc:	4806      	ldr	r0, [pc, #24]	; (80028e8 <HAL_InitTick+0xac>)
 80028ce:	f002 fc8b 	bl	80051e8 <HAL_TIM_Base_Start_IT>
 80028d2:	4603      	mov	r3, r0
 80028d4:	e000      	b.n	80028d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3730      	adds	r7, #48	; 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	431bde83 	.word	0x431bde83
 80028e8:	20005738 	.word	0x20005738
 80028ec:	40000c00 	.word	0x40000c00

080028f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <NMI_Handler+0x4>

080028f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <MemManage_Handler+0x4>

08002902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002906:	e7fe      	b.n	8002906 <BusFault_Handler+0x4>

08002908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800290c:	e7fe      	b.n	800290c <UsageFault_Handler+0x4>

0800290e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RST_FROM_HMI_Pin);
 8002920:	2001      	movs	r0, #1
 8002922:	f001 fe05 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}

0800292a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCELEROC_Pin);
 800292e:	2002      	movs	r0, #2
 8002930:	f001 fdfe 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}

08002938 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LED_VBAT_RECOV_Pin);
 800293c:	2004      	movs	r0, #4
 800293e:	f001 fdf7 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}

08002946 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LED_VBAT_PAYLOAD_Pin);
 800294a:	2008      	movs	r0, #8
 800294c:	f001 fdf0 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}

08002954 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M3_OPEN_Pin);
 8002958:	2010      	movs	r0, #16
 800295a:	f001 fde9 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}

08002962 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_CLOSE_Pin);
 8002966:	2020      	movs	r0, #32
 8002968:	f001 fde2 	bl	8004530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}

08002970 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <TIM5_IRQHandler+0x10>)
 8002976:	f002 fdfd 	bl	8005574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20005738 	.word	0x20005738

08002984 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <DMA2_Stream0_IRQHandler+0x10>)
 800298a:	f001 f997 	bl	8003cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20005684 	.word	0x20005684

08002998 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	e00a      	b.n	80029c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029aa:	f3af 8000 	nop.w
 80029ae:	4601      	mov	r1, r0
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	60ba      	str	r2, [r7, #8]
 80029b6:	b2ca      	uxtb	r2, r1
 80029b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	3301      	adds	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	dbf0      	blt.n	80029aa <_read+0x12>
	}

return len;
 80029c8:	687b      	ldr	r3, [r7, #4]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
	return -1;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029fa:	605a      	str	r2, [r3, #4]
	return 0;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <_isatty>:

int _isatty(int file)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
	return 1;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a44:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <_sbrk+0x5c>)
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <_sbrk+0x60>)
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <_sbrk+0x64>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <_sbrk+0x64>)
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <_sbrk+0x68>)
 8002a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <_sbrk+0x64>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d207      	bcs.n	8002a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a6c:	f008 f99a 	bl	800ada4 <__errno>
 8002a70:	4603      	mov	r3, r0
 8002a72:	220c      	movs	r2, #12
 8002a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	e009      	b.n	8002a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <_sbrk+0x64>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <_sbrk+0x64>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <_sbrk+0x64>)
 8002a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20020000 	.word	0x20020000
 8002a9c:	00000400 	.word	0x00000400
 8002aa0:	200000c4 	.word	0x200000c4
 8002aa4:	20005998 	.word	0x20005998

08002aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <SystemInit+0x20>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	4a05      	ldr	r2, [pc, #20]	; (8002ac8 <SystemInit+0x20>)
 8002ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b092      	sub	sp, #72	; 0x48
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
 8002aec:	615a      	str	r2, [r3, #20]
 8002aee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	2220      	movs	r2, #32
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f008 f9a2 	bl	800ae40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002afc:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002afe:	4a34      	ldr	r2, [pc, #208]	; (8002bd0 <MX_TIM1_Init+0x104>)
 8002b00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b02:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b08:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200-1;
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002b10:	f241 0267 	movw	r2, #4199	; 0x1067
 8002b14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b16:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b22:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b28:	4828      	ldr	r0, [pc, #160]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002b2a:	f002 fbbf 	bl	80052ac <HAL_TIM_PWM_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002b34:	f7ff fe54 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b44:	4619      	mov	r1, r3
 8002b46:	4821      	ldr	r0, [pc, #132]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002b48:	f003 f938 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002b52:	f7ff fe45 	bl	80027e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b56:	2360      	movs	r3, #96	; 0x60
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b62:	2300      	movs	r3, #0
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b76:	2204      	movs	r2, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4814      	ldr	r0, [pc, #80]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002b7c:	f002 fe02 	bl	8005784 <HAL_TIM_PWM_ConfigChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002b86:	f7ff fe2b 	bl	80027e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	4619      	mov	r1, r3
 8002bac:	4807      	ldr	r0, [pc, #28]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002bae:	f003 f973 	bl	8005e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002bb8:	f7ff fe12 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002bbc:	4803      	ldr	r0, [pc, #12]	; (8002bcc <MX_TIM1_Init+0x100>)
 8002bbe:	f000 f907 	bl	8002dd0 <HAL_TIM_MspPostInit>

}
 8002bc2:	bf00      	nop
 8002bc4:	3748      	adds	r7, #72	; 0x48
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200057c8 	.word	0x200057c8
 8002bd0:	40010000 	.word	0x40010000

08002bd4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bda:	f107 0320 	add.w	r3, r7, #32
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	611a      	str	r2, [r3, #16]
 8002bf2:	615a      	str	r2, [r3, #20]
 8002bf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <MX_TIM2_Init+0xac>)
 8002bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <MX_TIM2_Init+0xac>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <MX_TIM2_Init+0xac>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <MX_TIM2_Init+0xac>)
 8002c0c:	f241 0267 	movw	r2, #4199	; 0x1067
 8002c10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <MX_TIM2_Init+0xac>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <MX_TIM2_Init+0xac>)
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c1e:	4818      	ldr	r0, [pc, #96]	; (8002c80 <MX_TIM2_Init+0xac>)
 8002c20:	f002 fb44 	bl	80052ac <HAL_TIM_PWM_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002c2a:	f7ff fdd9 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c36:	f107 0320 	add.w	r3, r7, #32
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4810      	ldr	r0, [pc, #64]	; (8002c80 <MX_TIM2_Init+0xac>)
 8002c3e:	f003 f8bd 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002c48:	f7ff fdca 	bl	80027e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c4c:	2360      	movs	r3, #96	; 0x60
 8002c4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	2208      	movs	r2, #8
 8002c60:	4619      	mov	r1, r3
 8002c62:	4807      	ldr	r0, [pc, #28]	; (8002c80 <MX_TIM2_Init+0xac>)
 8002c64:	f002 fd8e 	bl	8005784 <HAL_TIM_PWM_ConfigChannel>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002c6e:	f7ff fdb7 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c72:	4803      	ldr	r0, [pc, #12]	; (8002c80 <MX_TIM2_Init+0xac>)
 8002c74:	f000 f8ac 	bl	8002dd0 <HAL_TIM_MspPostInit>

}
 8002c78:	bf00      	nop
 8002c7a:	3728      	adds	r7, #40	; 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20005810 	.word	0x20005810

08002c84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c8a:	f107 0320 	add.w	r3, r7, #32
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	615a      	str	r2, [r3, #20]
 8002ca4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ca6:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <MX_TIM3_Init+0xac>)
 8002ca8:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <MX_TIM3_Init+0xb0>)
 8002caa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002cac:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <MX_TIM3_Init+0xac>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <MX_TIM3_Init+0xac>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4200-1;
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <MX_TIM3_Init+0xac>)
 8002cba:	f241 0267 	movw	r2, #4199	; 0x1067
 8002cbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <MX_TIM3_Init+0xac>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <MX_TIM3_Init+0xac>)
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ccc:	4818      	ldr	r0, [pc, #96]	; (8002d30 <MX_TIM3_Init+0xac>)
 8002cce:	f002 faed 	bl	80052ac <HAL_TIM_PWM_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002cd8:	f7ff fd82 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ce4:	f107 0320 	add.w	r3, r7, #32
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4811      	ldr	r0, [pc, #68]	; (8002d30 <MX_TIM3_Init+0xac>)
 8002cec:	f003 f866 	bl	8005dbc <HAL_TIMEx_MasterConfigSynchronization>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002cf6:	f7ff fd73 	bl	80027e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cfa:	2360      	movs	r3, #96	; 0x60
 8002cfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4807      	ldr	r0, [pc, #28]	; (8002d30 <MX_TIM3_Init+0xac>)
 8002d12:	f002 fd37 	bl	8005784 <HAL_TIM_PWM_ConfigChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002d1c:	f7ff fd60 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d20:	4803      	ldr	r0, [pc, #12]	; (8002d30 <MX_TIM3_Init+0xac>)
 8002d22:	f000 f855 	bl	8002dd0 <HAL_TIM_MspPostInit>

}
 8002d26:	bf00      	nop
 8002d28:	3728      	adds	r7, #40	; 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20005780 	.word	0x20005780
 8002d34:	40000400 	.word	0x40000400

08002d38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d66:	e026      	b.n	8002db6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d10e      	bne.n	8002d90 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_TIM_PWM_MspInit+0x90>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]
}
 8002d8e:	e012      	b.n	8002db6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_TIM_PWM_MspInit+0x94>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10d      	bne.n	8002db6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_TIM_PWM_MspInit+0x90>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_TIM_PWM_MspInit+0x90>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_TIM_PWM_MspInit+0x90>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40000400 	.word	0x40000400

08002dd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a37      	ldr	r2, [pc, #220]	; (8002ecc <HAL_TIM_MspPostInit+0xfc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d11f      	bne.n	8002e32 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_TIM_MspPostInit+0x100>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a35      	ldr	r2, [pc, #212]	; (8002ed0 <HAL_TIM_MspPostInit+0x100>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <HAL_TIM_MspPostInit+0x100>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin;
 8002e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e20:	2301      	movs	r3, #1
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	4619      	mov	r1, r3
 8002e2a:	482a      	ldr	r0, [pc, #168]	; (8002ed4 <HAL_TIM_MspPostInit+0x104>)
 8002e2c:	f001 f9b0 	bl	8004190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e30:	e047      	b.n	8002ec2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3a:	d11f      	bne.n	8002e7c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <HAL_TIM_MspPostInit+0x100>)
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <HAL_TIM_MspPostInit+0x100>)
 8002e46:	f043 0302 	orr.w	r3, r3, #2
 8002e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <HAL_TIM_MspPostInit+0x100>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin;
 8002e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e66:	2303      	movs	r3, #3
 8002e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	4619      	mov	r1, r3
 8002e74:	4818      	ldr	r0, [pc, #96]	; (8002ed8 <HAL_TIM_MspPostInit+0x108>)
 8002e76:	f001 f98b 	bl	8004190 <HAL_GPIO_Init>
}
 8002e7a:	e022      	b.n	8002ec2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a16      	ldr	r2, [pc, #88]	; (8002edc <HAL_TIM_MspPostInit+0x10c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d11d      	bne.n	8002ec2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_TIM_MspPostInit+0x100>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a10      	ldr	r2, [pc, #64]	; (8002ed0 <HAL_TIM_MspPostInit+0x100>)
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_TIM_MspPostInit+0x100>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 8002ea2:	2340      	movs	r3, #64	; 0x40
 8002ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4808      	ldr	r0, [pc, #32]	; (8002ee0 <HAL_TIM_MspPostInit+0x110>)
 8002ebe:	f001 f967 	bl	8004190 <HAL_GPIO_Init>
}
 8002ec2:	bf00      	nop
 8002ec4:	3728      	adds	r7, #40	; 0x28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40020800 	.word	0x40020800

08002ee4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <MX_USART1_UART_Init+0x50>)
 8002eec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002f1c:	f003 f822 	bl	8005f64 <HAL_UART_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f26:	f7ff fc5b 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20005858 	.word	0x20005858
 8002f34:	40011000 	.word	0x40011000

08002f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <HAL_UART_MspInit+0x84>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d12b      	bne.n	8002fb2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_UART_MspInit+0x88>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <HAL_UART_MspInit+0x88>)
 8002f64:	f043 0310 	orr.w	r3, r3, #16
 8002f68:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_UART_MspInit+0x88>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_UART_MspInit+0x88>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <HAL_UART_MspInit+0x88>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_UART_MspInit+0x88>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = IHM_TX_Pin|IHM_RX_Pin;
 8002f92:	23c0      	movs	r3, #192	; 0xc0
 8002f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fa2:	2307      	movs	r3, #7
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa6:	f107 0314 	add.w	r3, r7, #20
 8002faa:	4619      	mov	r1, r3
 8002fac:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <HAL_UART_MspInit+0x8c>)
 8002fae:	f001 f8ef 	bl	8004190 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3728      	adds	r7, #40	; 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40011000 	.word	0x40011000
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40020400 	.word	0x40020400

08002fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fcc:	480d      	ldr	r0, [pc, #52]	; (8003004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fce:	490e      	ldr	r1, [pc, #56]	; (8003008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	; (800300c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd4:	e002      	b.n	8002fdc <LoopCopyDataInit>

08002fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fda:	3304      	adds	r3, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe0:	d3f9      	bcc.n	8002fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fe4:	4c0b      	ldr	r4, [pc, #44]	; (8003014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe8:	e001      	b.n	8002fee <LoopFillZerobss>

08002fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fec:	3204      	adds	r2, #4

08002fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff0:	d3fb      	bcc.n	8002fea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ff2:	f7ff fd59 	bl	8002aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ff6:	f007 fedb 	bl	800adb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffa:	f7ff fb19 	bl	8002630 <main>
  bx  lr    
 8002ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003008:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800300c:	0800be5c 	.word	0x0800be5c
  ldr r2, =_sbss
 8003010:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003014:	20005998 	.word	0x20005998

08003018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003018:	e7fe      	b.n	8003018 <ADC_IRQHandler>
	...

0800301c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_Init+0x40>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0d      	ldr	r2, [pc, #52]	; (800305c <HAL_Init+0x40>)
 8003026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800302a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_Init+0x40>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <HAL_Init+0x40>)
 8003032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <HAL_Init+0x40>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a07      	ldr	r2, [pc, #28]	; (800305c <HAL_Init+0x40>)
 800303e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003044:	2003      	movs	r0, #3
 8003046:	f000 fcfe 	bl	8003a46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800304a:	200f      	movs	r0, #15
 800304c:	f7ff fbf6 	bl	800283c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003050:	f7ff fbcc 	bl	80027ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023c00 	.word	0x40023c00

08003060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_IncTick+0x20>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_IncTick+0x24>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4413      	add	r3, r2
 8003070:	4a04      	ldr	r2, [pc, #16]	; (8003084 <HAL_IncTick+0x24>)
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000008 	.word	0x20000008
 8003084:	2000589c 	.word	0x2000589c

08003088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return uwTick;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_GetTick+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	2000589c 	.word	0x2000589c

080030a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a8:	f7ff ffee 	bl	8003088 <HAL_GetTick>
 80030ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d005      	beq.n	80030c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_Delay+0x44>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030c6:	bf00      	nop
 80030c8:	f7ff ffde 	bl	8003088 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d8f7      	bhi.n	80030c8 <HAL_Delay+0x28>
  {
  }
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000008 	.word	0x20000008

080030e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e033      	b.n	8003166 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff f844 	bl	8002194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d118      	bne.n	8003158 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800312e:	f023 0302 	bic.w	r3, r3, #2
 8003132:	f043 0202 	orr.w	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fa58 	bl	80035f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f023 0303 	bic.w	r3, r3, #3
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
 8003156:	e001      	b.n	800315c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_ADC_Start_DMA+0x1e>
 800318a:	2302      	movs	r3, #2
 800318c:	e0ce      	b.n	800332c <HAL_ADC_Start_DMA+0x1bc>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d018      	beq.n	80031d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031b4:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <HAL_ADC_Start_DMA+0x1c4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a5f      	ldr	r2, [pc, #380]	; (8003338 <HAL_ADC_Start_DMA+0x1c8>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0c9a      	lsrs	r2, r3, #18
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031c8:	e002      	b.n	80031d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f9      	bne.n	80031ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e4:	d107      	bne.n	80031f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b01      	cmp	r3, #1
 8003202:	f040 8086 	bne.w	8003312 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003230:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003244:	d106      	bne.n	8003254 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f023 0206 	bic.w	r2, r3, #6
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
 8003252:	e002      	b.n	800325a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003262:	4b36      	ldr	r3, [pc, #216]	; (800333c <HAL_ADC_Start_DMA+0x1cc>)
 8003264:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <HAL_ADC_Start_DMA+0x1d0>)
 800326c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	4a34      	ldr	r2, [pc, #208]	; (8003344 <HAL_ADC_Start_DMA+0x1d4>)
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	4a33      	ldr	r2, [pc, #204]	; (8003348 <HAL_ADC_Start_DMA+0x1d8>)
 800327c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003286:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003296:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	334c      	adds	r3, #76	; 0x4c
 80032b2:	4619      	mov	r1, r3
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f000 fca8 	bl	8003c0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10f      	bne.n	80032e8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d129      	bne.n	800332a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	e020      	b.n	800332a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a17      	ldr	r2, [pc, #92]	; (800334c <HAL_ADC_Start_DMA+0x1dc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d11b      	bne.n	800332a <HAL_ADC_Start_DMA+0x1ba>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d114      	bne.n	800332a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e00b      	b.n	800332a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0210 	orr.w	r2, r3, #16
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f043 0201 	orr.w	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000000 	.word	0x20000000
 8003338:	431bde83 	.word	0x431bde83
 800333c:	40012300 	.word	0x40012300
 8003340:	080037e9 	.word	0x080037e9
 8003344:	080038a3 	.word	0x080038a3
 8003348:	080038bf 	.word	0x080038bf
 800334c:	40012000 	.word	0x40012000

08003350 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x1c>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e113      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x244>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b09      	cmp	r3, #9
 80033b6:	d925      	bls.n	8003404 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68d9      	ldr	r1, [r3, #12]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	3b1e      	subs	r3, #30
 80033ce:	2207      	movs	r2, #7
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43da      	mvns	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	400a      	ands	r2, r1
 80033dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68d9      	ldr	r1, [r3, #12]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4403      	add	r3, r0
 80033f6:	3b1e      	subs	r3, #30
 80033f8:	409a      	lsls	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	e022      	b.n	800344a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6919      	ldr	r1, [r3, #16]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	2207      	movs	r2, #7
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	400a      	ands	r2, r1
 8003426:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6919      	ldr	r1, [r3, #16]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	4618      	mov	r0, r3
 800343a:	4603      	mov	r3, r0
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4403      	add	r3, r0
 8003440:	409a      	lsls	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b06      	cmp	r3, #6
 8003450:	d824      	bhi.n	800349c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	3b05      	subs	r3, #5
 8003464:	221f      	movs	r2, #31
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	400a      	ands	r2, r1
 8003472:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	4618      	mov	r0, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	3b05      	subs	r3, #5
 800348e:	fa00 f203 	lsl.w	r2, r0, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	635a      	str	r2, [r3, #52]	; 0x34
 800349a:	e04c      	b.n	8003536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d824      	bhi.n	80034ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	3b23      	subs	r3, #35	; 0x23
 80034b6:	221f      	movs	r2, #31
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43da      	mvns	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	400a      	ands	r2, r1
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	4618      	mov	r0, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	3b23      	subs	r3, #35	; 0x23
 80034e0:	fa00 f203 	lsl.w	r2, r0, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
 80034ec:	e023      	b.n	8003536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	3b41      	subs	r3, #65	; 0x41
 8003500:	221f      	movs	r2, #31
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43da      	mvns	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	400a      	ands	r2, r1
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	3b41      	subs	r3, #65	; 0x41
 800352a:	fa00 f203 	lsl.w	r2, r0, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003536:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_ADC_ConfigChannel+0x250>)
 8003538:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <HAL_ADC_ConfigChannel+0x254>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10f      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x1d8>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b12      	cmp	r3, #18
 800354a:	d10b      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <HAL_ADC_ConfigChannel+0x254>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d12b      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x23a>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <HAL_ADC_ConfigChannel+0x258>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <HAL_ADC_ConfigChannel+0x1f4>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b11      	cmp	r3, #17
 800357e:	d122      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <HAL_ADC_ConfigChannel+0x258>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d111      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_ADC_ConfigChannel+0x25c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a11      	ldr	r2, [pc, #68]	; (80035ec <HAL_ADC_ConfigChannel+0x260>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	0c9a      	lsrs	r2, r3, #18
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035b8:	e002      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	3b01      	subs	r3, #1
 80035be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f9      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40012300 	.word	0x40012300
 80035e0:	40012000 	.word	0x40012000
 80035e4:	10000012 	.word	0x10000012
 80035e8:	20000000 	.word	0x20000000
 80035ec:	431bde83 	.word	0x431bde83

080035f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035f8:	4b79      	ldr	r3, [pc, #484]	; (80037e0 <ADC_Init+0x1f0>)
 80035fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	021a      	lsls	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800366a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	4a58      	ldr	r2, [pc, #352]	; (80037e4 <ADC_Init+0x1f4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	e00f      	b.n	80036ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0202 	bic.w	r2, r2, #2
 80036fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	7e1b      	ldrb	r3, [r3, #24]
 8003708:	005a      	lsls	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01b      	beq.n	8003754 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800373a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	3b01      	subs	r3, #1
 8003748:	035a      	lsls	r2, r3, #13
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	e007      	b.n	8003764 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003762:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	3b01      	subs	r3, #1
 8003780:	051a      	lsls	r2, r3, #20
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037a6:	025a      	lsls	r2, r3, #9
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	029a      	lsls	r2, r3, #10
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	609a      	str	r2, [r3, #8]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40012300 	.word	0x40012300
 80037e4:	0f000001 	.word	0x0f000001

080037e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d13c      	bne.n	800387c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d12b      	bne.n	8003874 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003820:	2b00      	cmp	r3, #0
 8003822:	d127      	bne.n	8003874 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800382e:	2b00      	cmp	r3, #0
 8003830:	d006      	beq.n	8003840 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800383c:	2b00      	cmp	r3, #0
 800383e:	d119      	bne.n	8003874 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0220 	bic.w	r2, r2, #32
 800384e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f7ff fd6b 	bl	8003350 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800387a:	e00e      	b.n	800389a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff fd75 	bl	8003378 <HAL_ADC_ErrorCallback>
}
 800388e:	e004      	b.n	800389a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff fd57 	bl	8003364 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f043 0204 	orr.w	r2, r3, #4
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7ff fd4a 	bl	8003378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <__NVIC_SetPriorityGrouping>:
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <__NVIC_SetPriorityGrouping+0x44>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003908:	4013      	ands	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800391e:	4a04      	ldr	r2, [pc, #16]	; (8003930 <__NVIC_SetPriorityGrouping+0x44>)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	60d3      	str	r3, [r2, #12]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_GetPriorityGrouping>:
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <__NVIC_GetPriorityGrouping+0x18>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f003 0307 	and.w	r3, r3, #7
}
 8003942:	4618      	mov	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <__NVIC_EnableIRQ>:
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	2b00      	cmp	r3, #0
 8003960:	db0b      	blt.n	800397a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	f003 021f 	and.w	r2, r3, #31
 8003968:	4907      	ldr	r1, [pc, #28]	; (8003988 <__NVIC_EnableIRQ+0x38>)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2001      	movs	r0, #1
 8003972:	fa00 f202 	lsl.w	r2, r0, r2
 8003976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	e000e100 	.word	0xe000e100

0800398c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	2b00      	cmp	r3, #0
 800399e:	db0a      	blt.n	80039b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	490c      	ldr	r1, [pc, #48]	; (80039d8 <__NVIC_SetPriority+0x4c>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	0112      	lsls	r2, r2, #4
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	440b      	add	r3, r1
 80039b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b4:	e00a      	b.n	80039cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4908      	ldr	r1, [pc, #32]	; (80039dc <__NVIC_SetPriority+0x50>)
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	3b04      	subs	r3, #4
 80039c4:	0112      	lsls	r2, r2, #4
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	440b      	add	r3, r1
 80039ca:	761a      	strb	r2, [r3, #24]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000e100 	.word	0xe000e100
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f1c3 0307 	rsb	r3, r3, #7
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	bf28      	it	cs
 80039fe:	2304      	movcs	r3, #4
 8003a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d902      	bls.n	8003a10 <NVIC_EncodePriority+0x30>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3b03      	subs	r3, #3
 8003a0e:	e000      	b.n	8003a12 <NVIC_EncodePriority+0x32>
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	401a      	ands	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a28:	f04f 31ff 	mov.w	r1, #4294967295
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	43d9      	mvns	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	4313      	orrs	r3, r2
         );
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	; 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff ff4c 	bl	80038ec <__NVIC_SetPriorityGrouping>
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a6e:	f7ff ff61 	bl	8003934 <__NVIC_GetPriorityGrouping>
 8003a72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	6978      	ldr	r0, [r7, #20]
 8003a7a:	f7ff ffb1 	bl	80039e0 <NVIC_EncodePriority>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff ff80 	bl	800398c <__NVIC_SetPriority>
}
 8003a8c:	bf00      	nop
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ff54 	bl	8003950 <__NVIC_EnableIRQ>
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003abc:	f7ff fae4 	bl	8003088 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e099      	b.n	8003c00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aec:	e00f      	b.n	8003b0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aee:	f7ff facb 	bl	8003088 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d908      	bls.n	8003b0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2203      	movs	r2, #3
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e078      	b.n	8003c00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e8      	bne.n	8003aee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <HAL_DMA_Init+0x158>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d107      	bne.n	8003b78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	4313      	orrs	r3, r2
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0307 	bic.w	r3, r3, #7
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d117      	bne.n	8003bd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa6f 	bl	8004098 <DMA_CheckFifoParam>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2240      	movs	r2, #64	; 0x40
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e016      	b.n	8003c00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fa26 	bl	800402c <DMA_CalcBaseAndBitshift>
 8003be0:	4603      	mov	r3, r0
 8003be2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	223f      	movs	r2, #63	; 0x3f
 8003bea:	409a      	lsls	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	f010803f 	.word	0xf010803f

08003c0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_DMA_Start_IT+0x26>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e040      	b.n	8003cb4 <HAL_DMA_Start_IT+0xa8>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d12f      	bne.n	8003ca6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f9b8 	bl	8003fd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c64:	223f      	movs	r2, #63	; 0x3f
 8003c66:	409a      	lsls	r2, r3
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0216 	orr.w	r2, r2, #22
 8003c7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0208 	orr.w	r2, r2, #8
 8003c92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e005      	b.n	8003cb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cc8:	4b92      	ldr	r3, [pc, #584]	; (8003f14 <HAL_DMA_IRQHandler+0x258>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a92      	ldr	r2, [pc, #584]	; (8003f18 <HAL_DMA_IRQHandler+0x25c>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0a9b      	lsrs	r3, r3, #10
 8003cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01a      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d013      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0204 	bic.w	r2, r2, #4
 8003d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	2208      	movs	r2, #8
 8003d16:	409a      	lsls	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	f043 0201 	orr.w	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d012      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	2204      	movs	r2, #4
 8003d64:	409a      	lsls	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d012      	beq.n	8003d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	2204      	movs	r2, #4
 8003d82:	409a      	lsls	r2, r3
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	f043 0204 	orr.w	r2, r3, #4
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	2210      	movs	r2, #16
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d043      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d03c      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	2210      	movs	r2, #16
 8003db8:	409a      	lsls	r2, r3
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d018      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d108      	bne.n	8003dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d024      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
 8003dea:	e01f      	b.n	8003e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01b      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
 8003dfc:	e016      	b.n	8003e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d107      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0208 	bic.w	r2, r2, #8
 8003e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	2220      	movs	r2, #32
 8003e32:	409a      	lsls	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 808e 	beq.w	8003f5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8086 	beq.w	8003f5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e52:	2220      	movs	r2, #32
 8003e54:	409a      	lsls	r2, r3
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d136      	bne.n	8003ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0216 	bic.w	r2, r2, #22
 8003e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d103      	bne.n	8003e96 <HAL_DMA_IRQHandler+0x1da>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0208 	bic.w	r2, r2, #8
 8003ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	223f      	movs	r2, #63	; 0x3f
 8003eac:	409a      	lsls	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d07d      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	4798      	blx	r3
        }
        return;
 8003ed2:	e078      	b.n	8003fc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01c      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d108      	bne.n	8003f02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d030      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	4798      	blx	r3
 8003f00:	e02b      	b.n	8003f5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d027      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4798      	blx	r3
 8003f12:	e022      	b.n	8003f5a <HAL_DMA_IRQHandler+0x29e>
 8003f14:	20000000 	.word	0x20000000
 8003f18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0210 	bic.w	r2, r2, #16
 8003f38:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d032      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d022      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2205      	movs	r2, #5
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d307      	bcc.n	8003fa2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f2      	bne.n	8003f86 <HAL_DMA_IRQHandler+0x2ca>
 8003fa0:	e000      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fa2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
 8003fc4:	e000      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003fc6:	bf00      	nop
    }
  }
}
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop

08003fd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d108      	bne.n	8004010 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800400e:	e007      	b.n	8004020 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	60da      	str	r2, [r3, #12]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	3b10      	subs	r3, #16
 800403c:	4a14      	ldr	r2, [pc, #80]	; (8004090 <DMA_CalcBaseAndBitshift+0x64>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <DMA_CalcBaseAndBitshift+0x68>)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d909      	bls.n	800406e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	1d1a      	adds	r2, r3, #4
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	659a      	str	r2, [r3, #88]	; 0x58
 800406c:	e007      	b.n	800407e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	aaaaaaab 	.word	0xaaaaaaab
 8004094:	0800bdcc 	.word	0x0800bdcc

08004098 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d11f      	bne.n	80040f2 <DMA_CheckFifoParam+0x5a>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d856      	bhi.n	8004166 <DMA_CheckFifoParam+0xce>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <DMA_CheckFifoParam+0x28>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040e3 	.word	0x080040e3
 80040c8:	080040d1 	.word	0x080040d1
 80040cc:	08004167 	.word	0x08004167
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d046      	beq.n	800416a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e0:	e043      	b.n	800416a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ea:	d140      	bne.n	800416e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f0:	e03d      	b.n	800416e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fa:	d121      	bne.n	8004140 <DMA_CheckFifoParam+0xa8>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d837      	bhi.n	8004172 <DMA_CheckFifoParam+0xda>
 8004102:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <DMA_CheckFifoParam+0x70>)
 8004104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004108:	08004119 	.word	0x08004119
 800410c:	0800411f 	.word	0x0800411f
 8004110:	08004119 	.word	0x08004119
 8004114:	08004131 	.word	0x08004131
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      break;
 800411c:	e030      	b.n	8004180 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d025      	beq.n	8004176 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412e:	e022      	b.n	8004176 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004138:	d11f      	bne.n	800417a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800413e:	e01c      	b.n	800417a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d903      	bls.n	800414e <DMA_CheckFifoParam+0xb6>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d003      	beq.n	8004154 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800414c:	e018      	b.n	8004180 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
      break;
 8004152:	e015      	b.n	8004180 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00e      	beq.n	800417e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      break;
 8004164:	e00b      	b.n	800417e <DMA_CheckFifoParam+0xe6>
      break;
 8004166:	bf00      	nop
 8004168:	e00a      	b.n	8004180 <DMA_CheckFifoParam+0xe8>
      break;
 800416a:	bf00      	nop
 800416c:	e008      	b.n	8004180 <DMA_CheckFifoParam+0xe8>
      break;
 800416e:	bf00      	nop
 8004170:	e006      	b.n	8004180 <DMA_CheckFifoParam+0xe8>
      break;
 8004172:	bf00      	nop
 8004174:	e004      	b.n	8004180 <DMA_CheckFifoParam+0xe8>
      break;
 8004176:	bf00      	nop
 8004178:	e002      	b.n	8004180 <DMA_CheckFifoParam+0xe8>
      break;   
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <DMA_CheckFifoParam+0xe8>
      break;
 800417e:	bf00      	nop
    }
  } 
  
  return status; 
 8004180:	7bfb      	ldrb	r3, [r7, #15]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop

08004190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e159      	b.n	8004460 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041ac:	2201      	movs	r2, #1
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	f040 8148 	bne.w	800445a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d005      	beq.n	80041e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d130      	bne.n	8004244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	2203      	movs	r2, #3
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004218:	2201      	movs	r2, #1
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 0201 	and.w	r2, r3, #1
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	2b03      	cmp	r3, #3
 800424e:	d017      	beq.n	8004280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	2203      	movs	r2, #3
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d123      	bne.n	80042d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	08da      	lsrs	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3208      	adds	r2, #8
 8004294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	220f      	movs	r2, #15
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	08da      	lsrs	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3208      	adds	r2, #8
 80042ce:	69b9      	ldr	r1, [r7, #24]
 80042d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	2203      	movs	r2, #3
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0203 	and.w	r2, r3, #3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80a2 	beq.w	800445a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	4b57      	ldr	r3, [pc, #348]	; (8004478 <HAL_GPIO_Init+0x2e8>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	4a56      	ldr	r2, [pc, #344]	; (8004478 <HAL_GPIO_Init+0x2e8>)
 8004320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004324:	6453      	str	r3, [r2, #68]	; 0x44
 8004326:	4b54      	ldr	r3, [pc, #336]	; (8004478 <HAL_GPIO_Init+0x2e8>)
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004332:	4a52      	ldr	r2, [pc, #328]	; (800447c <HAL_GPIO_Init+0x2ec>)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	089b      	lsrs	r3, r3, #2
 8004338:	3302      	adds	r3, #2
 800433a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	220f      	movs	r2, #15
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a49      	ldr	r2, [pc, #292]	; (8004480 <HAL_GPIO_Init+0x2f0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d019      	beq.n	8004392 <HAL_GPIO_Init+0x202>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a48      	ldr	r2, [pc, #288]	; (8004484 <HAL_GPIO_Init+0x2f4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_GPIO_Init+0x1fe>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a47      	ldr	r2, [pc, #284]	; (8004488 <HAL_GPIO_Init+0x2f8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00d      	beq.n	800438a <HAL_GPIO_Init+0x1fa>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a46      	ldr	r2, [pc, #280]	; (800448c <HAL_GPIO_Init+0x2fc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <HAL_GPIO_Init+0x1f6>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a45      	ldr	r2, [pc, #276]	; (8004490 <HAL_GPIO_Init+0x300>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <HAL_GPIO_Init+0x1f2>
 800437e:	2304      	movs	r3, #4
 8004380:	e008      	b.n	8004394 <HAL_GPIO_Init+0x204>
 8004382:	2307      	movs	r3, #7
 8004384:	e006      	b.n	8004394 <HAL_GPIO_Init+0x204>
 8004386:	2303      	movs	r3, #3
 8004388:	e004      	b.n	8004394 <HAL_GPIO_Init+0x204>
 800438a:	2302      	movs	r3, #2
 800438c:	e002      	b.n	8004394 <HAL_GPIO_Init+0x204>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_GPIO_Init+0x204>
 8004392:	2300      	movs	r3, #0
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	f002 0203 	and.w	r2, r2, #3
 800439a:	0092      	lsls	r2, r2, #2
 800439c:	4093      	lsls	r3, r2
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043a4:	4935      	ldr	r1, [pc, #212]	; (800447c <HAL_GPIO_Init+0x2ec>)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	089b      	lsrs	r3, r3, #2
 80043aa:	3302      	adds	r3, #2
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043b2:	4b38      	ldr	r3, [pc, #224]	; (8004494 <HAL_GPIO_Init+0x304>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	43db      	mvns	r3, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043d6:	4a2f      	ldr	r2, [pc, #188]	; (8004494 <HAL_GPIO_Init+0x304>)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043dc:	4b2d      	ldr	r3, [pc, #180]	; (8004494 <HAL_GPIO_Init+0x304>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004400:	4a24      	ldr	r2, [pc, #144]	; (8004494 <HAL_GPIO_Init+0x304>)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004406:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_GPIO_Init+0x304>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800442a:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <HAL_GPIO_Init+0x304>)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004430:	4b18      	ldr	r3, [pc, #96]	; (8004494 <HAL_GPIO_Init+0x304>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004454:	4a0f      	ldr	r2, [pc, #60]	; (8004494 <HAL_GPIO_Init+0x304>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3301      	adds	r3, #1
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b0f      	cmp	r3, #15
 8004464:	f67f aea2 	bls.w	80041ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	3724      	adds	r7, #36	; 0x24
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	40013800 	.word	0x40013800
 8004480:	40020000 	.word	0x40020000
 8004484:	40020400 	.word	0x40020400
 8004488:	40020800 	.word	0x40020800
 800448c:	40020c00 	.word	0x40020c00
 8004490:	40021000 	.word	0x40021000
 8004494:	40013c00 	.word	0x40013c00

08004498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	887b      	ldrh	r3, [r7, #2]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e001      	b.n	80044ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
 80044d4:	4613      	mov	r3, r2
 80044d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d8:	787b      	ldrb	r3, [r7, #1]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044de:	887a      	ldrh	r2, [r7, #2]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044e4:	e003      	b.n	80044ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044e6:	887b      	ldrh	r3, [r7, #2]
 80044e8:	041a      	lsls	r2, r3, #16
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	619a      	str	r2, [r3, #24]
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800450c:	887a      	ldrh	r2, [r7, #2]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4013      	ands	r3, r2
 8004512:	041a      	lsls	r2, r3, #16
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	43d9      	mvns	r1, r3
 8004518:	887b      	ldrh	r3, [r7, #2]
 800451a:	400b      	ands	r3, r1
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	619a      	str	r2, [r3, #24]
}
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	4013      	ands	r3, r2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004546:	4a05      	ldr	r2, [pc, #20]	; (800455c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fe f90a 	bl	8002768 <HAL_GPIO_EXTI_Callback>
  }
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40013c00 	.word	0x40013c00

08004560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e12b      	b.n	80047ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fd ffe6 	bl	8002558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2224      	movs	r2, #36	; 0x24
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045c4:	f000 fd5c 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 80045c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4a81      	ldr	r2, [pc, #516]	; (80047d4 <HAL_I2C_Init+0x274>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d807      	bhi.n	80045e4 <HAL_I2C_Init+0x84>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a80      	ldr	r2, [pc, #512]	; (80047d8 <HAL_I2C_Init+0x278>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	bf94      	ite	ls
 80045dc:	2301      	movls	r3, #1
 80045de:	2300      	movhi	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	e006      	b.n	80045f2 <HAL_I2C_Init+0x92>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a7d      	ldr	r2, [pc, #500]	; (80047dc <HAL_I2C_Init+0x27c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	bf94      	ite	ls
 80045ec:	2301      	movls	r3, #1
 80045ee:	2300      	movhi	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0e7      	b.n	80047ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a78      	ldr	r2, [pc, #480]	; (80047e0 <HAL_I2C_Init+0x280>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	0c9b      	lsrs	r3, r3, #18
 8004604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	4a6a      	ldr	r2, [pc, #424]	; (80047d4 <HAL_I2C_Init+0x274>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d802      	bhi.n	8004634 <HAL_I2C_Init+0xd4>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3301      	adds	r3, #1
 8004632:	e009      	b.n	8004648 <HAL_I2C_Init+0xe8>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800463a:	fb02 f303 	mul.w	r3, r2, r3
 800463e:	4a69      	ldr	r2, [pc, #420]	; (80047e4 <HAL_I2C_Init+0x284>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	099b      	lsrs	r3, r3, #6
 8004646:	3301      	adds	r3, #1
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	430b      	orrs	r3, r1
 800464e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800465a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	495c      	ldr	r1, [pc, #368]	; (80047d4 <HAL_I2C_Init+0x274>)
 8004664:	428b      	cmp	r3, r1
 8004666:	d819      	bhi.n	800469c <HAL_I2C_Init+0x13c>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1e59      	subs	r1, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	fbb1 f3f3 	udiv	r3, r1, r3
 8004676:	1c59      	adds	r1, r3, #1
 8004678:	f640 73fc 	movw	r3, #4092	; 0xffc
 800467c:	400b      	ands	r3, r1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_I2C_Init+0x138>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1e59      	subs	r1, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004690:	3301      	adds	r3, #1
 8004692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004696:	e051      	b.n	800473c <HAL_I2C_Init+0x1dc>
 8004698:	2304      	movs	r3, #4
 800469a:	e04f      	b.n	800473c <HAL_I2C_Init+0x1dc>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d111      	bne.n	80046c8 <HAL_I2C_Init+0x168>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1e58      	subs	r0, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6859      	ldr	r1, [r3, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	440b      	add	r3, r1
 80046b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b6:	3301      	adds	r3, #1
 80046b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e012      	b.n	80046ee <HAL_I2C_Init+0x18e>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1e58      	subs	r0, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6859      	ldr	r1, [r3, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	0099      	lsls	r1, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	fbb0 f3f3 	udiv	r3, r0, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Init+0x196>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e022      	b.n	800473c <HAL_I2C_Init+0x1dc>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10e      	bne.n	800471c <HAL_I2C_Init+0x1bc>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1e58      	subs	r0, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	460b      	mov	r3, r1
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	440b      	add	r3, r1
 800470c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004710:	3301      	adds	r3, #1
 8004712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471a:	e00f      	b.n	800473c <HAL_I2C_Init+0x1dc>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1e58      	subs	r0, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	0099      	lsls	r1, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004732:	3301      	adds	r3, #1
 8004734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	6809      	ldr	r1, [r1, #0]
 8004740:	4313      	orrs	r3, r2
 8004742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800476a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6911      	ldr	r1, [r2, #16]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68d2      	ldr	r2, [r2, #12]
 8004776:	4311      	orrs	r1, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	430b      	orrs	r3, r1
 800477e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	000186a0 	.word	0x000186a0
 80047d8:	001e847f 	.word	0x001e847f
 80047dc:	003d08ff 	.word	0x003d08ff
 80047e0:	431bde83 	.word	0x431bde83
 80047e4:	10624dd3 	.word	0x10624dd3

080047e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e264      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d075      	beq.n	80048f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004806:	4ba3      	ldr	r3, [pc, #652]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 030c 	and.w	r3, r3, #12
 800480e:	2b04      	cmp	r3, #4
 8004810:	d00c      	beq.n	800482c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004812:	4ba0      	ldr	r3, [pc, #640]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800481a:	2b08      	cmp	r3, #8
 800481c:	d112      	bne.n	8004844 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481e:	4b9d      	ldr	r3, [pc, #628]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800482a:	d10b      	bne.n	8004844 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800482c:	4b99      	ldr	r3, [pc, #612]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d05b      	beq.n	80048f0 <HAL_RCC_OscConfig+0x108>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d157      	bne.n	80048f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e23f      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484c:	d106      	bne.n	800485c <HAL_RCC_OscConfig+0x74>
 800484e:	4b91      	ldr	r3, [pc, #580]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a90      	ldr	r2, [pc, #576]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e01d      	b.n	8004898 <HAL_RCC_OscConfig+0xb0>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004864:	d10c      	bne.n	8004880 <HAL_RCC_OscConfig+0x98>
 8004866:	4b8b      	ldr	r3, [pc, #556]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a8a      	ldr	r2, [pc, #552]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 800486c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4b88      	ldr	r3, [pc, #544]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a87      	ldr	r2, [pc, #540]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e00b      	b.n	8004898 <HAL_RCC_OscConfig+0xb0>
 8004880:	4b84      	ldr	r3, [pc, #528]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a83      	ldr	r2, [pc, #524]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	4b81      	ldr	r3, [pc, #516]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a80      	ldr	r2, [pc, #512]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d013      	beq.n	80048c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fe fbf2 	bl	8003088 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fe fbee 	bl	8003088 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e204      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ba:	4b76      	ldr	r3, [pc, #472]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0xc0>
 80048c6:	e014      	b.n	80048f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c8:	f7fe fbde 	bl	8003088 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048d0:	f7fe fbda 	bl	8003088 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b64      	cmp	r3, #100	; 0x64
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e1f0      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e2:	4b6c      	ldr	r3, [pc, #432]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0xe8>
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d063      	beq.n	80049c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048fe:	4b65      	ldr	r3, [pc, #404]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00b      	beq.n	8004922 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800490a:	4b62      	ldr	r3, [pc, #392]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004912:	2b08      	cmp	r3, #8
 8004914:	d11c      	bne.n	8004950 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004916:	4b5f      	ldr	r3, [pc, #380]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d116      	bne.n	8004950 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004922:	4b5c      	ldr	r3, [pc, #368]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_RCC_OscConfig+0x152>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d001      	beq.n	800493a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e1c4      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493a:	4b56      	ldr	r3, [pc, #344]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	4952      	ldr	r1, [pc, #328]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 800494a:	4313      	orrs	r3, r2
 800494c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494e:	e03a      	b.n	80049c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d020      	beq.n	800499a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004958:	4b4f      	ldr	r3, [pc, #316]	; (8004a98 <HAL_RCC_OscConfig+0x2b0>)
 800495a:	2201      	movs	r2, #1
 800495c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495e:	f7fe fb93 	bl	8003088 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004966:	f7fe fb8f 	bl	8003088 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e1a5      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004978:	4b46      	ldr	r3, [pc, #280]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004984:	4b43      	ldr	r3, [pc, #268]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	4940      	ldr	r1, [pc, #256]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]
 8004998:	e015      	b.n	80049c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800499a:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <HAL_RCC_OscConfig+0x2b0>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fe fb72 	bl	8003088 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a8:	f7fe fb6e 	bl	8003088 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e184      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ba:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d030      	beq.n	8004a34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049da:	4b30      	ldr	r3, [pc, #192]	; (8004a9c <HAL_RCC_OscConfig+0x2b4>)
 80049dc:	2201      	movs	r2, #1
 80049de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e0:	f7fe fb52 	bl	8003088 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e8:	f7fe fb4e 	bl	8003088 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e164      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049fa:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x200>
 8004a06:	e015      	b.n	8004a34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a08:	4b24      	ldr	r3, [pc, #144]	; (8004a9c <HAL_RCC_OscConfig+0x2b4>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a0e:	f7fe fb3b 	bl	8003088 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a16:	f7fe fb37 	bl	8003088 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e14d      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a28:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80a0 	beq.w	8004b82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	4a0e      	ldr	r2, [pc, #56]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a60:	6413      	str	r3, [r2, #64]	; 0x40
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCC_OscConfig+0x2b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d121      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <HAL_RCC_OscConfig+0x2b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a07      	ldr	r2, [pc, #28]	; (8004aa0 <HAL_RCC_OscConfig+0x2b8>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8a:	f7fe fafd 	bl	8003088 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a90:	e011      	b.n	8004ab6 <HAL_RCC_OscConfig+0x2ce>
 8004a92:	bf00      	nop
 8004a94:	40023800 	.word	0x40023800
 8004a98:	42470000 	.word	0x42470000
 8004a9c:	42470e80 	.word	0x42470e80
 8004aa0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa4:	f7fe faf0 	bl	8003088 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e106      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab6:	4b85      	ldr	r3, [pc, #532]	; (8004ccc <HAL_RCC_OscConfig+0x4e4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d106      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x2f0>
 8004aca:	4b81      	ldr	r3, [pc, #516]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	4a80      	ldr	r2, [pc, #512]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad6:	e01c      	b.n	8004b12 <HAL_RCC_OscConfig+0x32a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	d10c      	bne.n	8004afa <HAL_RCC_OscConfig+0x312>
 8004ae0:	4b7b      	ldr	r3, [pc, #492]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	4a7a      	ldr	r2, [pc, #488]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004ae6:	f043 0304 	orr.w	r3, r3, #4
 8004aea:	6713      	str	r3, [r2, #112]	; 0x70
 8004aec:	4b78      	ldr	r3, [pc, #480]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	4a77      	ldr	r2, [pc, #476]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	6713      	str	r3, [r2, #112]	; 0x70
 8004af8:	e00b      	b.n	8004b12 <HAL_RCC_OscConfig+0x32a>
 8004afa:	4b75      	ldr	r3, [pc, #468]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	4a74      	ldr	r2, [pc, #464]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	6713      	str	r3, [r2, #112]	; 0x70
 8004b06:	4b72      	ldr	r3, [pc, #456]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a71      	ldr	r2, [pc, #452]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d015      	beq.n	8004b46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1a:	f7fe fab5 	bl	8003088 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b20:	e00a      	b.n	8004b38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b22:	f7fe fab1 	bl	8003088 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e0c5      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b38:	4b65      	ldr	r3, [pc, #404]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ee      	beq.n	8004b22 <HAL_RCC_OscConfig+0x33a>
 8004b44:	e014      	b.n	8004b70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b46:	f7fe fa9f 	bl	8003088 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b4c:	e00a      	b.n	8004b64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b4e:	f7fe fa9b 	bl	8003088 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e0af      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b64:	4b5a      	ldr	r3, [pc, #360]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ee      	bne.n	8004b4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d105      	bne.n	8004b82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b76:	4b56      	ldr	r3, [pc, #344]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	4a55      	ldr	r2, [pc, #340]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 809b 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b8c:	4b50      	ldr	r3, [pc, #320]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 030c 	and.w	r3, r3, #12
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d05c      	beq.n	8004c52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d141      	bne.n	8004c24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba0:	4b4c      	ldr	r3, [pc, #304]	; (8004cd4 <HAL_RCC_OscConfig+0x4ec>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba6:	f7fe fa6f 	bl	8003088 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bae:	f7fe fa6b 	bl	8003088 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e081      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc0:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f0      	bne.n	8004bae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	019b      	lsls	r3, r3, #6
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	3b01      	subs	r3, #1
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	4937      	ldr	r1, [pc, #220]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf6:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <HAL_RCC_OscConfig+0x4ec>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fe fa44 	bl	8003088 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fe fa40 	bl	8003088 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e056      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c16:	4b2e      	ldr	r3, [pc, #184]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x41c>
 8004c22:	e04e      	b.n	8004cc2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c24:	4b2b      	ldr	r3, [pc, #172]	; (8004cd4 <HAL_RCC_OscConfig+0x4ec>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2a:	f7fe fa2d 	bl	8003088 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fe fa29 	bl	8003088 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e03f      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c44:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f0      	bne.n	8004c32 <HAL_RCC_OscConfig+0x44a>
 8004c50:	e037      	b.n	8004cc2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e032      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <HAL_RCC_OscConfig+0x4e8>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d028      	beq.n	8004cbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d121      	bne.n	8004cbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d11a      	bne.n	8004cbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c8e:	4013      	ands	r3, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c94:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d111      	bne.n	8004cbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40007000 	.word	0x40007000
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	42470060 	.word	0x42470060

08004cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0cc      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cec:	4b68      	ldr	r3, [pc, #416]	; (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d90c      	bls.n	8004d14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b65      	ldr	r3, [pc, #404]	; (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b63      	ldr	r3, [pc, #396]	; (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0b8      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d020      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d2c:	4b59      	ldr	r3, [pc, #356]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a58      	ldr	r2, [pc, #352]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d44:	4b53      	ldr	r3, [pc, #332]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	4a52      	ldr	r2, [pc, #328]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d50:	4b50      	ldr	r3, [pc, #320]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	494d      	ldr	r1, [pc, #308]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d044      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	4b47      	ldr	r3, [pc, #284]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d119      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e07f      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d107      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d96:	4b3f      	ldr	r3, [pc, #252]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e06f      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da6:	4b3b      	ldr	r3, [pc, #236]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e067      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004db6:	4b37      	ldr	r3, [pc, #220]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f023 0203 	bic.w	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4934      	ldr	r1, [pc, #208]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc8:	f7fe f95e 	bl	8003088 <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd0:	f7fe f95a 	bl	8003088 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e04f      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de6:	4b2b      	ldr	r3, [pc, #172]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 020c 	and.w	r2, r3, #12
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d1eb      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df8:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d20c      	bcs.n	8004e20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e06:	4b22      	ldr	r3, [pc, #136]	; (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0e:	4b20      	ldr	r3, [pc, #128]	; (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e032      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e2c:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4916      	ldr	r1, [pc, #88]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e4a:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	490e      	ldr	r1, [pc, #56]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e5e:	f000 f821 	bl	8004ea4 <HAL_RCC_GetSysClockFreq>
 8004e62:	4602      	mov	r2, r0
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	490a      	ldr	r1, [pc, #40]	; (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004e70:	5ccb      	ldrb	r3, [r1, r3]
 8004e72:	fa22 f303 	lsr.w	r3, r2, r3
 8004e76:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e7a:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fd fcdc 	bl	800283c <HAL_InitTick>

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40023c00 	.word	0x40023c00
 8004e94:	40023800 	.word	0x40023800
 8004e98:	0800bdb4 	.word	0x0800bdb4
 8004e9c:	20000000 	.word	0x20000000
 8004ea0:	20000004 	.word	0x20000004

08004ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ebc:	4b67      	ldr	r3, [pc, #412]	; (800505c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d00d      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	f200 80bd 	bhi.w	8005048 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d003      	beq.n	8004ede <HAL_RCC_GetSysClockFreq+0x3a>
 8004ed6:	e0b7      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ed8:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004eda:	60bb      	str	r3, [r7, #8]
       break;
 8004edc:	e0b7      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ede:	4b61      	ldr	r3, [pc, #388]	; (8005064 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ee0:	60bb      	str	r3, [r7, #8]
      break;
 8004ee2:	e0b4      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ee4:	4b5d      	ldr	r3, [pc, #372]	; (800505c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eee:	4b5b      	ldr	r3, [pc, #364]	; (800505c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d04d      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004efa:	4b58      	ldr	r3, [pc, #352]	; (800505c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	099b      	lsrs	r3, r3, #6
 8004f00:	461a      	mov	r2, r3
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	ea02 0800 	and.w	r8, r2, r0
 8004f12:	ea03 0901 	and.w	r9, r3, r1
 8004f16:	4640      	mov	r0, r8
 8004f18:	4649      	mov	r1, r9
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	014b      	lsls	r3, r1, #5
 8004f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f28:	0142      	lsls	r2, r0, #5
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	ebb0 0008 	subs.w	r0, r0, r8
 8004f32:	eb61 0109 	sbc.w	r1, r1, r9
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	018b      	lsls	r3, r1, #6
 8004f40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f44:	0182      	lsls	r2, r0, #6
 8004f46:	1a12      	subs	r2, r2, r0
 8004f48:	eb63 0301 	sbc.w	r3, r3, r1
 8004f4c:	f04f 0000 	mov.w	r0, #0
 8004f50:	f04f 0100 	mov.w	r1, #0
 8004f54:	00d9      	lsls	r1, r3, #3
 8004f56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f5a:	00d0      	lsls	r0, r2, #3
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	eb12 0208 	adds.w	r2, r2, r8
 8004f64:	eb43 0309 	adc.w	r3, r3, r9
 8004f68:	f04f 0000 	mov.w	r0, #0
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	0259      	lsls	r1, r3, #9
 8004f72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f76:	0250      	lsls	r0, r2, #9
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	f7fb f974 	bl	8000274 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4613      	mov	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e04a      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f96:	4b31      	ldr	r3, [pc, #196]	; (800505c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	099b      	lsrs	r3, r3, #6
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fa6:	f04f 0100 	mov.w	r1, #0
 8004faa:	ea02 0400 	and.w	r4, r2, r0
 8004fae:	ea03 0501 	and.w	r5, r3, r1
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	014b      	lsls	r3, r1, #5
 8004fc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fc4:	0142      	lsls	r2, r0, #5
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4619      	mov	r1, r3
 8004fca:	1b00      	subs	r0, r0, r4
 8004fcc:	eb61 0105 	sbc.w	r1, r1, r5
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	018b      	lsls	r3, r1, #6
 8004fda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fde:	0182      	lsls	r2, r0, #6
 8004fe0:	1a12      	subs	r2, r2, r0
 8004fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8004fe6:	f04f 0000 	mov.w	r0, #0
 8004fea:	f04f 0100 	mov.w	r1, #0
 8004fee:	00d9      	lsls	r1, r3, #3
 8004ff0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ff4:	00d0      	lsls	r0, r2, #3
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	1912      	adds	r2, r2, r4
 8004ffc:	eb45 0303 	adc.w	r3, r5, r3
 8005000:	f04f 0000 	mov.w	r0, #0
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	0299      	lsls	r1, r3, #10
 800500a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800500e:	0290      	lsls	r0, r2, #10
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4610      	mov	r0, r2
 8005016:	4619      	mov	r1, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	461a      	mov	r2, r3
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	f7fb f928 	bl	8000274 <__aeabi_uldivmod>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4613      	mov	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	3301      	adds	r3, #1
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	60bb      	str	r3, [r7, #8]
      break;
 8005046:	e002      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800504a:	60bb      	str	r3, [r7, #8]
      break;
 800504c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504e:	68bb      	ldr	r3, [r7, #8]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	00f42400 	.word	0x00f42400
 8005064:	007a1200 	.word	0x007a1200

08005068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <HAL_RCC_GetHCLKFreq+0x14>)
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000000 	.word	0x20000000

08005080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005084:	f7ff fff0 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0a9b      	lsrs	r3, r3, #10
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	4903      	ldr	r1, [pc, #12]	; (80050a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40023800 	.word	0x40023800
 80050a4:	0800bdc4 	.word	0x0800bdc4

080050a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050ac:	f7ff ffdc 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0b5b      	lsrs	r3, r3, #13
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4903      	ldr	r1, [pc, #12]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	0800bdc4 	.word	0x0800bdc4

080050d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	220f      	movs	r2, #15
 80050de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050e0:	4b12      	ldr	r3, [pc, #72]	; (800512c <HAL_RCC_GetClockConfig+0x5c>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 0203 	and.w	r2, r3, #3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <HAL_RCC_GetClockConfig+0x5c>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <HAL_RCC_GetClockConfig+0x5c>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005104:	4b09      	ldr	r3, [pc, #36]	; (800512c <HAL_RCC_GetClockConfig+0x5c>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	08db      	lsrs	r3, r3, #3
 800510a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005112:	4b07      	ldr	r3, [pc, #28]	; (8005130 <HAL_RCC_GetClockConfig+0x60>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0207 	and.w	r2, r3, #7
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	601a      	str	r2, [r3, #0]
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40023800 	.word	0x40023800
 8005130:	40023c00 	.word	0x40023c00

08005134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e041      	b.n	80051ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f839 	bl	80051d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f000 fbf0 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d001      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e044      	b.n	800528a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <HAL_TIM_Base_Start_IT+0xb0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d013      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_TIM_Base_Start_IT+0xb4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x6c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a16      	ldr	r2, [pc, #88]	; (80052a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d111      	bne.n	8005278 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b06      	cmp	r3, #6
 8005264:	d010      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	e007      	b.n	8005288 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40014000 	.word	0x40014000

080052ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e041      	b.n	8005342 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fd fd30 	bl	8002d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f000 fb34 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x24>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e022      	b.n	80053b6 <HAL_TIM_PWM_Start+0x6a>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d109      	bne.n	800538a <HAL_TIM_PWM_Start+0x3e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e015      	b.n	80053b6 <HAL_TIM_PWM_Start+0x6a>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start+0x58>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e008      	b.n	80053b6 <HAL_TIM_PWM_Start+0x6a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	bf14      	ite	ne
 80053b0:	2301      	movne	r3, #1
 80053b2:	2300      	moveq	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e068      	b.n	8005490 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Start+0x82>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053cc:	e013      	b.n	80053f6 <HAL_TIM_PWM_Start+0xaa>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0x92>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053dc:	e00b      	b.n	80053f6 <HAL_TIM_PWM_Start+0xaa>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0xa2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ec:	e003      	b.n	80053f6 <HAL_TIM_PWM_Start+0xaa>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2201      	movs	r2, #1
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fcb6 	bl	8005d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a23      	ldr	r2, [pc, #140]	; (8005498 <HAL_TIM_PWM_Start+0x14c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d107      	bne.n	800541e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1d      	ldr	r2, [pc, #116]	; (8005498 <HAL_TIM_PWM_Start+0x14c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <HAL_TIM_PWM_Start+0x10e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d013      	beq.n	800545a <HAL_TIM_PWM_Start+0x10e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a19      	ldr	r2, [pc, #100]	; (800549c <HAL_TIM_PWM_Start+0x150>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIM_PWM_Start+0x10e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <HAL_TIM_PWM_Start+0x154>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIM_PWM_Start+0x10e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <HAL_TIM_PWM_Start+0x158>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIM_PWM_Start+0x10e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <HAL_TIM_PWM_Start+0x15c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d111      	bne.n	800547e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d010      	beq.n	800548e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	e007      	b.n	800548e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40010000 	.word	0x40010000
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	40000c00 	.word	0x40000c00
 80054a8:	40014000 	.word	0x40014000

080054ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2200      	movs	r2, #0
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fc56 	bl	8005d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a29      	ldr	r2, [pc, #164]	; (8005570 <HAL_TIM_PWM_Stop+0xc4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d117      	bne.n	80054fe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10f      	bne.n	80054fe <HAL_TIM_PWM_Stop+0x52>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	f240 4344 	movw	r3, #1092	; 0x444
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d107      	bne.n	80054fe <HAL_TIM_PWM_Stop+0x52>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	f241 1311 	movw	r3, #4369	; 0x1111
 8005508:	4013      	ands	r3, r2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <HAL_TIM_PWM_Stop+0x82>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1a      	ldr	r2, [r3, #32]
 8005514:	f240 4344 	movw	r3, #1092	; 0x444
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d107      	bne.n	800552e <HAL_TIM_PWM_Stop+0x82>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Stop+0x92>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800553c:	e013      	b.n	8005566 <HAL_TIM_PWM_Stop+0xba>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d104      	bne.n	800554e <HAL_TIM_PWM_Stop+0xa2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554c:	e00b      	b.n	8005566 <HAL_TIM_PWM_Stop+0xba>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Stop+0xb2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555c:	e003      	b.n	8005566 <HAL_TIM_PWM_Stop+0xba>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40010000 	.word	0x40010000

08005574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b02      	cmp	r3, #2
 8005588:	d122      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d11b      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0202 	mvn.w	r2, #2
 80055a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f9b0 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9a2 	bl	8005908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f9b3 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d122      	bne.n	8005624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d11b      	bne.n	8005624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0204 	mvn.w	r2, #4
 80055f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f986 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f978 	bl	8005908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f989 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b08      	cmp	r3, #8
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b08      	cmp	r3, #8
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0208 	mvn.w	r2, #8
 8005648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2204      	movs	r2, #4
 800564e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f95c 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f94e 	bl	8005908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f95f 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0310 	and.w	r3, r3, #16
 8005682:	2b10      	cmp	r3, #16
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0210 	mvn.w	r2, #16
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2208      	movs	r2, #8
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f932 	bl	800591c <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f924 	bl	8005908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f935 	bl	8005930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d10e      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d107      	bne.n	80056f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0201 	mvn.w	r2, #1
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fd f862 	bl	80027bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d10e      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005710:	2b80      	cmp	r3, #128	; 0x80
 8005712:	d107      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fc16 	bl	8005f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d10e      	bne.n	8005750 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d107      	bne.n	8005750 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8fa 	bl	8005944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b20      	cmp	r3, #32
 800575c:	d10e      	bne.n	800577c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b20      	cmp	r3, #32
 800576a:	d107      	bne.n	800577c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0220 	mvn.w	r2, #32
 8005774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fbe0 	bl	8005f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800577c:	bf00      	nop
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800579e:	2302      	movs	r3, #2
 80057a0:	e0ae      	b.n	8005900 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b0c      	cmp	r3, #12
 80057ae:	f200 809f 	bhi.w	80058f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057b2:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057ed 	.word	0x080057ed
 80057bc:	080058f1 	.word	0x080058f1
 80057c0:	080058f1 	.word	0x080058f1
 80057c4:	080058f1 	.word	0x080058f1
 80057c8:	0800582d 	.word	0x0800582d
 80057cc:	080058f1 	.word	0x080058f1
 80057d0:	080058f1 	.word	0x080058f1
 80057d4:	080058f1 	.word	0x080058f1
 80057d8:	0800586f 	.word	0x0800586f
 80057dc:	080058f1 	.word	0x080058f1
 80057e0:	080058f1 	.word	0x080058f1
 80057e4:	080058f1 	.word	0x080058f1
 80057e8:	080058af 	.word	0x080058af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f930 	bl	8005a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0208 	orr.w	r2, r2, #8
 8005806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0204 	bic.w	r2, r2, #4
 8005816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6999      	ldr	r1, [r3, #24]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	619a      	str	r2, [r3, #24]
      break;
 800582a:	e064      	b.n	80058f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 f976 	bl	8005b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6999      	ldr	r1, [r3, #24]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	021a      	lsls	r2, r3, #8
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	619a      	str	r2, [r3, #24]
      break;
 800586c:	e043      	b.n	80058f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 f9c1 	bl	8005bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0208 	orr.w	r2, r2, #8
 8005888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0204 	bic.w	r2, r2, #4
 8005898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69d9      	ldr	r1, [r3, #28]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	61da      	str	r2, [r3, #28]
      break;
 80058ac:	e023      	b.n	80058f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fa0b 	bl	8005cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69d9      	ldr	r1, [r3, #28]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	021a      	lsls	r2, r3, #8
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	61da      	str	r2, [r3, #28]
      break;
 80058ee:	e002      	b.n	80058f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	75fb      	strb	r3, [r7, #23]
      break;
 80058f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a34      	ldr	r2, [pc, #208]	; (8005a3c <TIM_Base_SetConfig+0xe4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00f      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d00b      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a31      	ldr	r2, [pc, #196]	; (8005a40 <TIM_Base_SetConfig+0xe8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a30      	ldr	r2, [pc, #192]	; (8005a44 <TIM_Base_SetConfig+0xec>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_Base_SetConfig+0x38>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a2f      	ldr	r2, [pc, #188]	; (8005a48 <TIM_Base_SetConfig+0xf0>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d108      	bne.n	80059a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a25      	ldr	r2, [pc, #148]	; (8005a3c <TIM_Base_SetConfig+0xe4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01b      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b0:	d017      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <TIM_Base_SetConfig+0xe8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a21      	ldr	r2, [pc, #132]	; (8005a44 <TIM_Base_SetConfig+0xec>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00f      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <TIM_Base_SetConfig+0xf0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1f      	ldr	r2, [pc, #124]	; (8005a4c <TIM_Base_SetConfig+0xf4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d007      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <TIM_Base_SetConfig+0xf8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_Base_SetConfig+0x8a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <TIM_Base_SetConfig+0xfc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d108      	bne.n	80059f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <TIM_Base_SetConfig+0xe4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d103      	bne.n	8005a28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	615a      	str	r2, [r3, #20]
}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40000c00 	.word	0x40000c00
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800

08005a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0201 	bic.w	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 0302 	bic.w	r3, r3, #2
 8005aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <TIM_OC1_SetConfig+0xc8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d10c      	bne.n	8005ace <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0308 	bic.w	r3, r3, #8
 8005aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 0304 	bic.w	r3, r3, #4
 8005acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <TIM_OC1_SetConfig+0xc8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d111      	bne.n	8005afa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40010000 	.word	0x40010000

08005b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0210 	bic.w	r2, r3, #16
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f023 0320 	bic.w	r3, r3, #32
 8005b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <TIM_OC2_SetConfig+0xd4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d10d      	bne.n	8005ba0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <TIM_OC2_SetConfig+0xd4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d113      	bne.n	8005bd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40010000 	.word	0x40010000

08005bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <TIM_OC3_SetConfig+0xd0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d10d      	bne.n	8005c76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a14      	ldr	r2, [pc, #80]	; (8005ccc <TIM_OC3_SetConfig+0xd0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d113      	bne.n	8005ca6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40010000 	.word	0x40010000

08005cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a10      	ldr	r2, [pc, #64]	; (8005d6c <TIM_OC4_SetConfig+0x9c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d109      	bne.n	8005d44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	019b      	lsls	r3, r3, #6
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40010000 	.word	0x40010000

08005d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 031f 	and.w	r3, r3, #31
 8005d82:	2201      	movs	r2, #1
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1a      	ldr	r2, [r3, #32]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	43db      	mvns	r3, r3
 8005d92:	401a      	ands	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a1a      	ldr	r2, [r3, #32]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	fa01 f303 	lsl.w	r3, r1, r3
 8005da8:	431a      	orrs	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e050      	b.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1c      	ldr	r2, [pc, #112]	; (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d018      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e20:	d013      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00e      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d009      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d004      	beq.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10c      	bne.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40000800 	.word	0x40000800
 8005e90:	40000c00 	.word	0x40000c00
 8005e94:	40014000 	.word	0x40014000

08005e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e03d      	b.n	8005f30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e03f      	b.n	8005ff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fc ffd4 	bl	8002f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	; 0x24
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f929 	bl	8006200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b08a      	sub	sp, #40	; 0x28
 8006002:	af02      	add	r7, sp, #8
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	603b      	str	r3, [r7, #0]
 800600a:	4613      	mov	r3, r2
 800600c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b20      	cmp	r3, #32
 800601c:	d17c      	bne.n	8006118 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_UART_Transmit+0x2c>
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e075      	b.n	800611a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_UART_Transmit+0x3e>
 8006038:	2302      	movs	r3, #2
 800603a:	e06e      	b.n	800611a <HAL_UART_Transmit+0x11c>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2221      	movs	r2, #33	; 0x21
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006052:	f7fd f819 	bl	8003088 <HAL_GetTick>
 8006056:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	88fa      	ldrh	r2, [r7, #6]
 800605c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	88fa      	ldrh	r2, [r7, #6]
 8006062:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606c:	d108      	bne.n	8006080 <HAL_UART_Transmit+0x82>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	e003      	b.n	8006088 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006084:	2300      	movs	r3, #0
 8006086:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006090:	e02a      	b.n	80060e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2200      	movs	r2, #0
 800609a:	2180      	movs	r1, #128	; 0x80
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 f840 	bl	8006122 <UART_WaitOnFlagUntilTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e036      	b.n	800611a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	3302      	adds	r3, #2
 80060c6:	61bb      	str	r3, [r7, #24]
 80060c8:	e007      	b.n	80060da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	781a      	ldrb	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	3301      	adds	r3, #1
 80060d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1cf      	bne.n	8006092 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2200      	movs	r2, #0
 80060fa:	2140      	movs	r1, #64	; 0x40
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 f810 	bl	8006122 <UART_WaitOnFlagUntilTimeout>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e006      	b.n	800611a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	e000      	b.n	800611a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006118:	2302      	movs	r3, #2
  }
}
 800611a:	4618      	mov	r0, r3
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b090      	sub	sp, #64	; 0x40
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	603b      	str	r3, [r7, #0]
 800612e:	4613      	mov	r3, r2
 8006130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006132:	e050      	b.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613a:	d04c      	beq.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800613c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <UART_WaitOnFlagUntilTimeout+0x30>
 8006142:	f7fc ffa1 	bl	8003088 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800614e:	429a      	cmp	r2, r3
 8006150:	d241      	bcs.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	330c      	adds	r3, #12
 8006170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006172:	637a      	str	r2, [r7, #52]	; 0x34
 8006174:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e5      	bne.n	8006152 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	613b      	str	r3, [r7, #16]
   return(result);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	63bb      	str	r3, [r7, #56]	; 0x38
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3314      	adds	r3, #20
 80061a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061a6:	623a      	str	r2, [r7, #32]
 80061a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	69f9      	ldr	r1, [r7, #28]
 80061ac:	6a3a      	ldr	r2, [r7, #32]
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e5      	bne.n	8006186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e00f      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4013      	ands	r3, r2
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	bf0c      	ite	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	2300      	movne	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d09f      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3740      	adds	r7, #64	; 0x40
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	b09f      	sub	sp, #124	; 0x7c
 8006206:	af00      	add	r7, sp, #0
 8006208:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800620a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006216:	68d9      	ldr	r1, [r3, #12]
 8006218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	ea40 0301 	orr.w	r3, r0, r1
 8006220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	431a      	orrs	r2, r3
 800622c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	431a      	orrs	r2, r3
 8006232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	4313      	orrs	r3, r2
 8006238:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800623a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006244:	f021 010c 	bic.w	r1, r1, #12
 8006248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800624e:	430b      	orrs	r3, r1
 8006250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800625c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625e:	6999      	ldr	r1, [r3, #24]
 8006260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	ea40 0301 	orr.w	r3, r0, r1
 8006268:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	4bc5      	ldr	r3, [pc, #788]	; (8006584 <UART_SetConfig+0x384>)
 8006270:	429a      	cmp	r2, r3
 8006272:	d004      	beq.n	800627e <UART_SetConfig+0x7e>
 8006274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	4bc3      	ldr	r3, [pc, #780]	; (8006588 <UART_SetConfig+0x388>)
 800627a:	429a      	cmp	r2, r3
 800627c:	d103      	bne.n	8006286 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800627e:	f7fe ff13 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8006282:	6778      	str	r0, [r7, #116]	; 0x74
 8006284:	e002      	b.n	800628c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006286:	f7fe fefb 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 800628a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800628c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006294:	f040 80b6 	bne.w	8006404 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800629a:	461c      	mov	r4, r3
 800629c:	f04f 0500 	mov.w	r5, #0
 80062a0:	4622      	mov	r2, r4
 80062a2:	462b      	mov	r3, r5
 80062a4:	1891      	adds	r1, r2, r2
 80062a6:	6439      	str	r1, [r7, #64]	; 0x40
 80062a8:	415b      	adcs	r3, r3
 80062aa:	647b      	str	r3, [r7, #68]	; 0x44
 80062ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062b0:	1912      	adds	r2, r2, r4
 80062b2:	eb45 0303 	adc.w	r3, r5, r3
 80062b6:	f04f 0000 	mov.w	r0, #0
 80062ba:	f04f 0100 	mov.w	r1, #0
 80062be:	00d9      	lsls	r1, r3, #3
 80062c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062c4:	00d0      	lsls	r0, r2, #3
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	1911      	adds	r1, r2, r4
 80062cc:	6639      	str	r1, [r7, #96]	; 0x60
 80062ce:	416b      	adcs	r3, r5
 80062d0:	667b      	str	r3, [r7, #100]	; 0x64
 80062d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	1891      	adds	r1, r2, r2
 80062de:	63b9      	str	r1, [r7, #56]	; 0x38
 80062e0:	415b      	adcs	r3, r3
 80062e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80062ec:	f7f9 ffc2 	bl	8000274 <__aeabi_uldivmod>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4ba5      	ldr	r3, [pc, #660]	; (800658c <UART_SetConfig+0x38c>)
 80062f6:	fba3 2302 	umull	r2, r3, r3, r2
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	011e      	lsls	r6, r3, #4
 80062fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006300:	461c      	mov	r4, r3
 8006302:	f04f 0500 	mov.w	r5, #0
 8006306:	4622      	mov	r2, r4
 8006308:	462b      	mov	r3, r5
 800630a:	1891      	adds	r1, r2, r2
 800630c:	6339      	str	r1, [r7, #48]	; 0x30
 800630e:	415b      	adcs	r3, r3
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
 8006312:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006316:	1912      	adds	r2, r2, r4
 8006318:	eb45 0303 	adc.w	r3, r5, r3
 800631c:	f04f 0000 	mov.w	r0, #0
 8006320:	f04f 0100 	mov.w	r1, #0
 8006324:	00d9      	lsls	r1, r3, #3
 8006326:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800632a:	00d0      	lsls	r0, r2, #3
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	1911      	adds	r1, r2, r4
 8006332:	65b9      	str	r1, [r7, #88]	; 0x58
 8006334:	416b      	adcs	r3, r5
 8006336:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	461a      	mov	r2, r3
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	1891      	adds	r1, r2, r2
 8006344:	62b9      	str	r1, [r7, #40]	; 0x28
 8006346:	415b      	adcs	r3, r3
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800634a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800634e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006352:	f7f9 ff8f 	bl	8000274 <__aeabi_uldivmod>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4b8c      	ldr	r3, [pc, #560]	; (800658c <UART_SetConfig+0x38c>)
 800635c:	fba3 1302 	umull	r1, r3, r3, r2
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	2164      	movs	r1, #100	; 0x64
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	3332      	adds	r3, #50	; 0x32
 800636e:	4a87      	ldr	r2, [pc, #540]	; (800658c <UART_SetConfig+0x38c>)
 8006370:	fba2 2303 	umull	r2, r3, r2, r3
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800637c:	441e      	add	r6, r3
 800637e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006380:	4618      	mov	r0, r3
 8006382:	f04f 0100 	mov.w	r1, #0
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	1894      	adds	r4, r2, r2
 800638c:	623c      	str	r4, [r7, #32]
 800638e:	415b      	adcs	r3, r3
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
 8006392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006396:	1812      	adds	r2, r2, r0
 8006398:	eb41 0303 	adc.w	r3, r1, r3
 800639c:	f04f 0400 	mov.w	r4, #0
 80063a0:	f04f 0500 	mov.w	r5, #0
 80063a4:	00dd      	lsls	r5, r3, #3
 80063a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063aa:	00d4      	lsls	r4, r2, #3
 80063ac:	4622      	mov	r2, r4
 80063ae:	462b      	mov	r3, r5
 80063b0:	1814      	adds	r4, r2, r0
 80063b2:	653c      	str	r4, [r7, #80]	; 0x50
 80063b4:	414b      	adcs	r3, r1
 80063b6:	657b      	str	r3, [r7, #84]	; 0x54
 80063b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	461a      	mov	r2, r3
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	1891      	adds	r1, r2, r2
 80063c4:	61b9      	str	r1, [r7, #24]
 80063c6:	415b      	adcs	r3, r3
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80063d2:	f7f9 ff4f 	bl	8000274 <__aeabi_uldivmod>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4b6c      	ldr	r3, [pc, #432]	; (800658c <UART_SetConfig+0x38c>)
 80063dc:	fba3 1302 	umull	r1, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	2164      	movs	r1, #100	; 0x64
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	3332      	adds	r3, #50	; 0x32
 80063ee:	4a67      	ldr	r2, [pc, #412]	; (800658c <UART_SetConfig+0x38c>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f003 0207 	and.w	r2, r3, #7
 80063fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4432      	add	r2, r6
 8006400:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006402:	e0b9      	b.n	8006578 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006406:	461c      	mov	r4, r3
 8006408:	f04f 0500 	mov.w	r5, #0
 800640c:	4622      	mov	r2, r4
 800640e:	462b      	mov	r3, r5
 8006410:	1891      	adds	r1, r2, r2
 8006412:	6139      	str	r1, [r7, #16]
 8006414:	415b      	adcs	r3, r3
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800641c:	1912      	adds	r2, r2, r4
 800641e:	eb45 0303 	adc.w	r3, r5, r3
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f04f 0100 	mov.w	r1, #0
 800642a:	00d9      	lsls	r1, r3, #3
 800642c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006430:	00d0      	lsls	r0, r2, #3
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	eb12 0804 	adds.w	r8, r2, r4
 800643a:	eb43 0905 	adc.w	r9, r3, r5
 800643e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	4618      	mov	r0, r3
 8006444:	f04f 0100 	mov.w	r1, #0
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	008b      	lsls	r3, r1, #2
 8006452:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006456:	0082      	lsls	r2, r0, #2
 8006458:	4640      	mov	r0, r8
 800645a:	4649      	mov	r1, r9
 800645c:	f7f9 ff0a 	bl	8000274 <__aeabi_uldivmod>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4b49      	ldr	r3, [pc, #292]	; (800658c <UART_SetConfig+0x38c>)
 8006466:	fba3 2302 	umull	r2, r3, r3, r2
 800646a:	095b      	lsrs	r3, r3, #5
 800646c:	011e      	lsls	r6, r3, #4
 800646e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006470:	4618      	mov	r0, r3
 8006472:	f04f 0100 	mov.w	r1, #0
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	1894      	adds	r4, r2, r2
 800647c:	60bc      	str	r4, [r7, #8]
 800647e:	415b      	adcs	r3, r3
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006486:	1812      	adds	r2, r2, r0
 8006488:	eb41 0303 	adc.w	r3, r1, r3
 800648c:	f04f 0400 	mov.w	r4, #0
 8006490:	f04f 0500 	mov.w	r5, #0
 8006494:	00dd      	lsls	r5, r3, #3
 8006496:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800649a:	00d4      	lsls	r4, r2, #3
 800649c:	4622      	mov	r2, r4
 800649e:	462b      	mov	r3, r5
 80064a0:	1814      	adds	r4, r2, r0
 80064a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80064a4:	414b      	adcs	r3, r1
 80064a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f04f 0100 	mov.w	r1, #0
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	008b      	lsls	r3, r1, #2
 80064bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064c0:	0082      	lsls	r2, r0, #2
 80064c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064c6:	f7f9 fed5 	bl	8000274 <__aeabi_uldivmod>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4b2f      	ldr	r3, [pc, #188]	; (800658c <UART_SetConfig+0x38c>)
 80064d0:	fba3 1302 	umull	r1, r3, r3, r2
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	2164      	movs	r1, #100	; 0x64
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	3332      	adds	r3, #50	; 0x32
 80064e2:	4a2a      	ldr	r2, [pc, #168]	; (800658c <UART_SetConfig+0x38c>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	095b      	lsrs	r3, r3, #5
 80064ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064ee:	441e      	add	r6, r3
 80064f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064f2:	4618      	mov	r0, r3
 80064f4:	f04f 0100 	mov.w	r1, #0
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	1894      	adds	r4, r2, r2
 80064fe:	603c      	str	r4, [r7, #0]
 8006500:	415b      	adcs	r3, r3
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006508:	1812      	adds	r2, r2, r0
 800650a:	eb41 0303 	adc.w	r3, r1, r3
 800650e:	f04f 0400 	mov.w	r4, #0
 8006512:	f04f 0500 	mov.w	r5, #0
 8006516:	00dd      	lsls	r5, r3, #3
 8006518:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800651c:	00d4      	lsls	r4, r2, #3
 800651e:	4622      	mov	r2, r4
 8006520:	462b      	mov	r3, r5
 8006522:	eb12 0a00 	adds.w	sl, r2, r0
 8006526:	eb43 0b01 	adc.w	fp, r3, r1
 800652a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4618      	mov	r0, r3
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	008b      	lsls	r3, r1, #2
 800653e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006542:	0082      	lsls	r2, r0, #2
 8006544:	4650      	mov	r0, sl
 8006546:	4659      	mov	r1, fp
 8006548:	f7f9 fe94 	bl	8000274 <__aeabi_uldivmod>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4b0e      	ldr	r3, [pc, #56]	; (800658c <UART_SetConfig+0x38c>)
 8006552:	fba3 1302 	umull	r1, r3, r3, r2
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	2164      	movs	r1, #100	; 0x64
 800655a:	fb01 f303 	mul.w	r3, r1, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	3332      	adds	r3, #50	; 0x32
 8006564:	4a09      	ldr	r2, [pc, #36]	; (800658c <UART_SetConfig+0x38c>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	f003 020f 	and.w	r2, r3, #15
 8006570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4432      	add	r2, r6
 8006576:	609a      	str	r2, [r3, #8]
}
 8006578:	bf00      	nop
 800657a:	377c      	adds	r7, #124	; 0x7c
 800657c:	46bd      	mov	sp, r7
 800657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006582:	bf00      	nop
 8006584:	40011000 	.word	0x40011000
 8006588:	40011400 	.word	0x40011400
 800658c:	51eb851f 	.word	0x51eb851f

08006590 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f103 0208 	add.w	r2, r3, #8
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295
 80065a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f103 0208 	add.w	r2, r3, #8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f103 0208 	add.w	r2, r3, #8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d103      	bne.n	8006652 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	e00c      	b.n	800666c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3308      	adds	r3, #8
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e002      	b.n	8006660 <vListInsert+0x2e>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	d2f6      	bcs.n	800665a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6892      	ldr	r2, [r2, #8]
 80066ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6852      	ldr	r2, [r2, #4]
 80066c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d103      	bne.n	80066d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	1e5a      	subs	r2, r3, #1
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <xQueueGenericReset+0x2a>
        __asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	60bb      	str	r3, [r7, #8]
    }
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8006722:	f002 f961 	bl	80089e8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	68f9      	ldr	r1, [r7, #12]
 8006730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	441a      	add	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	3b01      	subs	r3, #1
 8006754:	68f9      	ldr	r1, [r7, #12]
 8006756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	441a      	add	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	22ff      	movs	r2, #255	; 0xff
 800676e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d114      	bne.n	80067a2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01a      	beq.n	80067b6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3310      	adds	r3, #16
 8006784:	4618      	mov	r0, r3
 8006786:	f001 f9d9 	bl	8007b3c <xTaskRemoveFromEventList>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d012      	beq.n	80067b6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8006790:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <xQueueGenericReset+0xcc>)
 8006792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	e009      	b.n	80067b6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3310      	adds	r3, #16
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fef2 	bl	8006590 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3324      	adds	r3, #36	; 0x24
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff feed 	bl	8006590 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80067b6:	f002 f947 	bl	8008a48 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80067ba:	2301      	movs	r3, #1
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08c      	sub	sp, #48	; 0x30
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	61bb      	str	r3, [r7, #24]
    }
 80067ee:	bf00      	nop
 80067f0:	e7fe      	b.n	80067f0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	fb02 f303 	mul.w	r3, r2, r3
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d006      	beq.n	8006810 <xQueueGenericCreate+0x48>
 8006802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	fbb2 f3f3 	udiv	r3, r2, r3
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	429a      	cmp	r2, r3
 800680e:	d101      	bne.n	8006814 <xQueueGenericCreate+0x4c>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <xQueueGenericCreate+0x4e>
 8006814:	2300      	movs	r3, #0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <xQueueGenericCreate+0x68>
        __asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	617b      	str	r3, [r7, #20]
    }
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8006836:	d90a      	bls.n	800684e <xQueueGenericCreate+0x86>
        __asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	613b      	str	r3, [r7, #16]
    }
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	3350      	adds	r3, #80	; 0x50
 8006852:	4618      	mov	r0, r3
 8006854:	f002 fa38 	bl	8008cc8 <pvPortMalloc>
 8006858:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00d      	beq.n	800687c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	3350      	adds	r3, #80	; 0x50
 8006868:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800686a:	79fa      	ldrb	r2, [r7, #7]
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	4613      	mov	r3, r2
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	68b9      	ldr	r1, [r7, #8]
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f805 	bl	8006886 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800687c:	6a3b      	ldr	r3, [r7, #32]
    }
 800687e:	4618      	mov	r0, r3
 8006880:	3728      	adds	r7, #40	; 0x28
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	e002      	b.n	80068a8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068b4:	2101      	movs	r1, #1
 80068b6:	69b8      	ldr	r0, [r7, #24]
 80068b8:	f7ff ff1e 	bl	80066f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	68f9      	ldr	r1, [r7, #12]
 80068ca:	2073      	movs	r0, #115	; 0x73
 80068cc:	f003 fb84 	bl	8009fd8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b090      	sub	sp, #64	; 0x40
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068e6:	2300      	movs	r3, #0
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <xQueueGenericSend+0x32>
        __asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <xQueueGenericSend+0x40>
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <xQueueGenericSend+0x44>
 8006918:	2301      	movs	r3, #1
 800691a:	e000      	b.n	800691e <xQueueGenericSend+0x46>
 800691c:	2300      	movs	r3, #0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <xQueueGenericSend+0x60>
        __asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d103      	bne.n	8006946 <xQueueGenericSend+0x6e>
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <xQueueGenericSend+0x72>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <xQueueGenericSend+0x74>
 800694a:	2300      	movs	r3, #0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <xQueueGenericSend+0x8e>
        __asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	623b      	str	r3, [r7, #32]
    }
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006966:	f001 fa89 	bl	8007e7c <xTaskGetSchedulerState>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d102      	bne.n	8006976 <xQueueGenericSend+0x9e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <xQueueGenericSend+0xa2>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <xQueueGenericSend+0xa4>
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <xQueueGenericSend+0xbe>
        __asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	61fb      	str	r3, [r7, #28]
    }
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006996:	f002 f827 	bl	80089e8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <xQueueGenericSend+0xd4>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d136      	bne.n	8006a1a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	4618      	mov	r0, r3
 80069b0:	f004 f89e 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	460b      	mov	r3, r1
 80069be:	4601      	mov	r1, r0
 80069c0:	205a      	movs	r0, #90	; 0x5a
 80069c2:	f003 fb7f 	bl	800a0c4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069cc:	f000 fa78 	bl	8006ec0 <prvCopyDataToQueue>
 80069d0:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d010      	beq.n	80069fc <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	3324      	adds	r3, #36	; 0x24
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 f8ac 	bl	8007b3c <xTaskRemoveFromEventList>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d013      	beq.n	8006a12 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80069ea:	4b4d      	ldr	r3, [pc, #308]	; (8006b20 <xQueueGenericSend+0x248>)
 80069ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	e00a      	b.n	8006a12 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006a02:	4b47      	ldr	r3, [pc, #284]	; (8006b20 <xQueueGenericSend+0x248>)
 8006a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006a12:	f002 f819 	bl	8008a48 <vPortExitCritical>
                return pdPASS;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e07d      	b.n	8006b16 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d110      	bne.n	8006a42 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006a20:	f002 f812 	bl	8008a48 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	4618      	mov	r0, r3
 8006a28:	f004 f862 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	460b      	mov	r3, r1
 8006a36:	4601      	mov	r1, r0
 8006a38:	205a      	movs	r0, #90	; 0x5a
 8006a3a:	f003 fb43 	bl	800a0c4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e069      	b.n	8006b16 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d106      	bne.n	8006a56 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006a48:	f107 0314 	add.w	r3, r7, #20
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 f8db 	bl	8007c08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006a52:	2301      	movs	r3, #1
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006a56:	f001 fff7 	bl	8008a48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006a5a:	f000 fe27 	bl	80076ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006a5e:	f001 ffc3 	bl	80089e8 <vPortEnterCritical>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a68:	b25b      	sxtb	r3, r3
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d103      	bne.n	8006a78 <xQueueGenericSend+0x1a0>
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a7e:	b25b      	sxtb	r3, r3
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a84:	d103      	bne.n	8006a8e <xQueueGenericSend+0x1b6>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a8e:	f001 ffdb 	bl	8008a48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a92:	1d3a      	adds	r2, r7, #4
 8006a94:	f107 0314 	add.w	r3, r7, #20
 8006a98:	4611      	mov	r1, r2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 f8ca 	bl	8007c34 <xTaskCheckForTimeOut>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d124      	bne.n	8006af0 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa8:	f000 fb02 	bl	80070b0 <prvIsQueueFull>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d018      	beq.n	8006ae4 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	3310      	adds	r3, #16
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 ffec 	bl	8007a98 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac2:	f000 fa8d 	bl	8006fe0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006ac6:	f000 fdff 	bl	80076c8 <xTaskResumeAll>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f47f af62 	bne.w	8006996 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8006ad2:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <xQueueGenericSend+0x248>)
 8006ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	e758      	b.n	8006996 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ae6:	f000 fa7b 	bl	8006fe0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006aea:	f000 fded 	bl	80076c8 <xTaskResumeAll>
 8006aee:	e752      	b.n	8006996 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006af2:	f000 fa75 	bl	8006fe0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006af6:	f000 fde7 	bl	80076c8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	4618      	mov	r0, r3
 8006afe:	f003 fff7 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4601      	mov	r1, r0
 8006b0e:	205a      	movs	r0, #90	; 0x5a
 8006b10:	f003 fad8 	bl	800a0c4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8006b14:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3738      	adds	r7, #56	; 0x38
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	e000ed04 	.word	0xe000ed04

08006b24 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b090      	sub	sp, #64	; 0x40
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <xQueueGenericSendFromISR+0x3c>
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <xQueueGenericSendFromISR+0x40>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <xQueueGenericSendFromISR+0x42>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d103      	bne.n	8006b8e <xQueueGenericSendFromISR+0x6a>
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <xQueueGenericSendFromISR+0x6e>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <xQueueGenericSendFromISR+0x70>
 8006b92:	2300      	movs	r3, #0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	623b      	str	r3, [r7, #32]
    }
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bae:	f002 f805 	bl	8008bbc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006bb2:	f3ef 8211 	mrs	r2, BASEPRI
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	61fa      	str	r2, [r7, #28]
 8006bc8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006bca:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bcc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d302      	bcc.n	8006be0 <xQueueGenericSendFromISR+0xbc>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d148      	bne.n	8006c72 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f003 ff7c 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 8006bf8:	4601      	mov	r1, r0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	2060      	movs	r0, #96	; 0x60
 8006c00:	f003 f990 	bl	8009f24 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c0a:	f000 f959 	bl	8006ec0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006c0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c16:	d112      	bne.n	8006c3e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d025      	beq.n	8006c6c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	3324      	adds	r3, #36	; 0x24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 ff89 	bl	8007b3c <xTaskRemoveFromEventList>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01d      	beq.n	8006c6c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01a      	beq.n	8006c6c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	e016      	b.n	8006c6c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8006c3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c42:	2b7f      	cmp	r3, #127	; 0x7f
 8006c44:	d10a      	bne.n	8006c5c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	617b      	str	r3, [r7, #20]
    }
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c60:	3301      	adds	r3, #1
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	b25a      	sxtb	r2, r3
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8006c70:	e00b      	b.n	8006c8a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	4618      	mov	r0, r3
 8006c76:	f003 ff3b 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	2060      	movs	r0, #96	; 0x60
 8006c82:	f003 f94f 	bl	8009f24 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006c94:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3740      	adds	r7, #64	; 0x40
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006ca0:	b590      	push	{r4, r7, lr}
 8006ca2:	b08f      	sub	sp, #60	; 0x3c
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006cac:	2300      	movs	r3, #0
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10a      	bne.n	8006cd0 <xQueueReceive+0x30>
        __asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	623b      	str	r3, [r7, #32]
    }
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d103      	bne.n	8006cde <xQueueReceive+0x3e>
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <xQueueReceive+0x42>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <xQueueReceive+0x44>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <xQueueReceive+0x5e>
        __asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	61fb      	str	r3, [r7, #28]
    }
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cfe:	f001 f8bd 	bl	8007e7c <xTaskGetSchedulerState>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <xQueueReceive+0x6e>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <xQueueReceive+0x72>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <xQueueReceive+0x74>
 8006d12:	2300      	movs	r3, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <xQueueReceive+0x8e>
        __asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	61bb      	str	r3, [r7, #24]
    }
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006d2e:	f001 fe5b 	bl	80089e8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d02f      	beq.n	8006d9e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d42:	f000 f927 	bl	8006f94 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f003 fed1 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 8006d4e:	4604      	mov	r4, r0
 8006d50:	2000      	movs	r0, #0
 8006d52:	f003 fecd 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 8006d56:	4602      	mov	r2, r0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	9100      	str	r1, [sp, #0]
 8006d5e:	4621      	mov	r1, r4
 8006d60:	205c      	movs	r0, #92	; 0x5c
 8006d62:	f003 f9af 	bl	800a0c4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	1e5a      	subs	r2, r3, #1
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00f      	beq.n	8006d96 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	3310      	adds	r3, #16
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fede 	bl	8007b3c <xTaskRemoveFromEventList>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006d86:	4b4d      	ldr	r3, [pc, #308]	; (8006ebc <xQueueReceive+0x21c>)
 8006d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006d96:	f001 fe57 	bl	8008a48 <vPortExitCritical>
                return pdPASS;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e08a      	b.n	8006eb4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d113      	bne.n	8006dcc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006da4:	f001 fe50 	bl	8008a48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	4618      	mov	r0, r3
 8006dac:	f003 fea0 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 8006db0:	4604      	mov	r4, r0
 8006db2:	2000      	movs	r0, #0
 8006db4:	f003 fe9c 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 8006db8:	4602      	mov	r2, r0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	9100      	str	r1, [sp, #0]
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	205c      	movs	r0, #92	; 0x5c
 8006dc4:	f003 f97e 	bl	800a0c4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e073      	b.n	8006eb4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006dd2:	f107 0310 	add.w	r3, r7, #16
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 ff16 	bl	8007c08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006de0:	f001 fe32 	bl	8008a48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006de4:	f000 fc62 	bl	80076ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006de8:	f001 fdfe 	bl	80089e8 <vPortEnterCritical>
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006df2:	b25b      	sxtb	r3, r3
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d103      	bne.n	8006e02 <xQueueReceive+0x162>
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e08:	b25b      	sxtb	r3, r3
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0e:	d103      	bne.n	8006e18 <xQueueReceive+0x178>
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e18:	f001 fe16 	bl	8008a48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e1c:	1d3a      	adds	r2, r7, #4
 8006e1e:	f107 0310 	add.w	r3, r7, #16
 8006e22:	4611      	mov	r1, r2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 ff05 	bl	8007c34 <xTaskCheckForTimeOut>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d124      	bne.n	8006e7a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e32:	f000 f927 	bl	8007084 <prvIsQueueEmpty>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d018      	beq.n	8006e6e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	3324      	adds	r3, #36	; 0x24
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	4611      	mov	r1, r2
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fe27 	bl	8007a98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4c:	f000 f8c8 	bl	8006fe0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006e50:	f000 fc3a 	bl	80076c8 <xTaskResumeAll>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f47f af69 	bne.w	8006d2e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006e5c:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <xQueueReceive+0x21c>)
 8006e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	e75f      	b.n	8006d2e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e70:	f000 f8b6 	bl	8006fe0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006e74:	f000 fc28 	bl	80076c8 <xTaskResumeAll>
 8006e78:	e759      	b.n	8006d2e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e7c:	f000 f8b0 	bl	8006fe0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006e80:	f000 fc22 	bl	80076c8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e86:	f000 f8fd 	bl	8007084 <prvIsQueueEmpty>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f43f af4e 	beq.w	8006d2e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	4618      	mov	r0, r3
 8006e96:	f003 fe2b 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	f003 fe27 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	9100      	str	r1, [sp, #0]
 8006eaa:	4621      	mov	r1, r4
 8006eac:	205c      	movs	r0, #92	; 0x5c
 8006eae:	f003 f909 	bl	800a0c4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8006eb2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3734      	adds	r7, #52	; 0x34
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd90      	pop	{r4, r7, pc}
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10d      	bne.n	8006efa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d14d      	bne.n	8006f82 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 ffe4 	bl	8007eb8 <xTaskPriorityDisinherit>
 8006ef0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	609a      	str	r2, [r3, #8]
 8006ef8:	e043      	b.n	8006f82 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d119      	bne.n	8006f34 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6858      	ldr	r0, [r3, #4]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	f003 ff8a 	bl	800ae24 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	441a      	add	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d32b      	bcc.n	8006f82 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	e026      	b.n	8006f82 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	68d8      	ldr	r0, [r3, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	f003 ff70 	bl	800ae24 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	425b      	negs	r3, r3
 8006f4e:	441a      	add	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d207      	bcs.n	8006f70 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	425b      	negs	r3, r3
 8006f6a:	441a      	add	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d105      	bne.n	8006f82 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006f8a:	697b      	ldr	r3, [r7, #20]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d018      	beq.n	8006fd8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	441a      	add	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68da      	ldr	r2, [r3, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d303      	bcc.n	8006fc8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68d9      	ldr	r1, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6838      	ldr	r0, [r7, #0]
 8006fd4:	f003 ff26 	bl	800ae24 <memcpy>
    }
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006fe8:	f001 fcfe 	bl	80089e8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ff4:	e011      	b.n	800701a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d012      	beq.n	8007024 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3324      	adds	r3, #36	; 0x24
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fd9a 	bl	8007b3c <xTaskRemoveFromEventList>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800700e:	f000 fe77 	bl	8007d00 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	3b01      	subs	r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800701a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800701e:	2b00      	cmp	r3, #0
 8007020:	dce9      	bgt.n	8006ff6 <prvUnlockQueue+0x16>
 8007022:	e000      	b.n	8007026 <prvUnlockQueue+0x46>
                        break;
 8007024:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	22ff      	movs	r2, #255	; 0xff
 800702a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800702e:	f001 fd0b 	bl	8008a48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8007032:	f001 fcd9 	bl	80089e8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800703c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800703e:	e011      	b.n	8007064 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d012      	beq.n	800706e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3310      	adds	r3, #16
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fd75 	bl	8007b3c <xTaskRemoveFromEventList>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8007058:	f000 fe52 	bl	8007d00 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	3b01      	subs	r3, #1
 8007060:	b2db      	uxtb	r3, r3
 8007062:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007068:	2b00      	cmp	r3, #0
 800706a:	dce9      	bgt.n	8007040 <prvUnlockQueue+0x60>
 800706c:	e000      	b.n	8007070 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800706e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	22ff      	movs	r2, #255	; 0xff
 8007074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8007078:	f001 fce6 	bl	8008a48 <vPortExitCritical>
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800708c:	f001 fcac 	bl	80089e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	e001      	b.n	80070a2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80070a2:	f001 fcd1 	bl	8008a48 <vPortExitCritical>

    return xReturn;
 80070a6:	68fb      	ldr	r3, [r7, #12]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80070b8:	f001 fc96 	bl	80089e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d102      	bne.n	80070ce <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80070c8:	2301      	movs	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e001      	b.n	80070d2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80070d2:	f001 fcb9 	bl	8008a48 <vPortExitCritical>

    return xReturn;
 80070d6:	68fb      	ldr	r3, [r7, #12]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	e01e      	b.n	800712e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070f0:	4a13      	ldr	r2, [pc, #76]	; (8007140 <vQueueAddToRegistry+0x60>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d115      	bne.n	8007128 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070fc:	4910      	ldr	r1, [pc, #64]	; (8007140 <vQueueAddToRegistry+0x60>)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8007106:	4a0e      	ldr	r2, [pc, #56]	; (8007140 <vQueueAddToRegistry+0x60>)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	4413      	add	r3, r2
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4618      	mov	r0, r3
 8007116:	f003 fceb 	bl	800aaf0 <SEGGER_SYSVIEW_ShrinkId>
 800711a:	4601      	mov	r1, r0
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	2071      	movs	r0, #113	; 0x71
 8007122:	f002 feff 	bl	8009f24 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8007126:	e006      	b.n	8007136 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3301      	adds	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b07      	cmp	r3, #7
 8007132:	d9dd      	bls.n	80070f0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	200058a0 	.word	0x200058a0

08007144 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007154:	f001 fc48 	bl	80089e8 <vPortEnterCritical>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800715e:	b25b      	sxtb	r3, r3
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007164:	d103      	bne.n	800716e <vQueueWaitForMessageRestricted+0x2a>
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007174:	b25b      	sxtb	r3, r3
 8007176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717a:	d103      	bne.n	8007184 <vQueueWaitForMessageRestricted+0x40>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007184:	f001 fc60 	bl	8008a48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	3324      	adds	r3, #36	; 0x24
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fca1 	bl	8007ae0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800719e:	6978      	ldr	r0, [r7, #20]
 80071a0:	f7ff ff1e 	bl	8006fe0 <prvUnlockQueue>
    }
 80071a4:	bf00      	nop
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08c      	sub	sp, #48	; 0x30
 80071b0:	af04      	add	r7, sp, #16
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071bc:	88fb      	ldrh	r3, [r7, #6]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 fd81 	bl	8008cc8 <pvPortMalloc>
 80071c6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00e      	beq.n	80071ec <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071ce:	206c      	movs	r0, #108	; 0x6c
 80071d0:	f001 fd7a 	bl	8008cc8 <pvPortMalloc>
 80071d4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	631a      	str	r2, [r3, #48]	; 0x30
 80071e2:	e005      	b.n	80071f0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80071e4:	6978      	ldr	r0, [r7, #20]
 80071e6:	f001 fe4f 	bl	8008e88 <vPortFree>
 80071ea:	e001      	b.n	80071f0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d013      	beq.n	800721e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071f6:	88fa      	ldrh	r2, [r7, #6]
 80071f8:	2300      	movs	r3, #0
 80071fa:	9303      	str	r3, [sp, #12]
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	9302      	str	r3, [sp, #8]
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 f80e 	bl	800722e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007212:	69f8      	ldr	r0, [r7, #28]
 8007214:	f000 f8a2 	bl	800735c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007218:	2301      	movs	r3, #1
 800721a:	61bb      	str	r3, [r7, #24]
 800721c:	e002      	b.n	8007224 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800721e:	f04f 33ff 	mov.w	r3, #4294967295
 8007222:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007224:	69bb      	ldr	r3, [r7, #24]
    }
 8007226:	4618      	mov	r0, r3
 8007228:	3720      	adds	r7, #32
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b088      	sub	sp, #32
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	607a      	str	r2, [r7, #4]
 800723a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	461a      	mov	r2, r3
 8007246:	21a5      	movs	r1, #165	; 0xa5
 8007248:	f003 fdfa 	bl	800ae40 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007256:	3b01      	subs	r3, #1
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <prvInitialiseNewTask+0x58>
        __asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	617b      	str	r3, [r7, #20]
    }
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01f      	beq.n	80072cc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800728c:	2300      	movs	r3, #0
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	e012      	b.n	80072b8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	4413      	add	r3, r2
 8007298:	7819      	ldrb	r1, [r3, #0]
 800729a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	4413      	add	r3, r2
 80072a0:	3334      	adds	r3, #52	; 0x34
 80072a2:	460a      	mov	r2, r1
 80072a4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	4413      	add	r3, r2
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d006      	beq.n	80072c0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	3301      	adds	r3, #1
 80072b6:	61fb      	str	r3, [r7, #28]
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	2b1d      	cmp	r3, #29
 80072bc:	d9e9      	bls.n	8007292 <prvInitialiseNewTask+0x64>
 80072be:	e000      	b.n	80072c2 <prvInitialiseNewTask+0x94>
            {
                break;
 80072c0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80072ca:	e003      	b.n	80072d4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d901      	bls.n	80072de <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072da:	2304      	movs	r3, #4
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e8:	65da      	str	r2, [r3, #92]	; 0x5c
            pxNewTCB->uxMutexesHeld = 0;
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	2200      	movs	r2, #0
 80072ee:	661a      	str	r2, [r3, #96]	; 0x60
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	3304      	adds	r3, #4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff f96b 	bl	80065d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	3318      	adds	r3, #24
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff f966 	bl	80065d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007308:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	f1c3 0205 	rsb	r2, r3, #5
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007318:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	3364      	adds	r3, #100	; 0x64
 800731e:	2204      	movs	r2, #4
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f003 fd8c 	bl	800ae40 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	3368      	adds	r3, #104	; 0x68
 800732c:	2201      	movs	r2, #1
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f003 fd85 	bl	800ae40 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	68f9      	ldr	r1, [r7, #12]
 800733a:	69b8      	ldr	r0, [r7, #24]
 800733c:	f001 fa22 	bl	8008784 <pxPortInitialiseStack>
 8007340:	4602      	mov	r2, r0
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007350:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007352:	bf00      	nop
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800735c:	b5b0      	push	{r4, r5, r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af02      	add	r7, sp, #8
 8007362:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007364:	f001 fb40 	bl	80089e8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007368:	4b3b      	ldr	r3, [pc, #236]	; (8007458 <prvAddNewTaskToReadyList+0xfc>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	4a3a      	ldr	r2, [pc, #232]	; (8007458 <prvAddNewTaskToReadyList+0xfc>)
 8007370:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007372:	4b3a      	ldr	r3, [pc, #232]	; (800745c <prvAddNewTaskToReadyList+0x100>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800737a:	4a38      	ldr	r2, [pc, #224]	; (800745c <prvAddNewTaskToReadyList+0x100>)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007380:	4b35      	ldr	r3, [pc, #212]	; (8007458 <prvAddNewTaskToReadyList+0xfc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d110      	bne.n	80073aa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007388:	f000 fcde 	bl	8007d48 <prvInitialiseTaskLists>
 800738c:	e00d      	b.n	80073aa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800738e:	4b34      	ldr	r3, [pc, #208]	; (8007460 <prvAddNewTaskToReadyList+0x104>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007396:	4b31      	ldr	r3, [pc, #196]	; (800745c <prvAddNewTaskToReadyList+0x100>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d802      	bhi.n	80073aa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80073a4:	4a2d      	ldr	r2, [pc, #180]	; (800745c <prvAddNewTaskToReadyList+0x100>)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80073aa:	4b2e      	ldr	r3, [pc, #184]	; (8007464 <prvAddNewTaskToReadyList+0x108>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	4a2c      	ldr	r2, [pc, #176]	; (8007464 <prvAddNewTaskToReadyList+0x108>)
 80073b2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073b4:	4b2b      	ldr	r3, [pc, #172]	; (8007464 <prvAddNewTaskToReadyList+0x108>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d016      	beq.n	80073f0 <prvAddNewTaskToReadyList+0x94>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f003 fa6d 	bl	800a8a4 <SEGGER_SYSVIEW_OnTaskCreate>
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073da:	461d      	mov	r5, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	461c      	mov	r4, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	1ae3      	subs	r3, r4, r3
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	462b      	mov	r3, r5
 80073ec:	f001 ff2e 	bl	800924c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f003 fada 	bl	800a9ac <SEGGER_SYSVIEW_OnTaskStartReady>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	2201      	movs	r2, #1
 80073fe:	409a      	lsls	r2, r3
 8007400:	4b19      	ldr	r3, [pc, #100]	; (8007468 <prvAddNewTaskToReadyList+0x10c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4313      	orrs	r3, r2
 8007406:	4a18      	ldr	r2, [pc, #96]	; (8007468 <prvAddNewTaskToReadyList+0x10c>)
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4a15      	ldr	r2, [pc, #84]	; (800746c <prvAddNewTaskToReadyList+0x110>)
 8007418:	441a      	add	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3304      	adds	r3, #4
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f7ff f8e2 	bl	80065ea <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007426:	f001 fb0f 	bl	8008a48 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800742a:	4b0d      	ldr	r3, [pc, #52]	; (8007460 <prvAddNewTaskToReadyList+0x104>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00e      	beq.n	8007450 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007432:	4b0a      	ldr	r3, [pc, #40]	; (800745c <prvAddNewTaskToReadyList+0x100>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	429a      	cmp	r2, r3
 800743e:	d207      	bcs.n	8007450 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <prvAddNewTaskToReadyList+0x114>)
 8007442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bdb0      	pop	{r4, r5, r7, pc}
 8007458:	200001a0 	.word	0x200001a0
 800745c:	200000c8 	.word	0x200000c8
 8007460:	200001ac 	.word	0x200001ac
 8007464:	200001bc 	.word	0x200001bc
 8007468:	200001a8 	.word	0x200001a8
 800746c:	200000cc 	.word	0x200000cc
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	; 0x28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800747e:	2300      	movs	r3, #0
 8007480:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <xTaskDelayUntil+0x2a>
        __asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	617b      	str	r3, [r7, #20]
    }
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10a      	bne.n	80074ba <xTaskDelayUntil+0x46>
        __asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	613b      	str	r3, [r7, #16]
    }
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80074ba:	4b2c      	ldr	r3, [pc, #176]	; (800756c <xTaskDelayUntil+0xf8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <xTaskDelayUntil+0x64>
        __asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	60fb      	str	r3, [r7, #12]
    }
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80074d8:	f000 f8e8 	bl	80076ac <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80074dc:	4b24      	ldr	r3, [pc, #144]	; (8007570 <xTaskDelayUntil+0xfc>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	4413      	add	r3, r2
 80074ea:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a3a      	ldr	r2, [r7, #32]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d20b      	bcs.n	800750e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d211      	bcs.n	8007524 <xTaskDelayUntil+0xb0>
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	429a      	cmp	r2, r3
 8007506:	d90d      	bls.n	8007524 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
 800750c:	e00a      	b.n	8007524 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	429a      	cmp	r2, r3
 8007516:	d303      	bcc.n	8007520 <xTaskDelayUntil+0xac>
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	429a      	cmp	r2, r3
 800751e:	d901      	bls.n	8007524 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8007520:	2301      	movs	r3, #1
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8007530:	2024      	movs	r0, #36	; 0x24
 8007532:	f002 fc9d 	bl	8009e70 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2100      	movs	r1, #0
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fd3a 	bl	8007fb8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8007544:	f000 f8c0 	bl	80076c8 <xTaskResumeAll>
 8007548:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d107      	bne.n	8007560 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8007550:	4b08      	ldr	r3, [pc, #32]	; (8007574 <xTaskDelayUntil+0x100>)
 8007552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007562:	4618      	mov	r0, r3
 8007564:	3728      	adds	r7, #40	; 0x28
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200001c8 	.word	0x200001c8
 8007570:	200001a4 	.word	0x200001a4
 8007574:	e000ed04 	.word	0xe000ed04

08007578 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01b      	beq.n	80075c2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800758a:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <vTaskDelay+0x68>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <vTaskDelay+0x30>
        __asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60bb      	str	r3, [r7, #8]
    }
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80075a8:	f000 f880 	bl	80076ac <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	2023      	movs	r0, #35	; 0x23
 80075b0:	f002 fc7c 	bl	8009eac <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075b4:	2100      	movs	r1, #0
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fcfe 	bl	8007fb8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80075bc:	f000 f884 	bl	80076c8 <xTaskResumeAll>
 80075c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d107      	bne.n	80075d8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <vTaskDelay+0x6c>)
 80075ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80075d8:	bf00      	nop
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	200001c8 	.word	0x200001c8
 80075e4:	e000ed04 	.word	0xe000ed04

080075e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80075ee:	4b27      	ldr	r3, [pc, #156]	; (800768c <vTaskStartScheduler+0xa4>)
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	2300      	movs	r3, #0
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	2300      	movs	r3, #0
 80075f8:	2280      	movs	r2, #128	; 0x80
 80075fa:	4925      	ldr	r1, [pc, #148]	; (8007690 <vTaskStartScheduler+0xa8>)
 80075fc:	4825      	ldr	r0, [pc, #148]	; (8007694 <vTaskStartScheduler+0xac>)
 80075fe:	f7ff fdd5 	bl	80071ac <xTaskCreate>
 8007602:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d102      	bne.n	8007610 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800760a:	f000 fd4d 	bl	80080a8 <xTimerCreateTimerTask>
 800760e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d124      	bne.n	8007660 <vTaskStartScheduler+0x78>
        __asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	60bb      	str	r3, [r7, #8]
    }
 8007628:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800762a:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <vTaskStartScheduler+0xb0>)
 800762c:	f04f 32ff 	mov.w	r2, #4294967295
 8007630:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007632:	4b1a      	ldr	r3, [pc, #104]	; (800769c <vTaskStartScheduler+0xb4>)
 8007634:	2201      	movs	r2, #1
 8007636:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007638:	4b19      	ldr	r3, [pc, #100]	; (80076a0 <vTaskStartScheduler+0xb8>)
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800763e:	4b19      	ldr	r3, [pc, #100]	; (80076a4 <vTaskStartScheduler+0xbc>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4b12      	ldr	r3, [pc, #72]	; (800768c <vTaskStartScheduler+0xa4>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d102      	bne.n	8007650 <vTaskStartScheduler+0x68>
 800764a:	f003 f90f 	bl	800a86c <SEGGER_SYSVIEW_OnIdle>
 800764e:	e004      	b.n	800765a <vTaskStartScheduler+0x72>
 8007650:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <vTaskStartScheduler+0xbc>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4618      	mov	r0, r3
 8007656:	f003 f967 	bl	800a928 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800765a:	f001 f923 	bl	80088a4 <xPortStartScheduler>
 800765e:	e00e      	b.n	800767e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007666:	d10a      	bne.n	800767e <vTaskStartScheduler+0x96>
        __asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	607b      	str	r3, [r7, #4]
    }
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800767e:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <vTaskStartScheduler+0xc0>)
 8007680:	681b      	ldr	r3, [r3, #0]
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	200001c4 	.word	0x200001c4
 8007690:	0800bae0 	.word	0x0800bae0
 8007694:	08007d19 	.word	0x08007d19
 8007698:	200001c0 	.word	0x200001c0
 800769c:	200001ac 	.word	0x200001ac
 80076a0:	200001a4 	.word	0x200001a4
 80076a4:	200000c8 	.word	0x200000c8
 80076a8:	2000000c 	.word	0x2000000c

080076ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80076b0:	4b04      	ldr	r3, [pc, #16]	; (80076c4 <vTaskSuspendAll+0x18>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3301      	adds	r3, #1
 80076b6:	4a03      	ldr	r2, [pc, #12]	; (80076c4 <vTaskSuspendAll+0x18>)
 80076b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80076ba:	bf00      	nop
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	200001c8 	.word	0x200001c8

080076c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80076d6:	4b43      	ldr	r3, [pc, #268]	; (80077e4 <xTaskResumeAll+0x11c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10a      	bne.n	80076f4 <xTaskResumeAll+0x2c>
        __asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	603b      	str	r3, [r7, #0]
    }
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80076f4:	f001 f978 	bl	80089e8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80076f8:	4b3a      	ldr	r3, [pc, #232]	; (80077e4 <xTaskResumeAll+0x11c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	4a39      	ldr	r2, [pc, #228]	; (80077e4 <xTaskResumeAll+0x11c>)
 8007700:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007702:	4b38      	ldr	r3, [pc, #224]	; (80077e4 <xTaskResumeAll+0x11c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d165      	bne.n	80077d6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800770a:	4b37      	ldr	r3, [pc, #220]	; (80077e8 <xTaskResumeAll+0x120>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d061      	beq.n	80077d6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007712:	e032      	b.n	800777a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007714:	4b35      	ldr	r3, [pc, #212]	; (80077ec <xTaskResumeAll+0x124>)
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3318      	adds	r3, #24
 8007720:	4618      	mov	r0, r3
 8007722:	f7fe ffbf 	bl	80066a4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3304      	adds	r3, #4
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe ffba 	bl	80066a4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4618      	mov	r0, r3
 8007734:	f003 f93a 	bl	800a9ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	2201      	movs	r2, #1
 800773e:	409a      	lsls	r2, r3
 8007740:	4b2b      	ldr	r3, [pc, #172]	; (80077f0 <xTaskResumeAll+0x128>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4313      	orrs	r3, r2
 8007746:	4a2a      	ldr	r2, [pc, #168]	; (80077f0 <xTaskResumeAll+0x128>)
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4a27      	ldr	r2, [pc, #156]	; (80077f4 <xTaskResumeAll+0x12c>)
 8007758:	441a      	add	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3304      	adds	r3, #4
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f7fe ff42 	bl	80065ea <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	4b23      	ldr	r3, [pc, #140]	; (80077f8 <xTaskResumeAll+0x130>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	429a      	cmp	r2, r3
 8007772:	d302      	bcc.n	800777a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8007774:	4b21      	ldr	r3, [pc, #132]	; (80077fc <xTaskResumeAll+0x134>)
 8007776:	2201      	movs	r2, #1
 8007778:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800777a:	4b1c      	ldr	r3, [pc, #112]	; (80077ec <xTaskResumeAll+0x124>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1c8      	bne.n	8007714 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007788:	f000 fb5c 	bl	8007e44 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800778c:	4b1c      	ldr	r3, [pc, #112]	; (8007800 <xTaskResumeAll+0x138>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d010      	beq.n	80077ba <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007798:	f000 f858 	bl	800784c <xTaskIncrementTick>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80077a2:	4b16      	ldr	r3, [pc, #88]	; (80077fc <xTaskResumeAll+0x134>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1f1      	bne.n	8007798 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80077b4:	4b12      	ldr	r3, [pc, #72]	; (8007800 <xTaskResumeAll+0x138>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80077ba:	4b10      	ldr	r3, [pc, #64]	; (80077fc <xTaskResumeAll+0x134>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80077c2:	2301      	movs	r3, #1
 80077c4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80077c6:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <xTaskResumeAll+0x13c>)
 80077c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80077d6:	f001 f937 	bl	8008a48 <vPortExitCritical>

    return xAlreadyYielded;
 80077da:	68bb      	ldr	r3, [r7, #8]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	200001c8 	.word	0x200001c8
 80077e8:	200001a0 	.word	0x200001a0
 80077ec:	20000160 	.word	0x20000160
 80077f0:	200001a8 	.word	0x200001a8
 80077f4:	200000cc 	.word	0x200000cc
 80077f8:	200000c8 	.word	0x200000c8
 80077fc:	200001b4 	.word	0x200001b4
 8007800:	200001b0 	.word	0x200001b0
 8007804:	e000ed04 	.word	0xe000ed04

08007808 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800780e:	4b05      	ldr	r3, [pc, #20]	; (8007824 <xTaskGetTickCount+0x1c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007814:	687b      	ldr	r3, [r7, #4]
}
 8007816:	4618      	mov	r0, r3
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	200001a4 	.word	0x200001a4

08007828 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800782e:	f001 f9c5 	bl	8008bbc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007832:	2300      	movs	r3, #0
 8007834:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8007836:	4b04      	ldr	r3, [pc, #16]	; (8007848 <xTaskGetTickCountFromISR+0x20>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800783c:	683b      	ldr	r3, [r7, #0]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	200001a4 	.word	0x200001a4

0800784c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007856:	4b50      	ldr	r3, [pc, #320]	; (8007998 <xTaskIncrementTick+0x14c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	f040 8092 	bne.w	8007984 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007860:	4b4e      	ldr	r3, [pc, #312]	; (800799c <xTaskIncrementTick+0x150>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3301      	adds	r3, #1
 8007866:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007868:	4a4c      	ldr	r2, [pc, #304]	; (800799c <xTaskIncrementTick+0x150>)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d120      	bne.n	80078b6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8007874:	4b4a      	ldr	r3, [pc, #296]	; (80079a0 <xTaskIncrementTick+0x154>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <xTaskIncrementTick+0x48>
        __asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	603b      	str	r3, [r7, #0]
    }
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <xTaskIncrementTick+0x46>
 8007894:	4b42      	ldr	r3, [pc, #264]	; (80079a0 <xTaskIncrementTick+0x154>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	4b42      	ldr	r3, [pc, #264]	; (80079a4 <xTaskIncrementTick+0x158>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a40      	ldr	r2, [pc, #256]	; (80079a0 <xTaskIncrementTick+0x154>)
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	4a40      	ldr	r2, [pc, #256]	; (80079a4 <xTaskIncrementTick+0x158>)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	4b3f      	ldr	r3, [pc, #252]	; (80079a8 <xTaskIncrementTick+0x15c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	4a3e      	ldr	r2, [pc, #248]	; (80079a8 <xTaskIncrementTick+0x15c>)
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	f000 fac7 	bl	8007e44 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80078b6:	4b3d      	ldr	r3, [pc, #244]	; (80079ac <xTaskIncrementTick+0x160>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d34c      	bcc.n	800795a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078c0:	4b37      	ldr	r3, [pc, #220]	; (80079a0 <xTaskIncrementTick+0x154>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d104      	bne.n	80078d4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ca:	4b38      	ldr	r3, [pc, #224]	; (80079ac <xTaskIncrementTick+0x160>)
 80078cc:	f04f 32ff 	mov.w	r2, #4294967295
 80078d0:	601a      	str	r2, [r3, #0]
                    break;
 80078d2:	e042      	b.n	800795a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d4:	4b32      	ldr	r3, [pc, #200]	; (80079a0 <xTaskIncrementTick+0x154>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d203      	bcs.n	80078f4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80078ec:	4a2f      	ldr	r2, [pc, #188]	; (80079ac <xTaskIncrementTick+0x160>)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078f2:	e032      	b.n	800795a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fe fed3 	bl	80066a4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	3318      	adds	r3, #24
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe feca 	bl	80066a4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4618      	mov	r0, r3
 8007914:	f003 f84a 	bl	800a9ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	2201      	movs	r2, #1
 800791e:	409a      	lsls	r2, r3
 8007920:	4b23      	ldr	r3, [pc, #140]	; (80079b0 <xTaskIncrementTick+0x164>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4313      	orrs	r3, r2
 8007926:	4a22      	ldr	r2, [pc, #136]	; (80079b0 <xTaskIncrementTick+0x164>)
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4a1f      	ldr	r2, [pc, #124]	; (80079b4 <xTaskIncrementTick+0x168>)
 8007938:	441a      	add	r2, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7fe fe52 	bl	80065ea <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4b1b      	ldr	r3, [pc, #108]	; (80079b8 <xTaskIncrementTick+0x16c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	429a      	cmp	r2, r3
 8007952:	d3b5      	bcc.n	80078c0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8007954:	2301      	movs	r3, #1
 8007956:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007958:	e7b2      	b.n	80078c0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800795a:	4b17      	ldr	r3, [pc, #92]	; (80079b8 <xTaskIncrementTick+0x16c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007960:	4914      	ldr	r1, [pc, #80]	; (80079b4 <xTaskIncrementTick+0x168>)
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d901      	bls.n	8007976 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8007972:	2301      	movs	r3, #1
 8007974:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8007976:	4b11      	ldr	r3, [pc, #68]	; (80079bc <xTaskIncrementTick+0x170>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d007      	beq.n	800798e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800797e:	2301      	movs	r3, #1
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	e004      	b.n	800798e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007984:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <xTaskIncrementTick+0x174>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3301      	adds	r3, #1
 800798a:	4a0d      	ldr	r2, [pc, #52]	; (80079c0 <xTaskIncrementTick+0x174>)
 800798c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800798e:	697b      	ldr	r3, [r7, #20]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	200001c8 	.word	0x200001c8
 800799c:	200001a4 	.word	0x200001a4
 80079a0:	20000158 	.word	0x20000158
 80079a4:	2000015c 	.word	0x2000015c
 80079a8:	200001b8 	.word	0x200001b8
 80079ac:	200001c0 	.word	0x200001c0
 80079b0:	200001a8 	.word	0x200001a8
 80079b4:	200000cc 	.word	0x200000cc
 80079b8:	200000c8 	.word	0x200000c8
 80079bc:	200001b4 	.word	0x200001b4
 80079c0:	200001b0 	.word	0x200001b0

080079c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079ca:	4b2d      	ldr	r3, [pc, #180]	; (8007a80 <vTaskSwitchContext+0xbc>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80079d2:	4b2c      	ldr	r3, [pc, #176]	; (8007a84 <vTaskSwitchContext+0xc0>)
 80079d4:	2201      	movs	r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80079d8:	e04d      	b.n	8007a76 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80079da:	4b2a      	ldr	r3, [pc, #168]	; (8007a84 <vTaskSwitchContext+0xc0>)
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e0:	4b29      	ldr	r3, [pc, #164]	; (8007a88 <vTaskSwitchContext+0xc4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	fab3 f383 	clz	r3, r3
 80079ec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	f1c3 031f 	rsb	r3, r3, #31
 80079f4:	617b      	str	r3, [r7, #20]
 80079f6:	4925      	ldr	r1, [pc, #148]	; (8007a8c <vTaskSwitchContext+0xc8>)
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10a      	bne.n	8007a20 <vTaskSwitchContext+0x5c>
        __asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	607b      	str	r3, [r7, #4]
    }
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <vTaskSwitchContext+0x5a>
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4613      	mov	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4a18      	ldr	r2, [pc, #96]	; (8007a8c <vTaskSwitchContext+0xc8>)
 8007a2c:	4413      	add	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	3308      	adds	r3, #8
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d104      	bne.n	8007a50 <vTaskSwitchContext+0x8c>
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	605a      	str	r2, [r3, #4]
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	; (8007a90 <vTaskSwitchContext+0xcc>)
 8007a58:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <vTaskSwitchContext+0xcc>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <vTaskSwitchContext+0xd0>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d102      	bne.n	8007a6c <vTaskSwitchContext+0xa8>
 8007a66:	f002 ff01 	bl	800a86c <SEGGER_SYSVIEW_OnIdle>
}
 8007a6a:	e004      	b.n	8007a76 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8007a6c:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <vTaskSwitchContext+0xcc>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f002 ff59 	bl	800a928 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8007a76:	bf00      	nop
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	200001c8 	.word	0x200001c8
 8007a84:	200001b4 	.word	0x200001b4
 8007a88:	200001a8 	.word	0x200001a8
 8007a8c:	200000cc 	.word	0x200000cc
 8007a90:	200000c8 	.word	0x200000c8
 8007a94:	200001c4 	.word	0x200001c4

08007a98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
    }
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007abe:	4b07      	ldr	r3, [pc, #28]	; (8007adc <vTaskPlaceOnEventList+0x44>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3318      	adds	r3, #24
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fe fdb3 	bl	8006632 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007acc:	2101      	movs	r1, #1
 8007ace:	6838      	ldr	r0, [r7, #0]
 8007ad0:	f000 fa72 	bl	8007fb8 <prvAddCurrentTaskToDelayedList>
}
 8007ad4:	bf00      	nop
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	200000c8 	.word	0x200000c8

08007ae0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	617b      	str	r3, [r7, #20]
    }
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b08:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <vTaskPlaceOnEventListRestricted+0x58>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3318      	adds	r3, #24
 8007b0e:	4619      	mov	r1, r3
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f7fe fd6a 	bl	80065ea <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8007b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b20:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8007b22:	2024      	movs	r0, #36	; 0x24
 8007b24:	f002 f9a4 	bl	8009e70 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	68b8      	ldr	r0, [r7, #8]
 8007b2c:	f000 fa44 	bl	8007fb8 <prvAddCurrentTaskToDelayedList>
    }
 8007b30:	bf00      	nop
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	200000c8 	.word	0x200000c8

08007b3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	60fb      	str	r3, [r7, #12]
    }
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	3318      	adds	r3, #24
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe fd99 	bl	80066a4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b72:	4b1f      	ldr	r3, [pc, #124]	; (8007bf0 <xTaskRemoveFromEventList+0xb4>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d120      	bne.n	8007bbc <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe fd90 	bl	80066a4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f002 ff10 	bl	800a9ac <SEGGER_SYSVIEW_OnTaskStartReady>
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	2201      	movs	r2, #1
 8007b92:	409a      	lsls	r2, r3
 8007b94:	4b17      	ldr	r3, [pc, #92]	; (8007bf4 <xTaskRemoveFromEventList+0xb8>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	4a16      	ldr	r2, [pc, #88]	; (8007bf4 <xTaskRemoveFromEventList+0xb8>)
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4a13      	ldr	r2, [pc, #76]	; (8007bf8 <xTaskRemoveFromEventList+0xbc>)
 8007bac:	441a      	add	r2, r3
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f7fe fd18 	bl	80065ea <vListInsertEnd>
 8007bba:	e005      	b.n	8007bc8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	3318      	adds	r3, #24
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	480e      	ldr	r0, [pc, #56]	; (8007bfc <xTaskRemoveFromEventList+0xc0>)
 8007bc4:	f7fe fd11 	bl	80065ea <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bcc:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <xTaskRemoveFromEventList+0xc4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d905      	bls.n	8007be2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007bda:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <xTaskRemoveFromEventList+0xc8>)
 8007bdc:	2201      	movs	r2, #1
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	e001      	b.n	8007be6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007be6:	697b      	ldr	r3, [r7, #20]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	200001c8 	.word	0x200001c8
 8007bf4:	200001a8 	.word	0x200001a8
 8007bf8:	200000cc 	.word	0x200000cc
 8007bfc:	20000160 	.word	0x20000160
 8007c00:	200000c8 	.word	0x200000c8
 8007c04:	200001b4 	.word	0x200001b4

08007c08 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <vTaskInternalSetTimeOutState+0x24>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007c18:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <vTaskInternalSetTimeOutState+0x28>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	605a      	str	r2, [r3, #4]
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	200001b8 	.word	0x200001b8
 8007c30:	200001a4 	.word	0x200001a4

08007c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	613b      	str	r3, [r7, #16]
    }
 8007c56:	bf00      	nop
 8007c58:	e7fe      	b.n	8007c58 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	60fb      	str	r3, [r7, #12]
    }
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007c76:	f000 feb7 	bl	80089e8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007c7a:	4b1f      	ldr	r3, [pc, #124]	; (8007cf8 <xTaskCheckForTimeOut+0xc4>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c92:	d102      	bne.n	8007c9a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007c94:	2300      	movs	r3, #0
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	e026      	b.n	8007ce8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4b17      	ldr	r3, [pc, #92]	; (8007cfc <xTaskCheckForTimeOut+0xc8>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d00a      	beq.n	8007cbc <xTaskCheckForTimeOut+0x88>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d305      	bcc.n	8007cbc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	e015      	b.n	8007ce8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d20b      	bcs.n	8007cde <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	1ad2      	subs	r2, r2, r3
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff ff98 	bl	8007c08 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	e004      	b.n	8007ce8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007ce8:	f000 feae 	bl	8008a48 <vPortExitCritical>

    return xReturn;
 8007cec:	69fb      	ldr	r3, [r7, #28]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3720      	adds	r7, #32
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	200001a4 	.word	0x200001a4
 8007cfc:	200001b8 	.word	0x200001b8

08007d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007d04:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <vTaskMissedYield+0x14>)
 8007d06:	2201      	movs	r2, #1
 8007d08:	601a      	str	r2, [r3, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	200001b4 	.word	0x200001b4

08007d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007d20:	f000 f852 	bl	8007dc8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d24:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <prvIdleTask+0x28>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d9f9      	bls.n	8007d20 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <prvIdleTask+0x2c>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007d3c:	e7f0      	b.n	8007d20 <prvIdleTask+0x8>
 8007d3e:	bf00      	nop
 8007d40:	200000cc 	.word	0x200000cc
 8007d44:	e000ed04 	.word	0xe000ed04

08007d48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d4e:	2300      	movs	r3, #0
 8007d50:	607b      	str	r3, [r7, #4]
 8007d52:	e00c      	b.n	8007d6e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4a12      	ldr	r2, [pc, #72]	; (8007da8 <prvInitialiseTaskLists+0x60>)
 8007d60:	4413      	add	r3, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fc14 	bl	8006590 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	607b      	str	r3, [r7, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d9ef      	bls.n	8007d54 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007d74:	480d      	ldr	r0, [pc, #52]	; (8007dac <prvInitialiseTaskLists+0x64>)
 8007d76:	f7fe fc0b 	bl	8006590 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007d7a:	480d      	ldr	r0, [pc, #52]	; (8007db0 <prvInitialiseTaskLists+0x68>)
 8007d7c:	f7fe fc08 	bl	8006590 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007d80:	480c      	ldr	r0, [pc, #48]	; (8007db4 <prvInitialiseTaskLists+0x6c>)
 8007d82:	f7fe fc05 	bl	8006590 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007d86:	480c      	ldr	r0, [pc, #48]	; (8007db8 <prvInitialiseTaskLists+0x70>)
 8007d88:	f7fe fc02 	bl	8006590 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007d8c:	480b      	ldr	r0, [pc, #44]	; (8007dbc <prvInitialiseTaskLists+0x74>)
 8007d8e:	f7fe fbff 	bl	8006590 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007d92:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <prvInitialiseTaskLists+0x78>)
 8007d94:	4a05      	ldr	r2, [pc, #20]	; (8007dac <prvInitialiseTaskLists+0x64>)
 8007d96:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <prvInitialiseTaskLists+0x7c>)
 8007d9a:	4a05      	ldr	r2, [pc, #20]	; (8007db0 <prvInitialiseTaskLists+0x68>)
 8007d9c:	601a      	str	r2, [r3, #0]
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	200000cc 	.word	0x200000cc
 8007dac:	20000130 	.word	0x20000130
 8007db0:	20000144 	.word	0x20000144
 8007db4:	20000160 	.word	0x20000160
 8007db8:	20000174 	.word	0x20000174
 8007dbc:	2000018c 	.word	0x2000018c
 8007dc0:	20000158 	.word	0x20000158
 8007dc4:	2000015c 	.word	0x2000015c

08007dc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dce:	e019      	b.n	8007e04 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007dd0:	f000 fe0a 	bl	80089e8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd4:	4b10      	ldr	r3, [pc, #64]	; (8007e18 <prvCheckTasksWaitingTermination+0x50>)
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fc5f 	bl	80066a4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007de6:	4b0d      	ldr	r3, [pc, #52]	; (8007e1c <prvCheckTasksWaitingTermination+0x54>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	4a0b      	ldr	r2, [pc, #44]	; (8007e1c <prvCheckTasksWaitingTermination+0x54>)
 8007dee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <prvCheckTasksWaitingTermination+0x58>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	4a0a      	ldr	r2, [pc, #40]	; (8007e20 <prvCheckTasksWaitingTermination+0x58>)
 8007df8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007dfa:	f000 fe25 	bl	8008a48 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f810 	bl	8007e24 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e04:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <prvCheckTasksWaitingTermination+0x58>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e1      	bne.n	8007dd0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000174 	.word	0x20000174
 8007e1c:	200001a0 	.word	0x200001a0
 8007e20:	20000188 	.word	0x20000188

08007e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e30:	4618      	mov	r0, r3
 8007e32:	f001 f829 	bl	8008e88 <vPortFree>
                vPortFree( pxTCB );
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 f826 	bl	8008e88 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <prvResetNextTaskUnblockTime+0x30>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <prvResetNextTaskUnblockTime+0x34>)
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295
 8007e58:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007e5a:	e005      	b.n	8007e68 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e5c:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <prvResetNextTaskUnblockTime+0x30>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a04      	ldr	r2, [pc, #16]	; (8007e78 <prvResetNextTaskUnblockTime+0x34>)
 8007e66:	6013      	str	r3, [r2, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000158 	.word	0x20000158
 8007e78:	200001c0 	.word	0x200001c0

08007e7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007e82:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <xTaskGetSchedulerState+0x34>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d102      	bne.n	8007e90 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	607b      	str	r3, [r7, #4]
 8007e8e:	e008      	b.n	8007ea2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e90:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <xTaskGetSchedulerState+0x38>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007e98:	2302      	movs	r3, #2
 8007e9a:	607b      	str	r3, [r7, #4]
 8007e9c:	e001      	b.n	8007ea2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007ea2:	687b      	ldr	r3, [r7, #4]
    }
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	200001ac 	.word	0x200001ac
 8007eb4:	200001c8 	.word	0x200001c8

08007eb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d068      	beq.n	8007fa0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007ece:	4b37      	ldr	r3, [pc, #220]	; (8007fac <xTaskPriorityDisinherit+0xf4>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d00a      	beq.n	8007eee <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	60fb      	str	r3, [r7, #12]
    }
 8007eea:	bf00      	nop
 8007eec:	e7fe      	b.n	8007eec <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	60bb      	str	r3, [r7, #8]
    }
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f10:	1e5a      	subs	r2, r3, #1
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	661a      	str	r2, [r3, #96]	; 0x60

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d03e      	beq.n	8007fa0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d13a      	bne.n	8007fa0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe fbb8 	bl	80066a4 <uxListRemove>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10a      	bne.n	8007f50 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3e:	2201      	movs	r2, #1
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	43da      	mvns	r2, r3
 8007f46:	4b1a      	ldr	r3, [pc, #104]	; (8007fb0 <xTaskPriorityDisinherit+0xf8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	4a18      	ldr	r2, [pc, #96]	; (8007fb0 <xTaskPriorityDisinherit+0xf8>)
 8007f4e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4619      	mov	r1, r3
 8007f54:	204a      	movs	r0, #74	; 0x4a
 8007f56:	f001 ffa9 	bl	8009eac <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f66:	f1c3 0205 	rsb	r2, r3, #5
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	2201      	movs	r2, #1
 8007f74:	409a      	lsls	r2, r3
 8007f76:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <xTaskPriorityDisinherit+0xf8>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	4a0c      	ldr	r2, [pc, #48]	; (8007fb0 <xTaskPriorityDisinherit+0xf8>)
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <xTaskPriorityDisinherit+0xfc>)
 8007f8e:	441a      	add	r2, r3
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	3304      	adds	r3, #4
 8007f94:	4619      	mov	r1, r3
 8007f96:	4610      	mov	r0, r2
 8007f98:	f7fe fb27 	bl	80065ea <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007fa0:	697b      	ldr	r3, [r7, #20]
    }
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	200000c8 	.word	0x200000c8
 8007fb0:	200001a8 	.word	0x200001a8
 8007fb4:	200000cc 	.word	0x200000cc

08007fb8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007fc2:	4b32      	ldr	r3, [pc, #200]	; (800808c <prvAddCurrentTaskToDelayedList+0xd4>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fc8:	4b31      	ldr	r3, [pc, #196]	; (8008090 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fb68 	bl	80066a4 <uxListRemove>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10b      	bne.n	8007ff2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007fda:	4b2d      	ldr	r3, [pc, #180]	; (8008090 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe6:	43da      	mvns	r2, r3
 8007fe8:	4b2a      	ldr	r3, [pc, #168]	; (8008094 <prvAddCurrentTaskToDelayedList+0xdc>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4013      	ands	r3, r2
 8007fee:	4a29      	ldr	r2, [pc, #164]	; (8008094 <prvAddCurrentTaskToDelayedList+0xdc>)
 8007ff0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff8:	d110      	bne.n	800801c <prvAddCurrentTaskToDelayedList+0x64>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00d      	beq.n	800801c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8008000:	4b23      	ldr	r3, [pc, #140]	; (8008090 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	211b      	movs	r1, #27
 8008006:	4618      	mov	r0, r3
 8008008:	f002 fd12 	bl	800aa30 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800800c:	4b20      	ldr	r3, [pc, #128]	; (8008090 <prvAddCurrentTaskToDelayedList+0xd8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3304      	adds	r3, #4
 8008012:	4619      	mov	r1, r3
 8008014:	4820      	ldr	r0, [pc, #128]	; (8008098 <prvAddCurrentTaskToDelayedList+0xe0>)
 8008016:	f7fe fae8 	bl	80065ea <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800801a:	e032      	b.n	8008082 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4413      	add	r3, r2
 8008022:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008024:	4b1a      	ldr	r3, [pc, #104]	; (8008090 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	429a      	cmp	r2, r3
 8008032:	d20f      	bcs.n	8008054 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8008034:	4b16      	ldr	r3, [pc, #88]	; (8008090 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2104      	movs	r1, #4
 800803a:	4618      	mov	r0, r3
 800803c:	f002 fcf8 	bl	800aa30 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008040:	4b16      	ldr	r3, [pc, #88]	; (800809c <prvAddCurrentTaskToDelayedList+0xe4>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	4b12      	ldr	r3, [pc, #72]	; (8008090 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f7fe faf0 	bl	8006632 <vListInsert>
}
 8008052:	e016      	b.n	8008082 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2104      	movs	r1, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f002 fce8 	bl	800aa30 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008060:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3304      	adds	r3, #4
 800806a:	4619      	mov	r1, r3
 800806c:	4610      	mov	r0, r2
 800806e:	f7fe fae0 	bl	8006632 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <prvAddCurrentTaskToDelayedList+0xec>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	429a      	cmp	r2, r3
 800807a:	d202      	bcs.n	8008082 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800807c:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <prvAddCurrentTaskToDelayedList+0xec>)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	6013      	str	r3, [r2, #0]
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	200001a4 	.word	0x200001a4
 8008090:	200000c8 	.word	0x200000c8
 8008094:	200001a8 	.word	0x200001a8
 8008098:	2000018c 	.word	0x2000018c
 800809c:	2000015c 	.word	0x2000015c
 80080a0:	20000158 	.word	0x20000158
 80080a4:	200001c0 	.word	0x200001c0

080080a8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80080b2:	f000 fb31 	bl	8008718 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80080b6:	4b11      	ldr	r3, [pc, #68]	; (80080fc <xTimerCreateTimerTask+0x54>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00b      	beq.n	80080d6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80080be:	4b10      	ldr	r3, [pc, #64]	; (8008100 <xTimerCreateTimerTask+0x58>)
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	2304      	movs	r3, #4
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	2300      	movs	r3, #0
 80080c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080cc:	490d      	ldr	r1, [pc, #52]	; (8008104 <xTimerCreateTimerTask+0x5c>)
 80080ce:	480e      	ldr	r0, [pc, #56]	; (8008108 <xTimerCreateTimerTask+0x60>)
 80080d0:	f7ff f86c 	bl	80071ac <xTaskCreate>
 80080d4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10a      	bne.n	80080f2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	603b      	str	r3, [r7, #0]
    }
 80080ee:	bf00      	nop
 80080f0:	e7fe      	b.n	80080f0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80080f2:	687b      	ldr	r3, [r7, #4]
    }
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200001fc 	.word	0x200001fc
 8008100:	20000200 	.word	0x20000200
 8008104:	0800bae8 	.word	0x0800bae8
 8008108:	080082f9 	.word	0x080082f9

0800810c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800811a:	202c      	movs	r0, #44	; 0x2c
 800811c:	f000 fdd4 	bl	8008cc8 <pvPortMalloc>
 8008120:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00d      	beq.n	8008144 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 f805 	bl	800814e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8008144:	697b      	ldr	r3, [r7, #20]
        }
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800814e:	b580      	push	{r7, lr}
 8008150:	b086      	sub	sp, #24
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	607a      	str	r2, [r7, #4]
 800815a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10a      	bne.n	8008178 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	617b      	str	r3, [r7, #20]
    }
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	2b00      	cmp	r3, #0
 800817c:	d01e      	beq.n	80081bc <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800817e:	f000 facb 	bl	8008718 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	6a3a      	ldr	r2, [r7, #32]
 8008198:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	3304      	adds	r3, #4
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fa16 	bl	80065d0 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d008      	beq.n	80081bc <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081b0:	f043 0304 	orr.w	r3, r3, #4
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80081bc:	bf00      	nop
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08a      	sub	sp, #40	; 0x28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <xTimerGenericCommand+0x2e>
        __asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	623b      	str	r3, [r7, #32]
    }
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80081f2:	4b1a      	ldr	r3, [pc, #104]	; (800825c <xTimerGenericCommand+0x98>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d02a      	beq.n	8008250 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b05      	cmp	r3, #5
 800820a:	dc18      	bgt.n	800823e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800820c:	f7ff fe36 	bl	8007e7c <xTaskGetSchedulerState>
 8008210:	4603      	mov	r3, r0
 8008212:	2b02      	cmp	r3, #2
 8008214:	d109      	bne.n	800822a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <xTimerGenericCommand+0x98>)
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	f107 0114 	add.w	r1, r7, #20
 800821e:	2300      	movs	r3, #0
 8008220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008222:	f7fe fb59 	bl	80068d8 <xQueueGenericSend>
 8008226:	6278      	str	r0, [r7, #36]	; 0x24
 8008228:	e012      	b.n	8008250 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800822a:	4b0c      	ldr	r3, [pc, #48]	; (800825c <xTimerGenericCommand+0x98>)
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	f107 0114 	add.w	r1, r7, #20
 8008232:	2300      	movs	r3, #0
 8008234:	2200      	movs	r2, #0
 8008236:	f7fe fb4f 	bl	80068d8 <xQueueGenericSend>
 800823a:	6278      	str	r0, [r7, #36]	; 0x24
 800823c:	e008      	b.n	8008250 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800823e:	4b07      	ldr	r3, [pc, #28]	; (800825c <xTimerGenericCommand+0x98>)
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	f107 0114 	add.w	r1, r7, #20
 8008246:	2300      	movs	r3, #0
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	f7fe fc6b 	bl	8006b24 <xQueueGenericSendFromISR>
 800824e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8008252:	4618      	mov	r0, r3
 8008254:	3728      	adds	r7, #40	; 0x28
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	200001fc 	.word	0x200001fc

08008260 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af02      	add	r7, sp, #8
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800826a:	4b22      	ldr	r3, [pc, #136]	; (80082f4 <prvProcessExpiredTimer+0x94>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	3304      	adds	r3, #4
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fa13 	bl	80066a4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d022      	beq.n	80082d2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	699a      	ldr	r2, [r3, #24]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	18d1      	adds	r1, r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	6978      	ldr	r0, [r7, #20]
 800829a:	f000 f8d1 	bl	8008440 <prvInsertTimerInActiveList>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01f      	beq.n	80082e4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082a4:	2300      	movs	r3, #0
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	2300      	movs	r3, #0
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	2100      	movs	r1, #0
 80082ae:	6978      	ldr	r0, [r7, #20]
 80082b0:	f7ff ff88 	bl	80081c4 <xTimerGenericCommand>
 80082b4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d113      	bne.n	80082e4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	60fb      	str	r3, [r7, #12]
    }
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082d8:	f023 0301 	bic.w	r3, r3, #1
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	6978      	ldr	r0, [r7, #20]
 80082ea:	4798      	blx	r3
    }
 80082ec:	bf00      	nop
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	200001f4 	.word	0x200001f4

080082f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008300:	f107 0308 	add.w	r3, r7, #8
 8008304:	4618      	mov	r0, r3
 8008306:	f000 f857 	bl	80083b8 <prvGetNextExpireTime>
 800830a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4619      	mov	r1, r3
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f803 	bl	800831c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008316:	f000 f8d5 	bl	80084c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800831a:	e7f1      	b.n	8008300 <prvTimerTask+0x8>

0800831c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008326:	f7ff f9c1 	bl	80076ac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800832a:	f107 0308 	add.w	r3, r7, #8
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f866 	bl	8008400 <prvSampleTimeNow>
 8008334:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d130      	bne.n	800839e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <prvProcessTimerOrBlockTask+0x3c>
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	429a      	cmp	r2, r3
 8008348:	d806      	bhi.n	8008358 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800834a:	f7ff f9bd 	bl	80076c8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800834e:	68f9      	ldr	r1, [r7, #12]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff ff85 	bl	8008260 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008356:	e024      	b.n	80083a2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d008      	beq.n	8008370 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800835e:	4b13      	ldr	r3, [pc, #76]	; (80083ac <prvProcessTimerOrBlockTask+0x90>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <prvProcessTimerOrBlockTask+0x50>
 8008368:	2301      	movs	r3, #1
 800836a:	e000      	b.n	800836e <prvProcessTimerOrBlockTask+0x52>
 800836c:	2300      	movs	r3, #0
 800836e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008370:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <prvProcessTimerOrBlockTask+0x94>)
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	4619      	mov	r1, r3
 800837e:	f7fe fee1 	bl	8007144 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008382:	f7ff f9a1 	bl	80076c8 <xTaskResumeAll>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800838c:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <prvProcessTimerOrBlockTask+0x98>)
 800838e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	f3bf 8f6f 	isb	sy
    }
 800839c:	e001      	b.n	80083a2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800839e:	f7ff f993 	bl	80076c8 <xTaskResumeAll>
    }
 80083a2:	bf00      	nop
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	200001f8 	.word	0x200001f8
 80083b0:	200001fc 	.word	0x200001fc
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083c0:	4b0e      	ldr	r3, [pc, #56]	; (80083fc <prvGetNextExpireTime+0x44>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <prvGetNextExpireTime+0x16>
 80083ca:	2201      	movs	r2, #1
 80083cc:	e000      	b.n	80083d0 <prvGetNextExpireTime+0x18>
 80083ce:	2200      	movs	r2, #0
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d105      	bne.n	80083e8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083dc:	4b07      	ldr	r3, [pc, #28]	; (80083fc <prvGetNextExpireTime+0x44>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	e001      	b.n	80083ec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80083ec:	68fb      	ldr	r3, [r7, #12]
    }
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	200001f4 	.word	0x200001f4

08008400 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008408:	f7ff f9fe 	bl	8007808 <xTaskGetTickCount>
 800840c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800840e:	4b0b      	ldr	r3, [pc, #44]	; (800843c <prvSampleTimeNow+0x3c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	429a      	cmp	r2, r3
 8008416:	d205      	bcs.n	8008424 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008418:	f000 f91a 	bl	8008650 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	e002      	b.n	800842a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800842a:	4a04      	ldr	r2, [pc, #16]	; (800843c <prvSampleTimeNow+0x3c>)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008430:	68fb      	ldr	r3, [r7, #12]
    }
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000204 	.word	0x20000204

08008440 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d812      	bhi.n	800848c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	1ad2      	subs	r2, r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	429a      	cmp	r2, r3
 8008472:	d302      	bcc.n	800847a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008474:	2301      	movs	r3, #1
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e01b      	b.n	80084b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800847a:	4b10      	ldr	r3, [pc, #64]	; (80084bc <prvInsertTimerInActiveList+0x7c>)
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3304      	adds	r3, #4
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f7fe f8d4 	bl	8006632 <vListInsert>
 800848a:	e012      	b.n	80084b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d206      	bcs.n	80084a2 <prvInsertTimerInActiveList+0x62>
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d302      	bcc.n	80084a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800849c:	2301      	movs	r3, #1
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	e007      	b.n	80084b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084a2:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <prvInsertTimerInActiveList+0x80>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3304      	adds	r3, #4
 80084aa:	4619      	mov	r1, r3
 80084ac:	4610      	mov	r0, r2
 80084ae:	f7fe f8c0 	bl	8006632 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80084b2:	697b      	ldr	r3, [r7, #20]
    }
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	200001f8 	.word	0x200001f8
 80084c0:	200001f4 	.word	0x200001f4

080084c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08c      	sub	sp, #48	; 0x30
 80084c8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ca:	e0ae      	b.n	800862a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f2c0 80aa 	blt.w	8008628 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	3304      	adds	r3, #4
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe f8dd 	bl	80066a4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ea:	1d3b      	adds	r3, r7, #4
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff ff87 	bl	8008400 <prvSampleTimeNow>
 80084f2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b09      	cmp	r3, #9
 80084f8:	f200 8097 	bhi.w	800862a <prvProcessReceivedCommands+0x166>
 80084fc:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <prvProcessReceivedCommands+0x40>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	0800852d 	.word	0x0800852d
 8008508:	0800852d 	.word	0x0800852d
 800850c:	0800852d 	.word	0x0800852d
 8008510:	080085a1 	.word	0x080085a1
 8008514:	080085b5 	.word	0x080085b5
 8008518:	080085ff 	.word	0x080085ff
 800851c:	0800852d 	.word	0x0800852d
 8008520:	0800852d 	.word	0x0800852d
 8008524:	080085a1 	.word	0x080085a1
 8008528:	080085b5 	.word	0x080085b5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	b2da      	uxtb	r2, r3
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	18d1      	adds	r1, r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6a3a      	ldr	r2, [r7, #32]
 800854a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800854c:	f7ff ff78 	bl	8008440 <prvInsertTimerInActiveList>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d069      	beq.n	800862a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800855c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d05e      	beq.n	800862a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	441a      	add	r2, r3
 8008574:	2300      	movs	r3, #0
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	2100      	movs	r1, #0
 800857c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800857e:	f7ff fe21 	bl	80081c4 <xTimerGenericCommand>
 8008582:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d14f      	bne.n	800862a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	61bb      	str	r3, [r7, #24]
    }
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085a6:	f023 0301 	bic.w	r3, r3, #1
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80085b2:	e03a      	b.n	800862a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ba:	f043 0301 	orr.w	r3, r3, #1
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10a      	bne.n	80085ea <prvProcessReceivedCommands+0x126>
        __asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	617b      	str	r3, [r7, #20]
    }
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	699a      	ldr	r2, [r3, #24]
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	18d1      	adds	r1, r2, r3
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	6a3a      	ldr	r2, [r7, #32]
 80085f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085f8:	f7ff ff22 	bl	8008440 <prvInsertTimerInActiveList>
                        break;
 80085fc:	e015      	b.n	800862a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b00      	cmp	r3, #0
 800860a:	d103      	bne.n	8008614 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800860c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800860e:	f000 fc3b 	bl	8008e88 <vPortFree>
 8008612:	e00a      	b.n	800862a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	b2da      	uxtb	r2, r3
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008626:	e000      	b.n	800862a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8008628:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800862a:	4b08      	ldr	r3, [pc, #32]	; (800864c <prvProcessReceivedCommands+0x188>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f107 0108 	add.w	r1, r7, #8
 8008632:	2200      	movs	r2, #0
 8008634:	4618      	mov	r0, r3
 8008636:	f7fe fb33 	bl	8006ca0 <xQueueReceive>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	f47f af45 	bne.w	80084cc <prvProcessReceivedCommands+0x8>
        }
    }
 8008642:	bf00      	nop
 8008644:	bf00      	nop
 8008646:	3728      	adds	r7, #40	; 0x28
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	200001fc 	.word	0x200001fc

08008650 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008656:	e048      	b.n	80086ea <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008658:	4b2d      	ldr	r3, [pc, #180]	; (8008710 <prvSwitchTimerLists+0xc0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008662:	4b2b      	ldr	r3, [pc, #172]	; (8008710 <prvSwitchTimerLists+0xc0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3304      	adds	r3, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe f817 	bl	80066a4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d02e      	beq.n	80086ea <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	4413      	add	r3, r2
 8008694:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	429a      	cmp	r2, r3
 800869c:	d90e      	bls.n	80086bc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086aa:	4b19      	ldr	r3, [pc, #100]	; (8008710 <prvSwitchTimerLists+0xc0>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3304      	adds	r3, #4
 80086b2:	4619      	mov	r1, r3
 80086b4:	4610      	mov	r0, r2
 80086b6:	f7fd ffbc 	bl	8006632 <vListInsert>
 80086ba:	e016      	b.n	80086ea <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086bc:	2300      	movs	r3, #0
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	2300      	movs	r3, #0
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	2100      	movs	r1, #0
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff fd7c 	bl	80081c4 <xTimerGenericCommand>
 80086cc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10a      	bne.n	80086ea <prvSwitchTimerLists+0x9a>
        __asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	603b      	str	r3, [r7, #0]
    }
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086ea:	4b09      	ldr	r3, [pc, #36]	; (8008710 <prvSwitchTimerLists+0xc0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1b1      	bne.n	8008658 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <prvSwitchTimerLists+0xc0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80086fa:	4b06      	ldr	r3, [pc, #24]	; (8008714 <prvSwitchTimerLists+0xc4>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a04      	ldr	r2, [pc, #16]	; (8008710 <prvSwitchTimerLists+0xc0>)
 8008700:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008702:	4a04      	ldr	r2, [pc, #16]	; (8008714 <prvSwitchTimerLists+0xc4>)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	6013      	str	r3, [r2, #0]
    }
 8008708:	bf00      	nop
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	200001f4 	.word	0x200001f4
 8008714:	200001f8 	.word	0x200001f8

08008718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800871c:	f000 f964 	bl	80089e8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008720:	4b12      	ldr	r3, [pc, #72]	; (800876c <prvCheckForValidListAndQueue+0x54>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d11d      	bne.n	8008764 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008728:	4811      	ldr	r0, [pc, #68]	; (8008770 <prvCheckForValidListAndQueue+0x58>)
 800872a:	f7fd ff31 	bl	8006590 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800872e:	4811      	ldr	r0, [pc, #68]	; (8008774 <prvCheckForValidListAndQueue+0x5c>)
 8008730:	f7fd ff2e 	bl	8006590 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008734:	4b10      	ldr	r3, [pc, #64]	; (8008778 <prvCheckForValidListAndQueue+0x60>)
 8008736:	4a0e      	ldr	r2, [pc, #56]	; (8008770 <prvCheckForValidListAndQueue+0x58>)
 8008738:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800873a:	4b10      	ldr	r3, [pc, #64]	; (800877c <prvCheckForValidListAndQueue+0x64>)
 800873c:	4a0d      	ldr	r2, [pc, #52]	; (8008774 <prvCheckForValidListAndQueue+0x5c>)
 800873e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008740:	2200      	movs	r2, #0
 8008742:	210c      	movs	r1, #12
 8008744:	200a      	movs	r0, #10
 8008746:	f7fe f83f 	bl	80067c8 <xQueueGenericCreate>
 800874a:	4603      	mov	r3, r0
 800874c:	4a07      	ldr	r2, [pc, #28]	; (800876c <prvCheckForValidListAndQueue+0x54>)
 800874e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008750:	4b06      	ldr	r3, [pc, #24]	; (800876c <prvCheckForValidListAndQueue+0x54>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008758:	4b04      	ldr	r3, [pc, #16]	; (800876c <prvCheckForValidListAndQueue+0x54>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4908      	ldr	r1, [pc, #32]	; (8008780 <prvCheckForValidListAndQueue+0x68>)
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fcbe 	bl	80070e0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008764:	f000 f970 	bl	8008a48 <vPortExitCritical>
    }
 8008768:	bf00      	nop
 800876a:	bd80      	pop	{r7, pc}
 800876c:	200001fc 	.word	0x200001fc
 8008770:	200001cc 	.word	0x200001cc
 8008774:	200001e0 	.word	0x200001e0
 8008778:	200001f4 	.word	0x200001f4
 800877c:	200001f8 	.word	0x200001f8
 8008780:	0800baf0 	.word	0x0800baf0

08008784 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	3b04      	subs	r3, #4
 8008794:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800879c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3b04      	subs	r3, #4
 80087a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f023 0201 	bic.w	r2, r3, #1
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3b04      	subs	r3, #4
 80087b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80087b4:	4a0c      	ldr	r2, [pc, #48]	; (80087e8 <pxPortInitialiseStack+0x64>)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3b14      	subs	r3, #20
 80087be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3b04      	subs	r3, #4
 80087ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f06f 0202 	mvn.w	r2, #2
 80087d2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	3b20      	subs	r3, #32
 80087d8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80087da:	68fb      	ldr	r3, [r7, #12]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	080087ed 	.word	0x080087ed

080087ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80087f6:	4b12      	ldr	r3, [pc, #72]	; (8008840 <prvTaskExitError+0x54>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fe:	d00a      	beq.n	8008816 <prvTaskExitError+0x2a>
        __asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	60fb      	str	r3, [r7, #12]
    }
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <prvTaskExitError+0x28>
        __asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	60bb      	str	r3, [r7, #8]
    }
 8008828:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800882a:	bf00      	nop
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0fc      	beq.n	800882c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008832:	bf00      	nop
 8008834:	bf00      	nop
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	20000010 	.word	0x20000010
	...

08008850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008850:	4b07      	ldr	r3, [pc, #28]	; (8008870 <pxCurrentTCBConst2>)
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	6808      	ldr	r0, [r1, #0]
 8008856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885a:	f380 8809 	msr	PSP, r0
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f380 8811 	msr	BASEPRI, r0
 800886a:	4770      	bx	lr
 800886c:	f3af 8000 	nop.w

08008870 <pxCurrentTCBConst2>:
 8008870:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008878:	4808      	ldr	r0, [pc, #32]	; (800889c <prvPortStartFirstTask+0x24>)
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	6800      	ldr	r0, [r0, #0]
 800887e:	f380 8808 	msr	MSP, r0
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f380 8814 	msr	CONTROL, r0
 800888a:	b662      	cpsie	i
 800888c:	b661      	cpsie	f
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	df00      	svc	0
 8008898:	bf00      	nop
 800889a:	0000      	.short	0x0000
 800889c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop

080088a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088aa:	4b46      	ldr	r3, [pc, #280]	; (80089c4 <xPortStartScheduler+0x120>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a46      	ldr	r2, [pc, #280]	; (80089c8 <xPortStartScheduler+0x124>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d10a      	bne.n	80088ca <xPortStartScheduler+0x26>
        __asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	613b      	str	r3, [r7, #16]
    }
 80088c6:	bf00      	nop
 80088c8:	e7fe      	b.n	80088c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088ca:	4b3e      	ldr	r3, [pc, #248]	; (80089c4 <xPortStartScheduler+0x120>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a3f      	ldr	r2, [pc, #252]	; (80089cc <xPortStartScheduler+0x128>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d10a      	bne.n	80088ea <xPortStartScheduler+0x46>
        __asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	60fb      	str	r3, [r7, #12]
    }
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088ea:	4b39      	ldr	r3, [pc, #228]	; (80089d0 <xPortStartScheduler+0x12c>)
 80088ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	22ff      	movs	r2, #255	; 0xff
 80088fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	b2db      	uxtb	r3, r3
 8008902:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800890c:	b2da      	uxtb	r2, r3
 800890e:	4b31      	ldr	r3, [pc, #196]	; (80089d4 <xPortStartScheduler+0x130>)
 8008910:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008912:	4b31      	ldr	r3, [pc, #196]	; (80089d8 <xPortStartScheduler+0x134>)
 8008914:	2207      	movs	r2, #7
 8008916:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008918:	e009      	b.n	800892e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800891a:	4b2f      	ldr	r3, [pc, #188]	; (80089d8 <xPortStartScheduler+0x134>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3b01      	subs	r3, #1
 8008920:	4a2d      	ldr	r2, [pc, #180]	; (80089d8 <xPortStartScheduler+0x134>)
 8008922:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	b2db      	uxtb	r3, r3
 800892c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008936:	2b80      	cmp	r3, #128	; 0x80
 8008938:	d0ef      	beq.n	800891a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800893a:	4b27      	ldr	r3, [pc, #156]	; (80089d8 <xPortStartScheduler+0x134>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f1c3 0307 	rsb	r3, r3, #7
 8008942:	2b04      	cmp	r3, #4
 8008944:	d00a      	beq.n	800895c <xPortStartScheduler+0xb8>
        __asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	60bb      	str	r3, [r7, #8]
    }
 8008958:	bf00      	nop
 800895a:	e7fe      	b.n	800895a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800895c:	4b1e      	ldr	r3, [pc, #120]	; (80089d8 <xPortStartScheduler+0x134>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	021b      	lsls	r3, r3, #8
 8008962:	4a1d      	ldr	r2, [pc, #116]	; (80089d8 <xPortStartScheduler+0x134>)
 8008964:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008966:	4b1c      	ldr	r3, [pc, #112]	; (80089d8 <xPortStartScheduler+0x134>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800896e:	4a1a      	ldr	r2, [pc, #104]	; (80089d8 <xPortStartScheduler+0x134>)
 8008970:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	b2da      	uxtb	r2, r3
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800897a:	4b18      	ldr	r3, [pc, #96]	; (80089dc <xPortStartScheduler+0x138>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a17      	ldr	r2, [pc, #92]	; (80089dc <xPortStartScheduler+0x138>)
 8008980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008984:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008986:	4b15      	ldr	r3, [pc, #84]	; (80089dc <xPortStartScheduler+0x138>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a14      	ldr	r2, [pc, #80]	; (80089dc <xPortStartScheduler+0x138>)
 800898c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008990:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008992:	f000 f8e3 	bl	8008b5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008996:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <xPortStartScheduler+0x13c>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800899c:	f000 f902 	bl	8008ba4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089a0:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <xPortStartScheduler+0x140>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a0f      	ldr	r2, [pc, #60]	; (80089e4 <xPortStartScheduler+0x140>)
 80089a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80089ac:	f7ff ff64 	bl	8008878 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80089b0:	f7ff f808 	bl	80079c4 <vTaskSwitchContext>
    prvTaskExitError();
 80089b4:	f7ff ff1a 	bl	80087ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	e000ed00 	.word	0xe000ed00
 80089c8:	410fc271 	.word	0x410fc271
 80089cc:	410fc270 	.word	0x410fc270
 80089d0:	e000e400 	.word	0xe000e400
 80089d4:	20000208 	.word	0x20000208
 80089d8:	2000020c 	.word	0x2000020c
 80089dc:	e000ed20 	.word	0xe000ed20
 80089e0:	20000010 	.word	0x20000010
 80089e4:	e000ef34 	.word	0xe000ef34

080089e8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
        __asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
    }
 8008a00:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008a02:	4b0f      	ldr	r3, [pc, #60]	; (8008a40 <vPortEnterCritical+0x58>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3301      	adds	r3, #1
 8008a08:	4a0d      	ldr	r2, [pc, #52]	; (8008a40 <vPortEnterCritical+0x58>)
 8008a0a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008a0c:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <vPortEnterCritical+0x58>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d10f      	bne.n	8008a34 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a14:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <vPortEnterCritical+0x5c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <vPortEnterCritical+0x4c>
        __asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	603b      	str	r3, [r7, #0]
    }
 8008a30:	bf00      	nop
 8008a32:	e7fe      	b.n	8008a32 <vPortEnterCritical+0x4a>
    }
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	20000010 	.word	0x20000010
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008a4e:	4b12      	ldr	r3, [pc, #72]	; (8008a98 <vPortExitCritical+0x50>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10a      	bne.n	8008a6c <vPortExitCritical+0x24>
        __asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	607b      	str	r3, [r7, #4]
    }
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <vPortExitCritical+0x50>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	4a09      	ldr	r2, [pc, #36]	; (8008a98 <vPortExitCritical+0x50>)
 8008a74:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008a76:	4b08      	ldr	r3, [pc, #32]	; (8008a98 <vPortExitCritical+0x50>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d105      	bne.n	8008a8a <vPortExitCritical+0x42>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	f383 8811 	msr	BASEPRI, r3
    }
 8008a88:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000010 	.word	0x20000010
 8008a9c:	00000000 	.word	0x00000000

08008aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008aa0:	f3ef 8009 	mrs	r0, PSP
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <pxCurrentTCBConst>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	f01e 0f10 	tst.w	lr, #16
 8008ab0:	bf08      	it	eq
 8008ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	6010      	str	r0, [r2, #0]
 8008abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ac4:	f380 8811 	msr	BASEPRI, r0
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f7fe ff78 	bl	80079c4 <vTaskSwitchContext>
 8008ad4:	f04f 0000 	mov.w	r0, #0
 8008ad8:	f380 8811 	msr	BASEPRI, r0
 8008adc:	bc09      	pop	{r0, r3}
 8008ade:	6819      	ldr	r1, [r3, #0]
 8008ae0:	6808      	ldr	r0, [r1, #0]
 8008ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae6:	f01e 0f10 	tst.w	lr, #16
 8008aea:	bf08      	it	eq
 8008aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008af0:	f380 8809 	msr	PSP, r0
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst>:
 8008b00:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
        __asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	607b      	str	r3, [r7, #4]
    }
 8008b20:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8008b22:	f001 fe29 	bl	800a778 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008b26:	f7fe fe91 	bl	800784c <xTaskIncrementTick>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d006      	beq.n	8008b3e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8008b30:	f001 fe80 	bl	800a834 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b34:	4b08      	ldr	r3, [pc, #32]	; (8008b58 <SysTick_Handler+0x50>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	e001      	b.n	8008b42 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8008b3e:	f001 fe5d 	bl	800a7fc <SEGGER_SYSVIEW_RecordExitISR>
 8008b42:	2300      	movs	r3, #0
 8008b44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	f383 8811 	msr	BASEPRI, r3
    }
 8008b4c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <vPortSetupTimerInterrupt+0x34>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b66:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <vPortSetupTimerInterrupt+0x38>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <vPortSetupTimerInterrupt+0x3c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a0a      	ldr	r2, [pc, #40]	; (8008b9c <vPortSetupTimerInterrupt+0x40>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	4a09      	ldr	r2, [pc, #36]	; (8008ba0 <vPortSetupTimerInterrupt+0x44>)
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b7e:	4b04      	ldr	r3, [pc, #16]	; (8008b90 <vPortSetupTimerInterrupt+0x34>)
 8008b80:	2207      	movs	r2, #7
 8008b82:	601a      	str	r2, [r3, #0]
}
 8008b84:	bf00      	nop
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	e000e010 	.word	0xe000e010
 8008b94:	e000e018 	.word	0xe000e018
 8008b98:	20000000 	.word	0x20000000
 8008b9c:	51eb851f 	.word	0x51eb851f
 8008ba0:	e000e014 	.word	0xe000e014

08008ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008bb4 <vPortEnableVFP+0x10>
 8008ba8:	6801      	ldr	r1, [r0, #0]
 8008baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bae:	6001      	str	r1, [r0, #0]
 8008bb0:	4770      	bx	lr
 8008bb2:	0000      	.short	0x0000
 8008bb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop

08008bbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
    	vSetVarulMaxPRIGROUPValue();
 8008bc2:	f000 f83b 	bl	8008c3c <vSetVarulMaxPRIGROUPValue>
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008bc6:	f3ef 8305 	mrs	r3, IPSR
 8008bca:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2b0f      	cmp	r3, #15
 8008bd0:	d914      	bls.n	8008bfc <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bd2:	4a16      	ldr	r2, [pc, #88]	; (8008c2c <vPortValidateInterruptPriority+0x70>)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bdc:	4b14      	ldr	r3, [pc, #80]	; (8008c30 <vPortValidateInterruptPriority+0x74>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	7afa      	ldrb	r2, [r7, #11]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d20a      	bcs.n	8008bfc <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	607b      	str	r3, [r7, #4]
    }
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <vPortValidateInterruptPriority+0x78>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c04:	4b0c      	ldr	r3, [pc, #48]	; (8008c38 <vPortValidateInterruptPriority+0x7c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d90a      	bls.n	8008c22 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	603b      	str	r3, [r7, #0]
    }
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <vPortValidateInterruptPriority+0x64>
    }
 8008c22:	bf00      	nop
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	e000e3f0 	.word	0xe000e3f0
 8008c30:	20000208 	.word	0x20000208
 8008c34:	e000ed0c 	.word	0xe000ed0c
 8008c38:	2000020c 	.word	0x2000020c

08008c3c <vSetVarulMaxPRIGROUPValue>:

    //###########################################################
    // Add function below in file port.c
    #if( configASSERT_DEFINED == 1 )
    void vSetVarulMaxPRIGROUPValue( void )
    {
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
    	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c42:	4b1f      	ldr	r3, [pc, #124]	; (8008cc0 <vSetVarulMaxPRIGROUPValue+0x84>)
 8008c44:	60fb      	str	r3, [r7, #12]
    	volatile uint8_t ucMaxPriorityValue;
    	/* Determine the number of priority bits available.  First write to all
    	possible bits. */
    	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	22ff      	movs	r2, #255	; 0xff
 8008c4a:	701a      	strb	r2, [r3, #0]
    	/* Read the value back to see how many bits stuck. */
    	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	71fb      	strb	r3, [r7, #7]
    	/* Calculate the maximum acceptable priority group value for the number
    	of bits read back. */
    	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c54:	4b1b      	ldr	r3, [pc, #108]	; (8008cc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008c56:	2207      	movs	r2, #7
 8008c58:	601a      	str	r2, [r3, #0]
    	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c5a:	e009      	b.n	8008c70 <vSetVarulMaxPRIGROUPValue+0x34>
    	{
    		ulMaxPRIGROUPValue--;
 8008c5c:	4b19      	ldr	r3, [pc, #100]	; (8008cc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	4a18      	ldr	r2, [pc, #96]	; (8008cc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008c64:	6013      	str	r3, [r2, #0]
    		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c66:	79fb      	ldrb	r3, [r7, #7]
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	71fb      	strb	r3, [r7, #7]
    	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c78:	2b80      	cmp	r3, #128	; 0x80
 8008c7a:	d0ef      	beq.n	8008c5c <vSetVarulMaxPRIGROUPValue+0x20>
    #ifdef configPRIO_BITS
    	{
    		/* Check the FreeRTOS configuration that defines the number of
    		priority bits matches the number of priority bits actually queried
    		from the hardware. */
    		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c7c:	4b11      	ldr	r3, [pc, #68]	; (8008cc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f1c3 0307 	rsb	r3, r3, #7
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d00a      	beq.n	8008c9e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	60bb      	str	r3, [r7, #8]
    }
 8008c9a:	bf00      	nop
 8008c9c:	e7fe      	b.n	8008c9c <vSetVarulMaxPRIGROUPValue+0x60>
    	}
    #endif
    	/* Shift the priority group value back to its position within the AIRCR
    	register. */
    	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c9e:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	4a07      	ldr	r2, [pc, #28]	; (8008cc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008ca6:	6013      	str	r3, [r2, #0]
    	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ca8:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cb0:	4a04      	ldr	r2, [pc, #16]	; (8008cc4 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008cb2:	6013      	str	r3, [r2, #0]
    }
 8008cb4:	bf00      	nop
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	e000e400 	.word	0xe000e400
 8008cc4:	2000020c 	.word	0x2000020c

08008cc8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08a      	sub	sp, #40	; 0x28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008cd4:	f7fe fcea 	bl	80076ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008cd8:	4b65      	ldr	r3, [pc, #404]	; (8008e70 <pvPortMalloc+0x1a8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008ce0:	f000 f934 	bl	8008f4c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ce4:	4b63      	ldr	r3, [pc, #396]	; (8008e74 <pvPortMalloc+0x1ac>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4013      	ands	r3, r2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f040 80a7 	bne.w	8008e40 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d02d      	beq.n	8008d54 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8008cf8:	2208      	movs	r2, #8
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d227      	bcs.n	8008d54 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008d04:	2208      	movs	r2, #8
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4413      	add	r3, r2
 8008d0a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d021      	beq.n	8008d5a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f023 0307 	bic.w	r3, r3, #7
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d214      	bcs.n	8008d4e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f023 0307 	bic.w	r3, r3, #7
 8008d2a:	3308      	adds	r3, #8
 8008d2c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f003 0307 	and.w	r3, r3, #7
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d010      	beq.n	8008d5a <pvPortMalloc+0x92>
        __asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	617b      	str	r3, [r7, #20]
    }
 8008d4a:	bf00      	nop
 8008d4c:	e7fe      	b.n	8008d4c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d52:	e002      	b.n	8008d5a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	607b      	str	r3, [r7, #4]
 8008d58:	e000      	b.n	8008d5c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d5a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d06e      	beq.n	8008e40 <pvPortMalloc+0x178>
 8008d62:	4b45      	ldr	r3, [pc, #276]	; (8008e78 <pvPortMalloc+0x1b0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d869      	bhi.n	8008e40 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008d6c:	4b43      	ldr	r3, [pc, #268]	; (8008e7c <pvPortMalloc+0x1b4>)
 8008d6e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008d70:	4b42      	ldr	r3, [pc, #264]	; (8008e7c <pvPortMalloc+0x1b4>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d76:	e004      	b.n	8008d82 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d903      	bls.n	8008d94 <pvPortMalloc+0xcc>
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1f1      	bne.n	8008d78 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008d94:	4b36      	ldr	r3, [pc, #216]	; (8008e70 <pvPortMalloc+0x1a8>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d050      	beq.n	8008e40 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2208      	movs	r2, #8
 8008da4:	4413      	add	r3, r2
 8008da6:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	1ad2      	subs	r2, r2, r3
 8008db8:	2308      	movs	r3, #8
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d91f      	bls.n	8008e00 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <pvPortMalloc+0x120>
        __asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	613b      	str	r3, [r7, #16]
    }
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	1ad2      	subs	r2, r2, r3
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dfa:	69b8      	ldr	r0, [r7, #24]
 8008dfc:	f000 f908 	bl	8009010 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e00:	4b1d      	ldr	r3, [pc, #116]	; (8008e78 <pvPortMalloc+0x1b0>)
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	4a1b      	ldr	r2, [pc, #108]	; (8008e78 <pvPortMalloc+0x1b0>)
 8008e0c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e0e:	4b1a      	ldr	r3, [pc, #104]	; (8008e78 <pvPortMalloc+0x1b0>)
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4b1b      	ldr	r3, [pc, #108]	; (8008e80 <pvPortMalloc+0x1b8>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d203      	bcs.n	8008e22 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e1a:	4b17      	ldr	r3, [pc, #92]	; (8008e78 <pvPortMalloc+0x1b0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a18      	ldr	r2, [pc, #96]	; (8008e80 <pvPortMalloc+0x1b8>)
 8008e20:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <pvPortMalloc+0x1ac>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008e36:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <pvPortMalloc+0x1bc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	4a11      	ldr	r2, [pc, #68]	; (8008e84 <pvPortMalloc+0x1bc>)
 8008e3e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008e40:	f7fe fc42 	bl	80076c8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f003 0307 	and.w	r3, r3, #7
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <pvPortMalloc+0x19c>
        __asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	60fb      	str	r3, [r7, #12]
    }
 8008e60:	bf00      	nop
 8008e62:	e7fe      	b.n	8008e62 <pvPortMalloc+0x19a>
    return pvReturn;
 8008e64:	69fb      	ldr	r3, [r7, #28]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3728      	adds	r7, #40	; 0x28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20003e18 	.word	0x20003e18
 8008e74:	20003e2c 	.word	0x20003e2c
 8008e78:	20003e1c 	.word	0x20003e1c
 8008e7c:	20003e10 	.word	0x20003e10
 8008e80:	20003e20 	.word	0x20003e20
 8008e84:	20003e24 	.word	0x20003e24

08008e88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d04d      	beq.n	8008f36 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008e9a:	2308      	movs	r3, #8
 8008e9c:	425b      	negs	r3, r3
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	4b24      	ldr	r3, [pc, #144]	; (8008f40 <vPortFree+0xb8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10a      	bne.n	8008ecc <vPortFree+0x44>
        __asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	60fb      	str	r3, [r7, #12]
    }
 8008ec8:	bf00      	nop
 8008eca:	e7fe      	b.n	8008eca <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <vPortFree+0x62>
        __asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	60bb      	str	r3, [r7, #8]
    }
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <vPortFree+0xb8>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01e      	beq.n	8008f36 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d11a      	bne.n	8008f36 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	4b0e      	ldr	r3, [pc, #56]	; (8008f40 <vPortFree+0xb8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	401a      	ands	r2, r3
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008f10:	f7fe fbcc 	bl	80076ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <vPortFree+0xbc>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	4a09      	ldr	r2, [pc, #36]	; (8008f44 <vPortFree+0xbc>)
 8008f20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f22:	6938      	ldr	r0, [r7, #16]
 8008f24:	f000 f874 	bl	8009010 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008f28:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <vPortFree+0xc0>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	4a06      	ldr	r2, [pc, #24]	; (8008f48 <vPortFree+0xc0>)
 8008f30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008f32:	f7fe fbc9 	bl	80076c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008f36:	bf00      	nop
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20003e2c 	.word	0x20003e2c
 8008f44:	20003e1c 	.word	0x20003e1c
 8008f48:	20003e28 	.word	0x20003e28

08008f4c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f56:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008f58:	4b27      	ldr	r3, [pc, #156]	; (8008ff8 <prvHeapInit+0xac>)
 8008f5a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00c      	beq.n	8008f80 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3307      	adds	r3, #7
 8008f6a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0307 	bic.w	r3, r3, #7
 8008f72:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	4a1f      	ldr	r2, [pc, #124]	; (8008ff8 <prvHeapInit+0xac>)
 8008f7c:	4413      	add	r3, r2
 8008f7e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f84:	4a1d      	ldr	r2, [pc, #116]	; (8008ffc <prvHeapInit+0xb0>)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008f8a:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <prvHeapInit+0xb0>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	4413      	add	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008f98:	2208      	movs	r2, #8
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	1a9b      	subs	r3, r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0307 	bic.w	r3, r3, #7
 8008fa6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4a15      	ldr	r2, [pc, #84]	; (8009000 <prvHeapInit+0xb4>)
 8008fac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008fae:	4b14      	ldr	r3, [pc, #80]	; (8009000 <prvHeapInit+0xb4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008fb6:	4b12      	ldr	r3, [pc, #72]	; (8009000 <prvHeapInit+0xb4>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	1ad2      	subs	r2, r2, r3
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fcc:	4b0c      	ldr	r3, [pc, #48]	; (8009000 <prvHeapInit+0xb4>)
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	4a0a      	ldr	r2, [pc, #40]	; (8009004 <prvHeapInit+0xb8>)
 8008fda:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	4a09      	ldr	r2, [pc, #36]	; (8009008 <prvHeapInit+0xbc>)
 8008fe2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fe4:	4b09      	ldr	r3, [pc, #36]	; (800900c <prvHeapInit+0xc0>)
 8008fe6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fea:	601a      	str	r2, [r3, #0]
}
 8008fec:	bf00      	nop
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	20000210 	.word	0x20000210
 8008ffc:	20003e10 	.word	0x20003e10
 8009000:	20003e18 	.word	0x20003e18
 8009004:	20003e20 	.word	0x20003e20
 8009008:	20003e1c 	.word	0x20003e1c
 800900c:	20003e2c 	.word	0x20003e2c

08009010 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009018:	4b28      	ldr	r3, [pc, #160]	; (80090bc <prvInsertBlockIntoFreeList+0xac>)
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	e002      	b.n	8009024 <prvInsertBlockIntoFreeList+0x14>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	429a      	cmp	r2, r3
 800902c:	d8f7      	bhi.n	800901e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	4413      	add	r3, r2
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	429a      	cmp	r2, r3
 800903e:	d108      	bne.n	8009052 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	441a      	add	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	441a      	add	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d118      	bne.n	8009098 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	4b15      	ldr	r3, [pc, #84]	; (80090c0 <prvInsertBlockIntoFreeList+0xb0>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d00d      	beq.n	800908e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	441a      	add	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	e008      	b.n	80090a0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800908e:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <prvInsertBlockIntoFreeList+0xb0>)
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	e003      	b.n	80090a0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d002      	beq.n	80090ae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80090ae:	bf00      	nop
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	20003e10 	.word	0x20003e10
 80090c0:	20003e18 	.word	0x20003e18

080090c4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80090c8:	4803      	ldr	r0, [pc, #12]	; (80090d8 <_cbSendSystemDesc+0x14>)
 80090ca:	f001 faff 	bl	800a6cc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80090ce:	4803      	ldr	r0, [pc, #12]	; (80090dc <_cbSendSystemDesc+0x18>)
 80090d0:	f001 fafc 	bl	800a6cc <SEGGER_SYSVIEW_SendSysDesc>
}
 80090d4:	bf00      	nop
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	0800baf8 	.word	0x0800baf8
 80090dc:	0800bb2c 	.word	0x0800bb2c

080090e0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <SEGGER_SYSVIEW_Conf+0x20>)
 80090e6:	6818      	ldr	r0, [r3, #0]
 80090e8:	4b05      	ldr	r3, [pc, #20]	; (8009100 <SEGGER_SYSVIEW_Conf+0x20>)
 80090ea:	6819      	ldr	r1, [r3, #0]
 80090ec:	4b05      	ldr	r3, [pc, #20]	; (8009104 <SEGGER_SYSVIEW_Conf+0x24>)
 80090ee:	4a06      	ldr	r2, [pc, #24]	; (8009108 <SEGGER_SYSVIEW_Conf+0x28>)
 80090f0:	f000 fe6a 	bl	8009dc8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80090f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80090f8:	f000 feaa 	bl	8009e50 <SEGGER_SYSVIEW_SetRAMBase>
}
 80090fc:	bf00      	nop
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000000 	.word	0x20000000
 8009104:	080090c5 	.word	0x080090c5
 8009108:	0800bdd4 	.word	0x0800bdd4

0800910c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800910c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910e:	b085      	sub	sp, #20
 8009110:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8009112:	2300      	movs	r3, #0
 8009114:	607b      	str	r3, [r7, #4]
 8009116:	e033      	b.n	8009180 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8009118:	491e      	ldr	r1, [pc, #120]	; (8009194 <_cbSendTaskList+0x88>)
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	440b      	add	r3, r1
 8009126:	6818      	ldr	r0, [r3, #0]
 8009128:	491a      	ldr	r1, [pc, #104]	; (8009194 <_cbSendTaskList+0x88>)
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	4613      	mov	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	3304      	adds	r3, #4
 8009138:	6819      	ldr	r1, [r3, #0]
 800913a:	4c16      	ldr	r4, [pc, #88]	; (8009194 <_cbSendTaskList+0x88>)
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	4613      	mov	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	4413      	add	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4423      	add	r3, r4
 8009148:	3308      	adds	r3, #8
 800914a:	681c      	ldr	r4, [r3, #0]
 800914c:	4d11      	ldr	r5, [pc, #68]	; (8009194 <_cbSendTaskList+0x88>)
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	442b      	add	r3, r5
 800915a:	330c      	adds	r3, #12
 800915c:	681d      	ldr	r5, [r3, #0]
 800915e:	4e0d      	ldr	r6, [pc, #52]	; (8009194 <_cbSendTaskList+0x88>)
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4433      	add	r3, r6
 800916c:	3310      	adds	r3, #16
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	462b      	mov	r3, r5
 8009174:	4622      	mov	r2, r4
 8009176:	f000 f8d1 	bl	800931c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3301      	adds	r3, #1
 800917e:	607b      	str	r3, [r7, #4]
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <_cbSendTaskList+0x8c>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	429a      	cmp	r2, r3
 8009188:	d3c6      	bcc.n	8009118 <_cbSendTaskList+0xc>
  }
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009194:	20003e30 	.word	0x20003e30
 8009198:	200040b0 	.word	0x200040b0

0800919c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800919c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80091a4:	f7fe fb40 	bl	8007828 <xTaskGetTickCountFromISR>
 80091a8:	4603      	mov	r3, r0
 80091aa:	461a      	mov	r2, r3
 80091ac:	f04f 0300 	mov.w	r3, #0
 80091b0:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
 80091b4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091b8:	4622      	mov	r2, r4
 80091ba:	462b      	mov	r3, r5
 80091bc:	f04f 0000 	mov.w	r0, #0
 80091c0:	f04f 0100 	mov.w	r1, #0
 80091c4:	0099      	lsls	r1, r3, #2
 80091c6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80091ca:	0090      	lsls	r0, r2, #2
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	1912      	adds	r2, r2, r4
 80091d2:	eb45 0303 	adc.w	r3, r5, r3
 80091d6:	eb12 0802 	adds.w	r8, r2, r2
 80091da:	eb43 0903 	adc.w	r9, r3, r3
 80091de:	4642      	mov	r2, r8
 80091e0:	464b      	mov	r3, r9
 80091e2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= 1000;
 80091e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	f04f 0400 	mov.w	r4, #0
 80091f2:	f04f 0500 	mov.w	r5, #0
 80091f6:	015d      	lsls	r5, r3, #5
 80091f8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80091fc:	0154      	lsls	r4, r2, #5
 80091fe:	4622      	mov	r2, r4
 8009200:	462b      	mov	r3, r5
 8009202:	1a12      	subs	r2, r2, r0
 8009204:	eb63 0301 	sbc.w	r3, r3, r1
 8009208:	f04f 0400 	mov.w	r4, #0
 800920c:	f04f 0500 	mov.w	r5, #0
 8009210:	009d      	lsls	r5, r3, #2
 8009212:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8009216:	0094      	lsls	r4, r2, #2
 8009218:	4622      	mov	r2, r4
 800921a:	462b      	mov	r3, r5
 800921c:	1812      	adds	r2, r2, r0
 800921e:	eb41 0303 	adc.w	r3, r1, r3
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f04f 0100 	mov.w	r1, #0
 800922a:	00d9      	lsls	r1, r3, #3
 800922c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009230:	00d0      	lsls	r0, r2, #3
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800923a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800923e:	4610      	mov	r0, r2
 8009240:	4619      	mov	r1, r3
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800924c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af02      	add	r7, sp, #8
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
 8009258:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800925a:	2205      	movs	r2, #5
 800925c:	492b      	ldr	r1, [pc, #172]	; (800930c <SYSVIEW_AddTask+0xc0>)
 800925e:	68b8      	ldr	r0, [r7, #8]
 8009260:	f001 fdd2 	bl	800ae08 <memcmp>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d04b      	beq.n	8009302 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800926a:	4b29      	ldr	r3, [pc, #164]	; (8009310 <SYSVIEW_AddTask+0xc4>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b1f      	cmp	r3, #31
 8009270:	d903      	bls.n	800927a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8009272:	4828      	ldr	r0, [pc, #160]	; (8009314 <SYSVIEW_AddTask+0xc8>)
 8009274:	f001 fd28 	bl	800acc8 <SEGGER_SYSVIEW_Warn>
    return;
 8009278:	e044      	b.n	8009304 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800927a:	4b25      	ldr	r3, [pc, #148]	; (8009310 <SYSVIEW_AddTask+0xc4>)
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	4926      	ldr	r1, [pc, #152]	; (8009318 <SYSVIEW_AddTask+0xcc>)
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800928e:	4b20      	ldr	r3, [pc, #128]	; (8009310 <SYSVIEW_AddTask+0xc4>)
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4921      	ldr	r1, [pc, #132]	; (8009318 <SYSVIEW_AddTask+0xcc>)
 8009294:	4613      	mov	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	440b      	add	r3, r1
 800929e:	3304      	adds	r3, #4
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80092a4:	4b1a      	ldr	r3, [pc, #104]	; (8009310 <SYSVIEW_AddTask+0xc4>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	491b      	ldr	r1, [pc, #108]	; (8009318 <SYSVIEW_AddTask+0xcc>)
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	3308      	adds	r3, #8
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80092ba:	4b15      	ldr	r3, [pc, #84]	; (8009310 <SYSVIEW_AddTask+0xc4>)
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4916      	ldr	r1, [pc, #88]	; (8009318 <SYSVIEW_AddTask+0xcc>)
 80092c0:	4613      	mov	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	440b      	add	r3, r1
 80092ca:	330c      	adds	r3, #12
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80092d0:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <SYSVIEW_AddTask+0xc4>)
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	4910      	ldr	r1, [pc, #64]	; (8009318 <SYSVIEW_AddTask+0xcc>)
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	440b      	add	r3, r1
 80092e0:	3310      	adds	r3, #16
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80092e6:	4b0a      	ldr	r3, [pc, #40]	; (8009310 <SYSVIEW_AddTask+0xc4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3301      	adds	r3, #1
 80092ec:	4a08      	ldr	r2, [pc, #32]	; (8009310 <SYSVIEW_AddTask+0xc4>)
 80092ee:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f80e 	bl	800931c <SYSVIEW_SendTaskInfo>
 8009300:	e000      	b.n	8009304 <SYSVIEW_AddTask+0xb8>
    return;
 8009302:	bf00      	nop

}
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	0800bb3c 	.word	0x0800bb3c
 8009310:	200040b0 	.word	0x200040b0
 8009314:	0800bb44 	.word	0x0800bb44
 8009318:	20003e30 	.word	0x20003e30

0800931c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800931c:	b580      	push	{r7, lr}
 800931e:	b08a      	sub	sp, #40	; 0x28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800932a:	f107 0314 	add.w	r3, r7, #20
 800932e:	2214      	movs	r2, #20
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f001 fd84 	bl	800ae40 <memset>
  TaskInfo.TaskID     = TaskID;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8009348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800934c:	f107 0314 	add.w	r3, r7, #20
 8009350:	4618      	mov	r0, r3
 8009352:	f001 f8c3 	bl	800a4dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8009356:	bf00      	nop
 8009358:	3728      	adds	r7, #40	; 0x28
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8009366:	4b24      	ldr	r3, [pc, #144]	; (80093f8 <_DoInit+0x98>)
 8009368:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2203      	movs	r2, #3
 800936e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2203      	movs	r2, #3
 8009374:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a20      	ldr	r2, [pc, #128]	; (80093fc <_DoInit+0x9c>)
 800937a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a20      	ldr	r2, [pc, #128]	; (8009400 <_DoInit+0xa0>)
 8009380:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009388:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a17      	ldr	r2, [pc, #92]	; (80093fc <_DoInit+0x9c>)
 80093a0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a17      	ldr	r2, [pc, #92]	; (8009404 <_DoInit+0xa4>)
 80093a6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2210      	movs	r2, #16
 80093ac:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3307      	adds	r3, #7
 80093c4:	4a10      	ldr	r2, [pc, #64]	; (8009408 <_DoInit+0xa8>)
 80093c6:	6810      	ldr	r0, [r2, #0]
 80093c8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80093ca:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a0e      	ldr	r2, [pc, #56]	; (800940c <_DoInit+0xac>)
 80093d2:	6810      	ldr	r0, [r2, #0]
 80093d4:	6018      	str	r0, [r3, #0]
 80093d6:	8891      	ldrh	r1, [r2, #4]
 80093d8:	7992      	ldrb	r2, [r2, #6]
 80093da:	8099      	strh	r1, [r3, #4]
 80093dc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80093de:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2220      	movs	r2, #32
 80093e6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80093e8:	f3bf 8f5f 	dmb	sy
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	200058e0 	.word	0x200058e0
 80093fc:	0800bb94 	.word	0x0800bb94
 8009400:	200040b4 	.word	0x200040b4
 8009404:	200044b4 	.word	0x200044b4
 8009408:	0800bba0 	.word	0x0800bba0
 800940c:	0800bba4 	.word	0x0800bba4

08009410 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8009410:	b580      	push	{r7, lr}
 8009412:	b08a      	sub	sp, #40	; 0x28
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800941c:	2300      	movs	r3, #0
 800941e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	429a      	cmp	r2, r3
 8009432:	d905      	bls.n	8009440 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	3b01      	subs	r3, #1
 800943c:	627b      	str	r3, [r7, #36]	; 0x24
 800943e:	e007      	b.n	8009450 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	69b9      	ldr	r1, [r7, #24]
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	1acb      	subs	r3, r1, r3
 800944a:	4413      	add	r3, r2
 800944c:	3b01      	subs	r3, #1
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800945a:	4293      	cmp	r3, r2
 800945c:	bf28      	it	cs
 800945e:	4613      	movcs	r3, r2
 8009460:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8009462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4293      	cmp	r3, r2
 8009468:	bf28      	it	cs
 800946a:	4613      	movcs	r3, r2
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	4413      	add	r3, r2
 8009476:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8009478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800947a:	68b9      	ldr	r1, [r7, #8]
 800947c:	6978      	ldr	r0, [r7, #20]
 800947e:	f001 fcd1 	bl	800ae24 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8009482:	6a3a      	ldr	r2, [r7, #32]
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	4413      	add	r3, r2
 8009488:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	4413      	add	r3, r2
 8009490:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800949a:	69fa      	ldr	r2, [r7, #28]
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	4413      	add	r3, r2
 80094a0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	69fa      	ldr	r2, [r7, #28]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d101      	bne.n	80094b0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80094ac:	2300      	movs	r3, #0
 80094ae:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80094b0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1b2      	bne.n	8009426 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80094c0:	6a3b      	ldr	r3, [r7, #32]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3728      	adds	r7, #40	; 0x28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b088      	sub	sp, #32
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d911      	bls.n	8009512 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	4413      	add	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	68b9      	ldr	r1, [r7, #8]
 80094fc:	6938      	ldr	r0, [r7, #16]
 80094fe:	f001 fc91 	bl	800ae24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009502:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	441a      	add	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8009510:	e01f      	b.n	8009552 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	68b9      	ldr	r1, [r7, #8]
 8009524:	6938      	ldr	r0, [r7, #16]
 8009526:	f001 fc7d 	bl	800ae24 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	4413      	add	r3, r2
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	4619      	mov	r1, r3
 8009542:	6938      	ldr	r0, [r7, #16]
 8009544:	f001 fc6e 	bl	800ae24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009548:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	60da      	str	r2, [r3, #12]
}
 8009552:	bf00      	nop
 8009554:	3720      	adds	r7, #32
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800955a:	b480      	push	{r7}
 800955c:	b087      	sub	sp, #28
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	429a      	cmp	r2, r3
 8009574:	d808      	bhi.n	8009588 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	1ad2      	subs	r2, r2, r3
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	4413      	add	r3, r2
 8009582:	3b01      	subs	r3, #1
 8009584:	617b      	str	r3, [r7, #20]
 8009586:	e004      	b.n	8009592 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	3b01      	subs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
  }
  return r;
 8009592:	697b      	ldr	r3, [r7, #20]
}
 8009594:	4618      	mov	r0, r3
 8009596:	371c      	adds	r7, #28
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08c      	sub	sp, #48	; 0x30
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80095ac:	4b3e      	ldr	r3, [pc, #248]	; (80096a8 <SEGGER_RTT_ReadNoLock+0x108>)
 80095ae:	623b      	str	r3, [r7, #32]
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <SEGGER_RTT_ReadNoLock+0x1e>
 80095ba:	f7ff fed1 	bl	8009360 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	4613      	mov	r3, r2
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	4413      	add	r3, r2
 80095c6:	00db      	lsls	r3, r3, #3
 80095c8:	3360      	adds	r3, #96	; 0x60
 80095ca:	4a37      	ldr	r2, [pc, #220]	; (80096a8 <SEGGER_RTT_ReadNoLock+0x108>)
 80095cc:	4413      	add	r3, r2
 80095ce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80095e0:	2300      	movs	r3, #0
 80095e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80095e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d92b      	bls.n	8009644 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4293      	cmp	r3, r2
 80095fc:	bf28      	it	cs
 80095fe:	4613      	movcs	r3, r2
 8009600:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	4413      	add	r3, r2
 800960a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	6939      	ldr	r1, [r7, #16]
 8009610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009612:	f001 fc07 	bl	800ae24 <memcpy>
    NumBytesRead += NumBytesRem;
 8009616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	4413      	add	r3, r2
 800961c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800961e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	4413      	add	r3, r2
 8009624:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800962e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	4413      	add	r3, r2
 8009634:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800963c:	429a      	cmp	r2, r3
 800963e:	d101      	bne.n	8009644 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8009640:	2300      	movs	r3, #0
 8009642:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4293      	cmp	r3, r2
 8009652:	bf28      	it	cs
 8009654:	4613      	movcs	r3, r2
 8009656:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d019      	beq.n	8009692 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	4413      	add	r3, r2
 8009666:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	6939      	ldr	r1, [r7, #16]
 800966c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800966e:	f001 fbd9 	bl	800ae24 <memcpy>
    NumBytesRead += NumBytesRem;
 8009672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	4413      	add	r3, r2
 8009678:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800967a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	4413      	add	r3, r2
 8009680:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800968a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	4413      	add	r3, r2
 8009690:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8009692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800969c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800969e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3730      	adds	r7, #48	; 0x30
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	200058e0 	.word	0x200058e0

080096ac <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	1c5a      	adds	r2, r3, #1
 80096c0:	4613      	mov	r3, r2
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	4413      	add	r3, r2
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <SEGGER_RTT_WriteNoLock+0x9c>)
 80096ca:	4413      	add	r3, r2
 80096cc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d029      	beq.n	800972a <SEGGER_RTT_WriteNoLock+0x7e>
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d82e      	bhi.n	8009738 <SEGGER_RTT_WriteNoLock+0x8c>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <SEGGER_RTT_WriteNoLock+0x38>
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d013      	beq.n	800970a <SEGGER_RTT_WriteNoLock+0x5e>
 80096e2:	e029      	b.n	8009738 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80096e4:	6978      	ldr	r0, [r7, #20]
 80096e6:	f7ff ff38 	bl	800955a <_GetAvailWriteSpace>
 80096ea:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d202      	bcs.n	80096fa <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80096f4:	2300      	movs	r3, #0
 80096f6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80096f8:	e021      	b.n	800973e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	69b9      	ldr	r1, [r7, #24]
 8009702:	6978      	ldr	r0, [r7, #20]
 8009704:	f7ff fee1 	bl	80094ca <_WriteNoCheck>
    break;
 8009708:	e019      	b.n	800973e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800970a:	6978      	ldr	r0, [r7, #20]
 800970c:	f7ff ff25 	bl	800955a <_GetAvailWriteSpace>
 8009710:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	4293      	cmp	r3, r2
 8009718:	bf28      	it	cs
 800971a:	4613      	movcs	r3, r2
 800971c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800971e:	69fa      	ldr	r2, [r7, #28]
 8009720:	69b9      	ldr	r1, [r7, #24]
 8009722:	6978      	ldr	r0, [r7, #20]
 8009724:	f7ff fed1 	bl	80094ca <_WriteNoCheck>
    break;
 8009728:	e009      	b.n	800973e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	69b9      	ldr	r1, [r7, #24]
 800972e:	6978      	ldr	r0, [r7, #20]
 8009730:	f7ff fe6e 	bl	8009410 <_WriteBlocking>
 8009734:	61f8      	str	r0, [r7, #28]
    break;
 8009736:	e002      	b.n	800973e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8009738:	2300      	movs	r3, #0
 800973a:	61fb      	str	r3, [r7, #28]
    break;
 800973c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800973e:	69fb      	ldr	r3, [r7, #28]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3720      	adds	r7, #32
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	200058e0 	.word	0x200058e0

0800974c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009758:	4b0e      	ldr	r3, [pc, #56]	; (8009794 <SEGGER_RTT_Write+0x48>)
 800975a:	61fb      	str	r3, [r7, #28]
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <SEGGER_RTT_Write+0x1e>
 8009766:	f7ff fdfb 	bl	8009360 <_DoInit>
  SEGGER_RTT_LOCK();
 800976a:	f3ef 8311 	mrs	r3, BASEPRI
 800976e:	f04f 0120 	mov.w	r1, #32
 8009772:	f381 8811 	msr	BASEPRI, r1
 8009776:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f7ff ff95 	bl	80096ac <SEGGER_RTT_WriteNoLock>
 8009782:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800978a:	697b      	ldr	r3, [r7, #20]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3720      	adds	r7, #32
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	200058e0 	.word	0x200058e0

08009798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80097a6:	4b3d      	ldr	r3, [pc, #244]	; (800989c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80097a8:	61bb      	str	r3, [r7, #24]
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d101      	bne.n	80097b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80097b4:	f7ff fdd4 	bl	8009360 <_DoInit>
  SEGGER_RTT_LOCK();
 80097b8:	f3ef 8311 	mrs	r3, BASEPRI
 80097bc:	f04f 0120 	mov.w	r1, #32
 80097c0:	f381 8811 	msr	BASEPRI, r1
 80097c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80097c6:	4b35      	ldr	r3, [pc, #212]	; (800989c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80097c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80097ce:	6939      	ldr	r1, [r7, #16]
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	4613      	mov	r3, r2
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	4413      	add	r3, r2
 80097da:	00db      	lsls	r3, r3, #3
 80097dc:	440b      	add	r3, r1
 80097de:	3304      	adds	r3, #4
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d008      	beq.n	80097f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	3301      	adds	r3, #1
 80097ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	69fa      	ldr	r2, [r7, #28]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	dbeb      	blt.n	80097ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80097f6:	e000      	b.n	80097fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80097f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	69fa      	ldr	r2, [r7, #28]
 8009800:	429a      	cmp	r2, r3
 8009802:	da3f      	bge.n	8009884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8009804:	6939      	ldr	r1, [r7, #16]
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	4613      	mov	r3, r2
 800980c:	005b      	lsls	r3, r3, #1
 800980e:	4413      	add	r3, r2
 8009810:	00db      	lsls	r3, r3, #3
 8009812:	440b      	add	r3, r1
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8009818:	6939      	ldr	r1, [r7, #16]
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	4613      	mov	r3, r2
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	4413      	add	r3, r2
 8009824:	00db      	lsls	r3, r3, #3
 8009826:	440b      	add	r3, r1
 8009828:	3304      	adds	r3, #4
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800982e:	6939      	ldr	r1, [r7, #16]
 8009830:	69fa      	ldr	r2, [r7, #28]
 8009832:	4613      	mov	r3, r2
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	4413      	add	r3, r2
 8009838:	00db      	lsls	r3, r3, #3
 800983a:	440b      	add	r3, r1
 800983c:	3320      	adds	r3, #32
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8009842:	6939      	ldr	r1, [r7, #16]
 8009844:	69fa      	ldr	r2, [r7, #28]
 8009846:	4613      	mov	r3, r2
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	4413      	add	r3, r2
 800984c:	00db      	lsls	r3, r3, #3
 800984e:	440b      	add	r3, r1
 8009850:	3328      	adds	r3, #40	; 0x28
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8009856:	6939      	ldr	r1, [r7, #16]
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	4613      	mov	r3, r2
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	4413      	add	r3, r2
 8009860:	00db      	lsls	r3, r3, #3
 8009862:	440b      	add	r3, r1
 8009864:	3324      	adds	r3, #36	; 0x24
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800986a:	6939      	ldr	r1, [r7, #16]
 800986c:	69fa      	ldr	r2, [r7, #28]
 800986e:	4613      	mov	r3, r2
 8009870:	005b      	lsls	r3, r3, #1
 8009872:	4413      	add	r3, r2
 8009874:	00db      	lsls	r3, r3, #3
 8009876:	440b      	add	r3, r1
 8009878:	332c      	adds	r3, #44	; 0x2c
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800987e:	f3bf 8f5f 	dmb	sy
 8009882:	e002      	b.n	800988a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8009884:	f04f 33ff 	mov.w	r3, #4294967295
 8009888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8009890:	69fb      	ldr	r3, [r7, #28]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3720      	adds	r7, #32
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	200058e0 	.word	0x200058e0

080098a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80098ae:	4b33      	ldr	r3, [pc, #204]	; (800997c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80098b0:	61bb      	str	r3, [r7, #24]
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80098bc:	f7ff fd50 	bl	8009360 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80098c0:	4b2e      	ldr	r3, [pc, #184]	; (800997c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80098c2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	461a      	mov	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d24d      	bcs.n	800996c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80098d0:	f3ef 8311 	mrs	r3, BASEPRI
 80098d4:	f04f 0120 	mov.w	r1, #32
 80098d8:	f381 8811 	msr	BASEPRI, r1
 80098dc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d031      	beq.n	8009948 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80098e4:	6979      	ldr	r1, [r7, #20]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	4613      	mov	r3, r2
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	4413      	add	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	440b      	add	r3, r1
 80098f2:	3360      	adds	r3, #96	; 0x60
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80098f8:	6979      	ldr	r1, [r7, #20]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4613      	mov	r3, r2
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	4413      	add	r3, r2
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	440b      	add	r3, r1
 8009906:	3364      	adds	r3, #100	; 0x64
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800990c:	6979      	ldr	r1, [r7, #20]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	4613      	mov	r3, r2
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	4413      	add	r3, r2
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	440b      	add	r3, r1
 800991a:	3368      	adds	r3, #104	; 0x68
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8009920:	6979      	ldr	r1, [r7, #20]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4613      	mov	r3, r2
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	4413      	add	r3, r2
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	440b      	add	r3, r1
 800992e:	3370      	adds	r3, #112	; 0x70
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8009934:	6979      	ldr	r1, [r7, #20]
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	4613      	mov	r3, r2
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	4413      	add	r3, r2
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	440b      	add	r3, r1
 8009942:	336c      	adds	r3, #108	; 0x6c
 8009944:	2200      	movs	r2, #0
 8009946:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8009948:	6979      	ldr	r1, [r7, #20]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	4613      	mov	r3, r2
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	4413      	add	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	440b      	add	r3, r1
 8009956:	3374      	adds	r3, #116	; 0x74
 8009958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800995a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800995c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009966:	2300      	movs	r3, #0
 8009968:	61fb      	str	r3, [r7, #28]
 800996a:	e002      	b.n	8009972 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800996c:	f04f 33ff 	mov.w	r3, #4294967295
 8009970:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8009972:	69fb      	ldr	r3, [r7, #28]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	200058e0 	.word	0x200058e0

08009980 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8009990:	e002      	b.n	8009998 <_EncodeStr+0x18>
    Len++;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	3301      	adds	r3, #1
 8009996:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	4413      	add	r3, r2
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1f6      	bne.n	8009992 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d901      	bls.n	80099b0 <_EncodeStr+0x30>
    Len = Limit;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	2bfe      	cmp	r3, #254	; 0xfe
 80099b4:	d806      	bhi.n	80099c4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	60fa      	str	r2, [r7, #12]
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	701a      	strb	r2, [r3, #0]
 80099c2:	e011      	b.n	80099e8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	60fa      	str	r2, [r7, #12]
 80099ca:	22ff      	movs	r2, #255	; 0xff
 80099cc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	60fa      	str	r2, [r7, #12]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	b2d2      	uxtb	r2, r2
 80099d8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	0a19      	lsrs	r1, r3, #8
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	60fa      	str	r2, [r7, #12]
 80099e4:	b2ca      	uxtb	r2, r1
 80099e6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80099ec:	e00a      	b.n	8009a04 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	1c53      	adds	r3, r2, #1
 80099f2:	60bb      	str	r3, [r7, #8]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	1c59      	adds	r1, r3, #1
 80099f8:	60f9      	str	r1, [r7, #12]
 80099fa:	7812      	ldrb	r2, [r2, #0]
 80099fc:	701a      	strb	r2, [r3, #0]
    n++;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	3301      	adds	r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d3f0      	bcc.n	80099ee <_EncodeStr+0x6e>
  }
  return pPayload;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	371c      	adds	r7, #28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8009a1a:	b480      	push	{r7}
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3304      	adds	r3, #4
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
	...

08009a34 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009a3a:	4b36      	ldr	r3, [pc, #216]	; (8009b14 <_HandleIncomingPacket+0xe0>)
 8009a3c:	7e1b      	ldrb	r3, [r3, #24]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	1cfb      	adds	r3, r7, #3
 8009a42:	2201      	movs	r2, #1
 8009a44:	4619      	mov	r1, r3
 8009a46:	f7ff fdab 	bl	80095a0 <SEGGER_RTT_ReadNoLock>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	dd54      	ble.n	8009afe <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8009a54:	78fb      	ldrb	r3, [r7, #3]
 8009a56:	2b80      	cmp	r3, #128	; 0x80
 8009a58:	d032      	beq.n	8009ac0 <_HandleIncomingPacket+0x8c>
 8009a5a:	2b80      	cmp	r3, #128	; 0x80
 8009a5c:	dc42      	bgt.n	8009ae4 <_HandleIncomingPacket+0xb0>
 8009a5e:	2b07      	cmp	r3, #7
 8009a60:	dc16      	bgt.n	8009a90 <_HandleIncomingPacket+0x5c>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	dd3e      	ble.n	8009ae4 <_HandleIncomingPacket+0xb0>
 8009a66:	3b01      	subs	r3, #1
 8009a68:	2b06      	cmp	r3, #6
 8009a6a:	d83b      	bhi.n	8009ae4 <_HandleIncomingPacket+0xb0>
 8009a6c:	a201      	add	r2, pc, #4	; (adr r2, 8009a74 <_HandleIncomingPacket+0x40>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009a97 	.word	0x08009a97
 8009a78:	08009a9d 	.word	0x08009a9d
 8009a7c:	08009aa3 	.word	0x08009aa3
 8009a80:	08009aa9 	.word	0x08009aa9
 8009a84:	08009aaf 	.word	0x08009aaf
 8009a88:	08009ab5 	.word	0x08009ab5
 8009a8c:	08009abb 	.word	0x08009abb
 8009a90:	2b7f      	cmp	r3, #127	; 0x7f
 8009a92:	d036      	beq.n	8009b02 <_HandleIncomingPacket+0xce>
 8009a94:	e026      	b.n	8009ae4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8009a96:	f000 fba7 	bl	800a1e8 <SEGGER_SYSVIEW_Start>
      break;
 8009a9a:	e037      	b.n	8009b0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8009a9c:	f000 fc5e 	bl	800a35c <SEGGER_SYSVIEW_Stop>
      break;
 8009aa0:	e034      	b.n	8009b0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8009aa2:	f000 fe37 	bl	800a714 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8009aa6:	e031      	b.n	8009b0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009aa8:	f000 fdfc 	bl	800a6a4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8009aac:	e02e      	b.n	8009b0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8009aae:	f000 fc7b 	bl	800a3a8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8009ab2:	e02b      	b.n	8009b0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8009ab4:	f001 f8ca 	bl	800ac4c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009ab8:	e028      	b.n	8009b0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8009aba:	f001 f8a9 	bl	800ac10 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8009abe:	e025      	b.n	8009b0c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009ac0:	4b14      	ldr	r3, [pc, #80]	; (8009b14 <_HandleIncomingPacket+0xe0>)
 8009ac2:	7e1b      	ldrb	r3, [r3, #24]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	1cfb      	adds	r3, r7, #3
 8009ac8:	2201      	movs	r2, #1
 8009aca:	4619      	mov	r1, r3
 8009acc:	f7ff fd68 	bl	80095a0 <SEGGER_RTT_ReadNoLock>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	dd15      	ble.n	8009b06 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 f817 	bl	800ab10 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8009ae2:	e010      	b.n	8009b06 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	b25b      	sxtb	r3, r3
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	da0e      	bge.n	8009b0a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009aec:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <_HandleIncomingPacket+0xe0>)
 8009aee:	7e1b      	ldrb	r3, [r3, #24]
 8009af0:	4618      	mov	r0, r3
 8009af2:	1cfb      	adds	r3, r7, #3
 8009af4:	2201      	movs	r2, #1
 8009af6:	4619      	mov	r1, r3
 8009af8:	f7ff fd52 	bl	80095a0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8009afc:	e005      	b.n	8009b0a <_HandleIncomingPacket+0xd6>
    }
  }
 8009afe:	bf00      	nop
 8009b00:	e004      	b.n	8009b0c <_HandleIncomingPacket+0xd8>
      break;
 8009b02:	bf00      	nop
 8009b04:	e002      	b.n	8009b0c <_HandleIncomingPacket+0xd8>
      break;
 8009b06:	bf00      	nop
 8009b08:	e000      	b.n	8009b0c <_HandleIncomingPacket+0xd8>
      break;
 8009b0a:	bf00      	nop
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	200054cc 	.word	0x200054cc

08009b18 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08c      	sub	sp, #48	; 0x30
 8009b1c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8009b1e:	2301      	movs	r3, #1
 8009b20:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8009b22:	1d3b      	adds	r3, r7, #4
 8009b24:	3301      	adds	r3, #1
 8009b26:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b2c:	4b31      	ldr	r3, [pc, #196]	; (8009bf4 <_TrySendOverflowPacket+0xdc>)
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b32:	e00b      	b.n	8009b4c <_TrySendOverflowPacket+0x34>
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3a:	1c59      	adds	r1, r3, #1
 8009b3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b42:	b2d2      	uxtb	r2, r2
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b48:	09db      	lsrs	r3, r3, #7
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8009b50:	d8f0      	bhi.n	8009b34 <_TrySendOverflowPacket+0x1c>
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b5a:	b2d2      	uxtb	r2, r2
 8009b5c:	701a      	strb	r2, [r3, #0]
 8009b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b60:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009b62:	4b25      	ldr	r3, [pc, #148]	; (8009bf8 <_TrySendOverflowPacket+0xe0>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009b68:	4b22      	ldr	r3, [pc, #136]	; (8009bf4 <_TrySendOverflowPacket+0xdc>)
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	69ba      	ldr	r2, [r7, #24]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	623b      	str	r3, [r7, #32]
 8009b7a:	e00b      	b.n	8009b94 <_TrySendOverflowPacket+0x7c>
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	1c59      	adds	r1, r3, #1
 8009b84:	6279      	str	r1, [r7, #36]	; 0x24
 8009b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b8a:	b2d2      	uxtb	r2, r2
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	09db      	lsrs	r3, r3, #7
 8009b92:	623b      	str	r3, [r7, #32]
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	2b7f      	cmp	r3, #127	; 0x7f
 8009b98:	d8f0      	bhi.n	8009b7c <_TrySendOverflowPacket+0x64>
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8009ba0:	6a3a      	ldr	r2, [r7, #32]
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8009baa:	4b12      	ldr	r3, [pc, #72]	; (8009bf4 <_TrySendOverflowPacket+0xdc>)
 8009bac:	785b      	ldrb	r3, [r3, #1]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	1d3b      	adds	r3, r7, #4
 8009bb2:	69fa      	ldr	r2, [r7, #28]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	1d3b      	adds	r3, r7, #4
 8009bba:	4619      	mov	r1, r3
 8009bbc:	f7f6 fb10 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d009      	beq.n	8009bde <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009bca:	4a0a      	ldr	r2, [pc, #40]	; (8009bf4 <_TrySendOverflowPacket+0xdc>)
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009bd0:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <_TrySendOverflowPacket+0xdc>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <_TrySendOverflowPacket+0xdc>)
 8009bda:	701a      	strb	r2, [r3, #0]
 8009bdc:	e004      	b.n	8009be8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8009bde:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <_TrySendOverflowPacket+0xdc>)
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	3301      	adds	r3, #1
 8009be4:	4a03      	ldr	r2, [pc, #12]	; (8009bf4 <_TrySendOverflowPacket+0xdc>)
 8009be6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8009be8:	693b      	ldr	r3, [r7, #16]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3730      	adds	r7, #48	; 0x30
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200054cc 	.word	0x200054cc
 8009bf8:	e0001004 	.word	0xe0001004

08009bfc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08a      	sub	sp, #40	; 0x28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8009c08:	4b6c      	ldr	r3, [pc, #432]	; (8009dbc <_SendPacket+0x1c0>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d010      	beq.n	8009c32 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8009c10:	4b6a      	ldr	r3, [pc, #424]	; (8009dbc <_SendPacket+0x1c0>)
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 80a3 	beq.w	8009d60 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8009c1a:	4b68      	ldr	r3, [pc, #416]	; (8009dbc <_SendPacket+0x1c0>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d109      	bne.n	8009c36 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8009c22:	f7ff ff79 	bl	8009b18 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8009c26:	4b65      	ldr	r3, [pc, #404]	; (8009dbc <_SendPacket+0x1c0>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	f040 809a 	bne.w	8009d64 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8009c30:	e001      	b.n	8009c36 <_SendPacket+0x3a>
    goto Send;
 8009c32:	bf00      	nop
 8009c34:	e000      	b.n	8009c38 <_SendPacket+0x3c>
Send:
 8009c36:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b1f      	cmp	r3, #31
 8009c3c:	d809      	bhi.n	8009c52 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8009c3e:	4b5f      	ldr	r3, [pc, #380]	; (8009dbc <_SendPacket+0x1c0>)
 8009c40:	69da      	ldr	r2, [r3, #28]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	fa22 f303 	lsr.w	r3, r2, r3
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f040 808b 	bne.w	8009d68 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b17      	cmp	r3, #23
 8009c56:	d807      	bhi.n	8009c68 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	701a      	strb	r2, [r3, #0]
 8009c66:	e03d      	b.n	8009ce4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	2b7f      	cmp	r3, #127	; 0x7f
 8009c74:	d912      	bls.n	8009c9c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	09da      	lsrs	r2, r3, #7
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	b2d2      	uxtb	r2, r2
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	3a01      	subs	r2, #1
 8009c8e:	60fa      	str	r2, [r7, #12]
 8009c90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	e006      	b.n	8009caa <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b7f      	cmp	r3, #127	; 0x7f
 8009cae:	d912      	bls.n	8009cd6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	09da      	lsrs	r2, r3, #7
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	b2d2      	uxtb	r2, r2
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	3a01      	subs	r2, #1
 8009cc8:	60fa      	str	r2, [r7, #12]
 8009cca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	701a      	strb	r2, [r3, #0]
 8009cd4:	e006      	b.n	8009ce4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009ce4:	4b36      	ldr	r3, [pc, #216]	; (8009dc0 <_SendPacket+0x1c4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009cea:	4b34      	ldr	r3, [pc, #208]	; (8009dbc <_SendPacket+0x1c0>)
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	623b      	str	r3, [r7, #32]
 8009cfc:	e00b      	b.n	8009d16 <_SendPacket+0x11a>
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	1c59      	adds	r1, r3, #1
 8009d06:	6279      	str	r1, [r7, #36]	; 0x24
 8009d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	701a      	strb	r2, [r3, #0]
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	09db      	lsrs	r3, r3, #7
 8009d14:	623b      	str	r3, [r7, #32]
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	2b7f      	cmp	r3, #127	; 0x7f
 8009d1a:	d8f0      	bhi.n	8009cfe <_SendPacket+0x102>
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	627a      	str	r2, [r7, #36]	; 0x24
 8009d22:	6a3a      	ldr	r2, [r7, #32]
 8009d24:	b2d2      	uxtb	r2, r2
 8009d26:	701a      	strb	r2, [r3, #0]
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8009d2c:	4b23      	ldr	r3, [pc, #140]	; (8009dbc <_SendPacket+0x1c0>)
 8009d2e:	785b      	ldrb	r3, [r3, #1]
 8009d30:	4618      	mov	r0, r3
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	461a      	mov	r2, r3
 8009d3a:	68f9      	ldr	r1, [r7, #12]
 8009d3c:	f7f6 fa50 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009d40:	4603      	mov	r3, r0
 8009d42:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009d4a:	4a1c      	ldr	r2, [pc, #112]	; (8009dbc <_SendPacket+0x1c0>)
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	60d3      	str	r3, [r2, #12]
 8009d50:	e00b      	b.n	8009d6a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8009d52:	4b1a      	ldr	r3, [pc, #104]	; (8009dbc <_SendPacket+0x1c0>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	3301      	adds	r3, #1
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	4b18      	ldr	r3, [pc, #96]	; (8009dbc <_SendPacket+0x1c0>)
 8009d5c:	701a      	strb	r2, [r3, #0]
 8009d5e:	e004      	b.n	8009d6a <_SendPacket+0x16e>
    goto SendDone;
 8009d60:	bf00      	nop
 8009d62:	e002      	b.n	8009d6a <_SendPacket+0x16e>
      goto SendDone;
 8009d64:	bf00      	nop
 8009d66:	e000      	b.n	8009d6a <_SendPacket+0x16e>
      goto SendDone;
 8009d68:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8009d6a:	4b14      	ldr	r3, [pc, #80]	; (8009dbc <_SendPacket+0x1c0>)
 8009d6c:	7e1b      	ldrb	r3, [r3, #24]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4a14      	ldr	r2, [pc, #80]	; (8009dc4 <_SendPacket+0x1c8>)
 8009d72:	460b      	mov	r3, r1
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	440b      	add	r3, r1
 8009d78:	00db      	lsls	r3, r3, #3
 8009d7a:	4413      	add	r3, r2
 8009d7c:	336c      	adds	r3, #108	; 0x6c
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	4b0e      	ldr	r3, [pc, #56]	; (8009dbc <_SendPacket+0x1c0>)
 8009d82:	7e1b      	ldrb	r3, [r3, #24]
 8009d84:	4618      	mov	r0, r3
 8009d86:	490f      	ldr	r1, [pc, #60]	; (8009dc4 <_SendPacket+0x1c8>)
 8009d88:	4603      	mov	r3, r0
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	4403      	add	r3, r0
 8009d8e:	00db      	lsls	r3, r3, #3
 8009d90:	440b      	add	r3, r1
 8009d92:	3370      	adds	r3, #112	; 0x70
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d00b      	beq.n	8009db2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8009d9a:	4b08      	ldr	r3, [pc, #32]	; (8009dbc <_SendPacket+0x1c0>)
 8009d9c:	789b      	ldrb	r3, [r3, #2]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d107      	bne.n	8009db2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8009da2:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <_SendPacket+0x1c0>)
 8009da4:	2201      	movs	r2, #1
 8009da6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009da8:	f7ff fe44 	bl	8009a34 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009dac:	4b03      	ldr	r3, [pc, #12]	; (8009dbc <_SendPacket+0x1c0>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8009db2:	bf00      	nop
 8009db4:	3728      	adds	r7, #40	; 0x28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	200054cc 	.word	0x200054cc
 8009dc0:	e0001004 	.word	0xe0001004
 8009dc4:	200058e0 	.word	0x200058e0

08009dc8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ddc:	4917      	ldr	r1, [pc, #92]	; (8009e3c <SEGGER_SYSVIEW_Init+0x74>)
 8009dde:	4818      	ldr	r0, [pc, #96]	; (8009e40 <SEGGER_SYSVIEW_Init+0x78>)
 8009de0:	f7ff fcda 	bl	8009798 <SEGGER_RTT_AllocUpBuffer>
 8009de4:	4603      	mov	r3, r0
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	4b16      	ldr	r3, [pc, #88]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009dea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8009dec:	4b15      	ldr	r3, [pc, #84]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009dee:	785a      	ldrb	r2, [r3, #1]
 8009df0:	4b14      	ldr	r3, [pc, #80]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009df2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009df4:	4b13      	ldr	r3, [pc, #76]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009df6:	7e1b      	ldrb	r3, [r3, #24]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	2308      	movs	r3, #8
 8009e00:	4a11      	ldr	r2, [pc, #68]	; (8009e48 <SEGGER_SYSVIEW_Init+0x80>)
 8009e02:	490f      	ldr	r1, [pc, #60]	; (8009e40 <SEGGER_SYSVIEW_Init+0x78>)
 8009e04:	f7ff fd4c 	bl	80098a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8009e08:	4b0e      	ldr	r3, [pc, #56]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009e0e:	4b0f      	ldr	r3, [pc, #60]	; (8009e4c <SEGGER_SYSVIEW_Init+0x84>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a0c      	ldr	r2, [pc, #48]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009e14:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8009e16:	4a0b      	ldr	r2, [pc, #44]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8009e1c:	4a09      	ldr	r2, [pc, #36]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009e22:	4a08      	ldr	r2, [pc, #32]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8009e28:	4a06      	ldr	r2, [pc, #24]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8009e2e:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <SEGGER_SYSVIEW_Init+0x7c>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	200044c4 	.word	0x200044c4
 8009e40:	0800bbac 	.word	0x0800bbac
 8009e44:	200054cc 	.word	0x200054cc
 8009e48:	200054c4 	.word	0x200054c4
 8009e4c:	e0001004 	.word	0xe0001004

08009e50 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8009e58:	4a04      	ldr	r2, [pc, #16]	; (8009e6c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6113      	str	r3, [r2, #16]
}
 8009e5e:	bf00      	nop
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	200054cc 	.word	0x200054cc

08009e70 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009e78:	f3ef 8311 	mrs	r3, BASEPRI
 8009e7c:	f04f 0120 	mov.w	r1, #32
 8009e80:	f381 8811 	msr	BASEPRI, r1
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	4808      	ldr	r0, [pc, #32]	; (8009ea8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8009e88:	f7ff fdc7 	bl	8009a1a <_PreparePacket>
 8009e8c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	68b9      	ldr	r1, [r7, #8]
 8009e92:	68b8      	ldr	r0, [r7, #8]
 8009e94:	f7ff feb2 	bl	8009bfc <_SendPacket>
  RECORD_END();
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f383 8811 	msr	BASEPRI, r3
}
 8009e9e:	bf00      	nop
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	200054fc 	.word	0x200054fc

08009eac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b088      	sub	sp, #32
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8009eba:	f04f 0120 	mov.w	r1, #32
 8009ebe:	f381 8811 	msr	BASEPRI, r1
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	4816      	ldr	r0, [pc, #88]	; (8009f20 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8009ec6:	f7ff fda8 	bl	8009a1a <_PreparePacket>
 8009eca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	61bb      	str	r3, [r7, #24]
 8009ed8:	e00b      	b.n	8009ef2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	1c59      	adds	r1, r3, #1
 8009ee2:	61f9      	str	r1, [r7, #28]
 8009ee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ee8:	b2d2      	uxtb	r2, r2
 8009eea:	701a      	strb	r2, [r3, #0]
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	09db      	lsrs	r3, r3, #7
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8009ef6:	d8f0      	bhi.n	8009eda <SEGGER_SYSVIEW_RecordU32+0x2e>
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	61fa      	str	r2, [r7, #28]
 8009efe:	69ba      	ldr	r2, [r7, #24]
 8009f00:	b2d2      	uxtb	r2, r2
 8009f02:	701a      	strb	r2, [r3, #0]
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	68f9      	ldr	r1, [r7, #12]
 8009f0c:	6938      	ldr	r0, [r7, #16]
 8009f0e:	f7ff fe75 	bl	8009bfc <_SendPacket>
  RECORD_END();
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f383 8811 	msr	BASEPRI, r3
}
 8009f18:	bf00      	nop
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	200054fc 	.word	0x200054fc

08009f24 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08c      	sub	sp, #48	; 0x30
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009f30:	f3ef 8311 	mrs	r3, BASEPRI
 8009f34:	f04f 0120 	mov.w	r1, #32
 8009f38:	f381 8811 	msr	BASEPRI, r1
 8009f3c:	61fb      	str	r3, [r7, #28]
 8009f3e:	4825      	ldr	r0, [pc, #148]	; (8009fd4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009f40:	f7ff fd6b 	bl	8009a1a <_PreparePacket>
 8009f44:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f52:	e00b      	b.n	8009f6c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5a:	1c59      	adds	r1, r3, #1
 8009f5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009f5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f62:	b2d2      	uxtb	r2, r2
 8009f64:	701a      	strb	r2, [r3, #0]
 8009f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f68:	09db      	lsrs	r3, r3, #7
 8009f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8009f70:	d8f0      	bhi.n	8009f54 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f7a:	b2d2      	uxtb	r2, r2
 8009f7c:	701a      	strb	r2, [r3, #0]
 8009f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f80:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	627b      	str	r3, [r7, #36]	; 0x24
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	623b      	str	r3, [r7, #32]
 8009f8a:	e00b      	b.n	8009fa4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	1c59      	adds	r1, r3, #1
 8009f94:	6279      	str	r1, [r7, #36]	; 0x24
 8009f96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f9a:	b2d2      	uxtb	r2, r2
 8009f9c:	701a      	strb	r2, [r3, #0]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	09db      	lsrs	r3, r3, #7
 8009fa2:	623b      	str	r3, [r7, #32]
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8009fa8:	d8f0      	bhi.n	8009f8c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	627a      	str	r2, [r7, #36]	; 0x24
 8009fb0:	6a3a      	ldr	r2, [r7, #32]
 8009fb2:	b2d2      	uxtb	r2, r2
 8009fb4:	701a      	strb	r2, [r3, #0]
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	6979      	ldr	r1, [r7, #20]
 8009fbe:	69b8      	ldr	r0, [r7, #24]
 8009fc0:	f7ff fe1c 	bl	8009bfc <_SendPacket>
  RECORD_END();
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	f383 8811 	msr	BASEPRI, r3
}
 8009fca:	bf00      	nop
 8009fcc:	3730      	adds	r7, #48	; 0x30
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	200054fc 	.word	0x200054fc

08009fd8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b08e      	sub	sp, #56	; 0x38
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8009fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8009fea:	f04f 0120 	mov.w	r1, #32
 8009fee:	f381 8811 	msr	BASEPRI, r1
 8009ff2:	61fb      	str	r3, [r7, #28]
 8009ff4:	4832      	ldr	r0, [pc, #200]	; (800a0c0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8009ff6:	f7ff fd10 	bl	8009a1a <_PreparePacket>
 8009ffa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	637b      	str	r3, [r7, #52]	; 0x34
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	633b      	str	r3, [r7, #48]	; 0x30
 800a008:	e00b      	b.n	800a022 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a010:	1c59      	adds	r1, r3, #1
 800a012:	6379      	str	r1, [r7, #52]	; 0x34
 800a014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a018:	b2d2      	uxtb	r2, r2
 800a01a:	701a      	strb	r2, [r3, #0]
 800a01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01e:	09db      	lsrs	r3, r3, #7
 800a020:	633b      	str	r3, [r7, #48]	; 0x30
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	2b7f      	cmp	r3, #127	; 0x7f
 800a026:	d8f0      	bhi.n	800a00a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800a028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02a:	1c5a      	adds	r2, r3, #1
 800a02c:	637a      	str	r2, [r7, #52]	; 0x34
 800a02e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a030:	b2d2      	uxtb	r2, r2
 800a032:	701a      	strb	r2, [r3, #0]
 800a034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a036:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a040:	e00b      	b.n	800a05a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a044:	b2da      	uxtb	r2, r3
 800a046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a048:	1c59      	adds	r1, r3, #1
 800a04a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a04c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a050:	b2d2      	uxtb	r2, r2
 800a052:	701a      	strb	r2, [r3, #0]
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	09db      	lsrs	r3, r3, #7
 800a058:	62bb      	str	r3, [r7, #40]	; 0x28
 800a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05c:	2b7f      	cmp	r3, #127	; 0x7f
 800a05e:	d8f0      	bhi.n	800a042 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a068:	b2d2      	uxtb	r2, r2
 800a06a:	701a      	strb	r2, [r3, #0]
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	623b      	str	r3, [r7, #32]
 800a078:	e00b      	b.n	800a092 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	1c59      	adds	r1, r3, #1
 800a082:	6279      	str	r1, [r7, #36]	; 0x24
 800a084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a088:	b2d2      	uxtb	r2, r2
 800a08a:	701a      	strb	r2, [r3, #0]
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	09db      	lsrs	r3, r3, #7
 800a090:	623b      	str	r3, [r7, #32]
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	2b7f      	cmp	r3, #127	; 0x7f
 800a096:	d8f0      	bhi.n	800a07a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	627a      	str	r2, [r7, #36]	; 0x24
 800a09e:	6a3a      	ldr	r2, [r7, #32]
 800a0a0:	b2d2      	uxtb	r2, r2
 800a0a2:	701a      	strb	r2, [r3, #0]
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	6979      	ldr	r1, [r7, #20]
 800a0ac:	69b8      	ldr	r0, [r7, #24]
 800a0ae:	f7ff fda5 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	f383 8811 	msr	BASEPRI, r3
}
 800a0b8:	bf00      	nop
 800a0ba:	3738      	adds	r7, #56	; 0x38
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	200054fc 	.word	0x200054fc

0800a0c4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b090      	sub	sp, #64	; 0x40
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a0d2:	f3ef 8311 	mrs	r3, BASEPRI
 800a0d6:	f04f 0120 	mov.w	r1, #32
 800a0da:	f381 8811 	msr	BASEPRI, r1
 800a0de:	61fb      	str	r3, [r7, #28]
 800a0e0:	4840      	ldr	r0, [pc, #256]	; (800a1e4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800a0e2:	f7ff fc9a 	bl	8009a1a <_PreparePacket>
 800a0e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0f4:	e00b      	b.n	800a10e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800a0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0fc:	1c59      	adds	r1, r3, #1
 800a0fe:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a100:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a104:	b2d2      	uxtb	r2, r2
 800a106:	701a      	strb	r2, [r3, #0]
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	09db      	lsrs	r3, r3, #7
 800a10c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a110:	2b7f      	cmp	r3, #127	; 0x7f
 800a112:	d8f0      	bhi.n	800a0f6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800a114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a11c:	b2d2      	uxtb	r2, r2
 800a11e:	701a      	strb	r2, [r3, #0]
 800a120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a122:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	637b      	str	r3, [r7, #52]	; 0x34
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	633b      	str	r3, [r7, #48]	; 0x30
 800a12c:	e00b      	b.n	800a146 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a130:	b2da      	uxtb	r2, r3
 800a132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a134:	1c59      	adds	r1, r3, #1
 800a136:	6379      	str	r1, [r7, #52]	; 0x34
 800a138:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a13c:	b2d2      	uxtb	r2, r2
 800a13e:	701a      	strb	r2, [r3, #0]
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	09db      	lsrs	r3, r3, #7
 800a144:	633b      	str	r3, [r7, #48]	; 0x30
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	2b7f      	cmp	r3, #127	; 0x7f
 800a14a:	d8f0      	bhi.n	800a12e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800a14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	637a      	str	r2, [r7, #52]	; 0x34
 800a152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a154:	b2d2      	uxtb	r2, r2
 800a156:	701a      	strb	r2, [r3, #0]
 800a158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	62bb      	str	r3, [r7, #40]	; 0x28
 800a164:	e00b      	b.n	800a17e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16c:	1c59      	adds	r1, r3, #1
 800a16e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a174:	b2d2      	uxtb	r2, r2
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	09db      	lsrs	r3, r3, #7
 800a17c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	2b7f      	cmp	r3, #127	; 0x7f
 800a182:	d8f0      	bhi.n	800a166 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a186:	1c5a      	adds	r2, r3, #1
 800a188:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a18a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a18c:	b2d2      	uxtb	r2, r2
 800a18e:	701a      	strb	r2, [r3, #0]
 800a190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a192:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	627b      	str	r3, [r7, #36]	; 0x24
 800a198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a19a:	623b      	str	r3, [r7, #32]
 800a19c:	e00b      	b.n	800a1b6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	1c59      	adds	r1, r3, #1
 800a1a6:	6279      	str	r1, [r7, #36]	; 0x24
 800a1a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a1ac:	b2d2      	uxtb	r2, r2
 800a1ae:	701a      	strb	r2, [r3, #0]
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
 800a1b2:	09db      	lsrs	r3, r3, #7
 800a1b4:	623b      	str	r3, [r7, #32]
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	2b7f      	cmp	r3, #127	; 0x7f
 800a1ba:	d8f0      	bhi.n	800a19e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	1c5a      	adds	r2, r3, #1
 800a1c0:	627a      	str	r2, [r7, #36]	; 0x24
 800a1c2:	6a3a      	ldr	r2, [r7, #32]
 800a1c4:	b2d2      	uxtb	r2, r2
 800a1c6:	701a      	strb	r2, [r3, #0]
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	6979      	ldr	r1, [r7, #20]
 800a1d0:	69b8      	ldr	r0, [r7, #24]
 800a1d2:	f7ff fd13 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	f383 8811 	msr	BASEPRI, r3
}
 800a1dc:	bf00      	nop
 800a1de:	3740      	adds	r7, #64	; 0x40
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	200054fc 	.word	0x200054fc

0800a1e8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08c      	sub	sp, #48	; 0x30
 800a1ec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800a1ee:	4b58      	ldr	r3, [pc, #352]	; (800a350 <SEGGER_SYSVIEW_Start+0x168>)
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800a1f4:	f3ef 8311 	mrs	r3, BASEPRI
 800a1f8:	f04f 0120 	mov.w	r1, #32
 800a1fc:	f381 8811 	msr	BASEPRI, r1
 800a200:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800a202:	4b53      	ldr	r3, [pc, #332]	; (800a350 <SEGGER_SYSVIEW_Start+0x168>)
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	220a      	movs	r2, #10
 800a208:	4952      	ldr	r1, [pc, #328]	; (800a354 <SEGGER_SYSVIEW_Start+0x16c>)
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f5 ffe8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800a216:	200a      	movs	r0, #10
 800a218:	f7ff fe2a 	bl	8009e70 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a21c:	f3ef 8311 	mrs	r3, BASEPRI
 800a220:	f04f 0120 	mov.w	r1, #32
 800a224:	f381 8811 	msr	BASEPRI, r1
 800a228:	60bb      	str	r3, [r7, #8]
 800a22a:	484b      	ldr	r0, [pc, #300]	; (800a358 <SEGGER_SYSVIEW_Start+0x170>)
 800a22c:	f7ff fbf5 	bl	8009a1a <_PreparePacket>
 800a230:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a23a:	4b45      	ldr	r3, [pc, #276]	; (800a350 <SEGGER_SYSVIEW_Start+0x168>)
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a240:	e00b      	b.n	800a25a <SEGGER_SYSVIEW_Start+0x72>
 800a242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a244:	b2da      	uxtb	r2, r3
 800a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a248:	1c59      	adds	r1, r3, #1
 800a24a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a24c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a250:	b2d2      	uxtb	r2, r2
 800a252:	701a      	strb	r2, [r3, #0]
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	09db      	lsrs	r3, r3, #7
 800a258:	62bb      	str	r3, [r7, #40]	; 0x28
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	2b7f      	cmp	r3, #127	; 0x7f
 800a25e:	d8f0      	bhi.n	800a242 <SEGGER_SYSVIEW_Start+0x5a>
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a268:	b2d2      	uxtb	r2, r2
 800a26a:	701a      	strb	r2, [r3, #0]
 800a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
 800a274:	4b36      	ldr	r3, [pc, #216]	; (800a350 <SEGGER_SYSVIEW_Start+0x168>)
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	623b      	str	r3, [r7, #32]
 800a27a:	e00b      	b.n	800a294 <SEGGER_SYSVIEW_Start+0xac>
 800a27c:	6a3b      	ldr	r3, [r7, #32]
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	1c59      	adds	r1, r3, #1
 800a284:	6279      	str	r1, [r7, #36]	; 0x24
 800a286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	09db      	lsrs	r3, r3, #7
 800a292:	623b      	str	r3, [r7, #32]
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	2b7f      	cmp	r3, #127	; 0x7f
 800a298:	d8f0      	bhi.n	800a27c <SEGGER_SYSVIEW_Start+0x94>
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	1c5a      	adds	r2, r3, #1
 800a29e:	627a      	str	r2, [r7, #36]	; 0x24
 800a2a0:	6a3a      	ldr	r2, [r7, #32]
 800a2a2:	b2d2      	uxtb	r2, r2
 800a2a4:	701a      	strb	r2, [r3, #0]
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	61fb      	str	r3, [r7, #28]
 800a2ae:	4b28      	ldr	r3, [pc, #160]	; (800a350 <SEGGER_SYSVIEW_Start+0x168>)
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	61bb      	str	r3, [r7, #24]
 800a2b4:	e00b      	b.n	800a2ce <SEGGER_SYSVIEW_Start+0xe6>
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	1c59      	adds	r1, r3, #1
 800a2be:	61f9      	str	r1, [r7, #28]
 800a2c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a2c4:	b2d2      	uxtb	r2, r2
 800a2c6:	701a      	strb	r2, [r3, #0]
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	09db      	lsrs	r3, r3, #7
 800a2cc:	61bb      	str	r3, [r7, #24]
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	2b7f      	cmp	r3, #127	; 0x7f
 800a2d2:	d8f0      	bhi.n	800a2b6 <SEGGER_SYSVIEW_Start+0xce>
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	61fa      	str	r2, [r7, #28]
 800a2da:	69ba      	ldr	r2, [r7, #24]
 800a2dc:	b2d2      	uxtb	r2, r2
 800a2de:	701a      	strb	r2, [r3, #0]
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	613b      	str	r3, [r7, #16]
 800a2ec:	e00b      	b.n	800a306 <SEGGER_SYSVIEW_Start+0x11e>
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	1c59      	adds	r1, r3, #1
 800a2f6:	6179      	str	r1, [r7, #20]
 800a2f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	701a      	strb	r2, [r3, #0]
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	09db      	lsrs	r3, r3, #7
 800a304:	613b      	str	r3, [r7, #16]
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b7f      	cmp	r3, #127	; 0x7f
 800a30a:	d8f0      	bhi.n	800a2ee <SEGGER_SYSVIEW_Start+0x106>
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	1c5a      	adds	r2, r3, #1
 800a310:	617a      	str	r2, [r7, #20]
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	b2d2      	uxtb	r2, r2
 800a316:	701a      	strb	r2, [r3, #0]
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a31c:	2218      	movs	r2, #24
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff fc6b 	bl	8009bfc <_SendPacket>
      RECORD_END();
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a32c:	4b08      	ldr	r3, [pc, #32]	; (800a350 <SEGGER_SYSVIEW_Start+0x168>)
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800a334:	4b06      	ldr	r3, [pc, #24]	; (800a350 <SEGGER_SYSVIEW_Start+0x168>)
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800a33a:	f000 f9eb 	bl	800a714 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800a33e:	f000 f9b1 	bl	800a6a4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800a342:	f000 fc83 	bl	800ac4c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800a346:	bf00      	nop
 800a348:	3730      	adds	r7, #48	; 0x30
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	200054cc 	.word	0x200054cc
 800a354:	0800bddc 	.word	0x0800bddc
 800a358:	200054fc 	.word	0x200054fc

0800a35c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a362:	f3ef 8311 	mrs	r3, BASEPRI
 800a366:	f04f 0120 	mov.w	r1, #32
 800a36a:	f381 8811 	msr	BASEPRI, r1
 800a36e:	607b      	str	r3, [r7, #4]
 800a370:	480b      	ldr	r0, [pc, #44]	; (800a3a0 <SEGGER_SYSVIEW_Stop+0x44>)
 800a372:	f7ff fb52 	bl	8009a1a <_PreparePacket>
 800a376:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800a378:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d007      	beq.n	800a390 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800a380:	220b      	movs	r2, #11
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6838      	ldr	r0, [r7, #0]
 800a386:	f7ff fc39 	bl	8009bfc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800a38a:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f383 8811 	msr	BASEPRI, r3
}
 800a396:	bf00      	nop
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	200054fc 	.word	0x200054fc
 800a3a4:	200054cc 	.word	0x200054cc

0800a3a8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08c      	sub	sp, #48	; 0x30
 800a3ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a3ae:	f3ef 8311 	mrs	r3, BASEPRI
 800a3b2:	f04f 0120 	mov.w	r1, #32
 800a3b6:	f381 8811 	msr	BASEPRI, r1
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	4845      	ldr	r0, [pc, #276]	; (800a4d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800a3be:	f7ff fb2c 	bl	8009a1a <_PreparePacket>
 800a3c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3cc:	4b42      	ldr	r3, [pc, #264]	; (800a4d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3d2:	e00b      	b.n	800a3ec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	1c59      	adds	r1, r3, #1
 800a3dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a3de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a3e2:	b2d2      	uxtb	r2, r2
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e8:	09db      	lsrs	r3, r3, #7
 800a3ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	2b7f      	cmp	r3, #127	; 0x7f
 800a3f0:	d8f0      	bhi.n	800a3d4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a400:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
 800a406:	4b34      	ldr	r3, [pc, #208]	; (800a4d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	623b      	str	r3, [r7, #32]
 800a40c:	e00b      	b.n	800a426 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800a40e:	6a3b      	ldr	r3, [r7, #32]
 800a410:	b2da      	uxtb	r2, r3
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	1c59      	adds	r1, r3, #1
 800a416:	6279      	str	r1, [r7, #36]	; 0x24
 800a418:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a41c:	b2d2      	uxtb	r2, r2
 800a41e:	701a      	strb	r2, [r3, #0]
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	09db      	lsrs	r3, r3, #7
 800a424:	623b      	str	r3, [r7, #32]
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	2b7f      	cmp	r3, #127	; 0x7f
 800a42a:	d8f0      	bhi.n	800a40e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	627a      	str	r2, [r7, #36]	; 0x24
 800a432:	6a3a      	ldr	r2, [r7, #32]
 800a434:	b2d2      	uxtb	r2, r2
 800a436:	701a      	strb	r2, [r3, #0]
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	61fb      	str	r3, [r7, #28]
 800a440:	4b25      	ldr	r3, [pc, #148]	; (800a4d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	61bb      	str	r3, [r7, #24]
 800a446:	e00b      	b.n	800a460 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	1c59      	adds	r1, r3, #1
 800a450:	61f9      	str	r1, [r7, #28]
 800a452:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a456:	b2d2      	uxtb	r2, r2
 800a458:	701a      	strb	r2, [r3, #0]
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	09db      	lsrs	r3, r3, #7
 800a45e:	61bb      	str	r3, [r7, #24]
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	2b7f      	cmp	r3, #127	; 0x7f
 800a464:	d8f0      	bhi.n	800a448 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	61fa      	str	r2, [r7, #28]
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	701a      	strb	r2, [r3, #0]
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	2300      	movs	r3, #0
 800a47c:	613b      	str	r3, [r7, #16]
 800a47e:	e00b      	b.n	800a498 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	b2da      	uxtb	r2, r3
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	1c59      	adds	r1, r3, #1
 800a488:	6179      	str	r1, [r7, #20]
 800a48a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a48e:	b2d2      	uxtb	r2, r2
 800a490:	701a      	strb	r2, [r3, #0]
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	09db      	lsrs	r3, r3, #7
 800a496:	613b      	str	r3, [r7, #16]
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2b7f      	cmp	r3, #127	; 0x7f
 800a49c:	d8f0      	bhi.n	800a480 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	1c5a      	adds	r2, r3, #1
 800a4a2:	617a      	str	r2, [r7, #20]
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a4ae:	2218      	movs	r2, #24
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	68b8      	ldr	r0, [r7, #8]
 800a4b4:	f7ff fba2 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a4be:	4b06      	ldr	r3, [pc, #24]	; (800a4d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800a4c6:	4b04      	ldr	r3, [pc, #16]	; (800a4d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	4798      	blx	r3
  }
}
 800a4cc:	bf00      	nop
 800a4ce:	3730      	adds	r7, #48	; 0x30
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	200054fc 	.word	0x200054fc
 800a4d8:	200054cc 	.word	0x200054cc

0800a4dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b092      	sub	sp, #72	; 0x48
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800a4e4:	f3ef 8311 	mrs	r3, BASEPRI
 800a4e8:	f04f 0120 	mov.w	r1, #32
 800a4ec:	f381 8811 	msr	BASEPRI, r1
 800a4f0:	617b      	str	r3, [r7, #20]
 800a4f2:	486a      	ldr	r0, [pc, #424]	; (800a69c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a4f4:	f7ff fa91 	bl	8009a1a <_PreparePacket>
 800a4f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	647b      	str	r3, [r7, #68]	; 0x44
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	4b66      	ldr	r3, [pc, #408]	; (800a6a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	643b      	str	r3, [r7, #64]	; 0x40
 800a50e:	e00b      	b.n	800a528 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a512:	b2da      	uxtb	r2, r3
 800a514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a516:	1c59      	adds	r1, r3, #1
 800a518:	6479      	str	r1, [r7, #68]	; 0x44
 800a51a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a51e:	b2d2      	uxtb	r2, r2
 800a520:	701a      	strb	r2, [r3, #0]
 800a522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a524:	09db      	lsrs	r3, r3, #7
 800a526:	643b      	str	r3, [r7, #64]	; 0x40
 800a528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a52a:	2b7f      	cmp	r3, #127	; 0x7f
 800a52c:	d8f0      	bhi.n	800a510 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a52e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	647a      	str	r2, [r7, #68]	; 0x44
 800a534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	701a      	strb	r2, [r3, #0]
 800a53a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a53c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	63bb      	str	r3, [r7, #56]	; 0x38
 800a548:	e00b      	b.n	800a562 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a550:	1c59      	adds	r1, r3, #1
 800a552:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a554:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a558:	b2d2      	uxtb	r2, r2
 800a55a:	701a      	strb	r2, [r3, #0]
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	09db      	lsrs	r3, r3, #7
 800a560:	63bb      	str	r3, [r7, #56]	; 0x38
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	2b7f      	cmp	r3, #127	; 0x7f
 800a566:	d8f0      	bhi.n	800a54a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a56e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a570:	b2d2      	uxtb	r2, r2
 800a572:	701a      	strb	r2, [r3, #0]
 800a574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a576:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	2220      	movs	r2, #32
 800a57e:	4619      	mov	r1, r3
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f7ff f9fd 	bl	8009980 <_EncodeStr>
 800a586:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a588:	2209      	movs	r2, #9
 800a58a:	68f9      	ldr	r1, [r7, #12]
 800a58c:	6938      	ldr	r0, [r7, #16]
 800a58e:	f7ff fb35 	bl	8009bfc <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	637b      	str	r3, [r7, #52]	; 0x34
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	4b40      	ldr	r3, [pc, #256]	; (800a6a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	633b      	str	r3, [r7, #48]	; 0x30
 800a5a6:	e00b      	b.n	800a5c0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ae:	1c59      	adds	r1, r3, #1
 800a5b0:	6379      	str	r1, [r7, #52]	; 0x34
 800a5b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a5b6:	b2d2      	uxtb	r2, r2
 800a5b8:	701a      	strb	r2, [r3, #0]
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	09db      	lsrs	r3, r3, #7
 800a5be:	633b      	str	r3, [r7, #48]	; 0x30
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	2b7f      	cmp	r3, #127	; 0x7f
 800a5c4:	d8f0      	bhi.n	800a5a8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c8:	1c5a      	adds	r2, r3, #1
 800a5ca:	637a      	str	r2, [r7, #52]	; 0x34
 800a5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	701a      	strb	r2, [r3, #0]
 800a5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5e0:	e00b      	b.n	800a5fa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e8:	1c59      	adds	r1, r3, #1
 800a5ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a5ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a5f0:	b2d2      	uxtb	r2, r2
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	09db      	lsrs	r3, r3, #7
 800a5f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fc:	2b7f      	cmp	r3, #127	; 0x7f
 800a5fe:	d8f0      	bhi.n	800a5e2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	701a      	strb	r2, [r3, #0]
 800a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	627b      	str	r3, [r7, #36]	; 0x24
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	623b      	str	r3, [r7, #32]
 800a61a:	e00b      	b.n	800a634 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	1c59      	adds	r1, r3, #1
 800a624:	6279      	str	r1, [r7, #36]	; 0x24
 800a626:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a62a:	b2d2      	uxtb	r2, r2
 800a62c:	701a      	strb	r2, [r3, #0]
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	09db      	lsrs	r3, r3, #7
 800a632:	623b      	str	r3, [r7, #32]
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	2b7f      	cmp	r3, #127	; 0x7f
 800a638:	d8f0      	bhi.n	800a61c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	627a      	str	r2, [r7, #36]	; 0x24
 800a640:	6a3a      	ldr	r2, [r7, #32]
 800a642:	b2d2      	uxtb	r2, r2
 800a644:	701a      	strb	r2, [r3, #0]
 800a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a648:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	61fb      	str	r3, [r7, #28]
 800a64e:	2300      	movs	r3, #0
 800a650:	61bb      	str	r3, [r7, #24]
 800a652:	e00b      	b.n	800a66c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	b2da      	uxtb	r2, r3
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	1c59      	adds	r1, r3, #1
 800a65c:	61f9      	str	r1, [r7, #28]
 800a65e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a662:	b2d2      	uxtb	r2, r2
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	09db      	lsrs	r3, r3, #7
 800a66a:	61bb      	str	r3, [r7, #24]
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	2b7f      	cmp	r3, #127	; 0x7f
 800a670:	d8f0      	bhi.n	800a654 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	61fa      	str	r2, [r7, #28]
 800a678:	69ba      	ldr	r2, [r7, #24]
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	701a      	strb	r2, [r3, #0]
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a682:	2215      	movs	r2, #21
 800a684:	68f9      	ldr	r1, [r7, #12]
 800a686:	6938      	ldr	r0, [r7, #16]
 800a688:	f7ff fab8 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f383 8811 	msr	BASEPRI, r3
}
 800a692:	bf00      	nop
 800a694:	3748      	adds	r7, #72	; 0x48
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	200054fc 	.word	0x200054fc
 800a6a0:	200054cc 	.word	0x200054cc

0800a6a4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a6a8:	4b07      	ldr	r3, [pc, #28]	; (800a6c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d008      	beq.n	800a6c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a6b0:	4b05      	ldr	r3, [pc, #20]	; (800a6c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a6ba:	4b03      	ldr	r3, [pc, #12]	; (800a6c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	4798      	blx	r3
  }
}
 800a6c2:	bf00      	nop
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	200054cc 	.word	0x200054cc

0800a6cc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a6d4:	f3ef 8311 	mrs	r3, BASEPRI
 800a6d8:	f04f 0120 	mov.w	r1, #32
 800a6dc:	f381 8811 	msr	BASEPRI, r1
 800a6e0:	617b      	str	r3, [r7, #20]
 800a6e2:	480b      	ldr	r0, [pc, #44]	; (800a710 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a6e4:	f7ff f999 	bl	8009a1a <_PreparePacket>
 800a6e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a6ea:	2280      	movs	r2, #128	; 0x80
 800a6ec:	6879      	ldr	r1, [r7, #4]
 800a6ee:	6938      	ldr	r0, [r7, #16]
 800a6f0:	f7ff f946 	bl	8009980 <_EncodeStr>
 800a6f4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a6f6:	220e      	movs	r2, #14
 800a6f8:	68f9      	ldr	r1, [r7, #12]
 800a6fa:	6938      	ldr	r0, [r7, #16]
 800a6fc:	f7ff fa7e 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f383 8811 	msr	BASEPRI, r3
}
 800a706:	bf00      	nop
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	200054fc 	.word	0x200054fc

0800a714 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800a714:	b590      	push	{r4, r7, lr}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800a71a:	4b15      	ldr	r3, [pc, #84]	; (800a770 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d01a      	beq.n	800a758 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800a722:	4b13      	ldr	r3, [pc, #76]	; (800a770 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d015      	beq.n	800a758 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800a72c:	4b10      	ldr	r3, [pc, #64]	; (800a770 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a72e:	6a1b      	ldr	r3, [r3, #32]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4798      	blx	r3
 800a734:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a738:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800a73a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a73e:	f04f 0200 	mov.w	r2, #0
 800a742:	f04f 0300 	mov.w	r3, #0
 800a746:	000a      	movs	r2, r1
 800a748:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a74a:	4613      	mov	r3, r2
 800a74c:	461a      	mov	r2, r3
 800a74e:	4621      	mov	r1, r4
 800a750:	200d      	movs	r0, #13
 800a752:	f7ff fbe7 	bl	8009f24 <SEGGER_SYSVIEW_RecordU32x2>
 800a756:	e006      	b.n	800a766 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800a758:	4b06      	ldr	r3, [pc, #24]	; (800a774 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4619      	mov	r1, r3
 800a75e:	200c      	movs	r0, #12
 800a760:	f7ff fba4 	bl	8009eac <SEGGER_SYSVIEW_RecordU32>
  }
}
 800a764:	bf00      	nop
 800a766:	bf00      	nop
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd90      	pop	{r4, r7, pc}
 800a76e:	bf00      	nop
 800a770:	200054cc 	.word	0x200054cc
 800a774:	e0001004 	.word	0xe0001004

0800a778 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a77e:	f3ef 8311 	mrs	r3, BASEPRI
 800a782:	f04f 0120 	mov.w	r1, #32
 800a786:	f381 8811 	msr	BASEPRI, r1
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	4819      	ldr	r0, [pc, #100]	; (800a7f4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800a78e:	f7ff f944 	bl	8009a1a <_PreparePacket>
 800a792:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800a798:	4b17      	ldr	r3, [pc, #92]	; (800a7f8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	617b      	str	r3, [r7, #20]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	e00b      	b.n	800a7c4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	1c59      	adds	r1, r3, #1
 800a7b4:	6179      	str	r1, [r7, #20]
 800a7b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	701a      	strb	r2, [r3, #0]
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	09db      	lsrs	r3, r3, #7
 800a7c2:	613b      	str	r3, [r7, #16]
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b7f      	cmp	r3, #127	; 0x7f
 800a7c8:	d8f0      	bhi.n	800a7ac <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	617a      	str	r2, [r7, #20]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	b2d2      	uxtb	r2, r2
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800a7da:	2202      	movs	r2, #2
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	68b8      	ldr	r0, [r7, #8]
 800a7e0:	f7ff fa0c 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f383 8811 	msr	BASEPRI, r3
}
 800a7ea:	bf00      	nop
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	200054fc 	.word	0x200054fc
 800a7f8:	e000ed04 	.word	0xe000ed04

0800a7fc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a802:	f3ef 8311 	mrs	r3, BASEPRI
 800a806:	f04f 0120 	mov.w	r1, #32
 800a80a:	f381 8811 	msr	BASEPRI, r1
 800a80e:	607b      	str	r3, [r7, #4]
 800a810:	4807      	ldr	r0, [pc, #28]	; (800a830 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800a812:	f7ff f902 	bl	8009a1a <_PreparePacket>
 800a816:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800a818:	2203      	movs	r2, #3
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6838      	ldr	r0, [r7, #0]
 800a81e:	f7ff f9ed 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f383 8811 	msr	BASEPRI, r3
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	200054fc 	.word	0x200054fc

0800a834 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a83a:	f3ef 8311 	mrs	r3, BASEPRI
 800a83e:	f04f 0120 	mov.w	r1, #32
 800a842:	f381 8811 	msr	BASEPRI, r1
 800a846:	607b      	str	r3, [r7, #4]
 800a848:	4807      	ldr	r0, [pc, #28]	; (800a868 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800a84a:	f7ff f8e6 	bl	8009a1a <_PreparePacket>
 800a84e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800a850:	2212      	movs	r2, #18
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6838      	ldr	r0, [r7, #0]
 800a856:	f7ff f9d1 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f383 8811 	msr	BASEPRI, r3
}
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	200054fc 	.word	0x200054fc

0800a86c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a872:	f3ef 8311 	mrs	r3, BASEPRI
 800a876:	f04f 0120 	mov.w	r1, #32
 800a87a:	f381 8811 	msr	BASEPRI, r1
 800a87e:	607b      	str	r3, [r7, #4]
 800a880:	4807      	ldr	r0, [pc, #28]	; (800a8a0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a882:	f7ff f8ca 	bl	8009a1a <_PreparePacket>
 800a886:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a888:	2211      	movs	r2, #17
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6838      	ldr	r0, [r7, #0]
 800a88e:	f7ff f9b5 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f383 8811 	msr	BASEPRI, r3
}
 800a898:	bf00      	nop
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	200054fc 	.word	0x200054fc

0800a8a4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a8ac:	f3ef 8311 	mrs	r3, BASEPRI
 800a8b0:	f04f 0120 	mov.w	r1, #32
 800a8b4:	f381 8811 	msr	BASEPRI, r1
 800a8b8:	617b      	str	r3, [r7, #20]
 800a8ba:	4819      	ldr	r0, [pc, #100]	; (800a920 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a8bc:	f7ff f8ad 	bl	8009a1a <_PreparePacket>
 800a8c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a8c6:	4b17      	ldr	r3, [pc, #92]	; (800a924 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	61bb      	str	r3, [r7, #24]
 800a8d8:	e00b      	b.n	800a8f2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	b2da      	uxtb	r2, r3
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	1c59      	adds	r1, r3, #1
 800a8e2:	61f9      	str	r1, [r7, #28]
 800a8e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a8e8:	b2d2      	uxtb	r2, r2
 800a8ea:	701a      	strb	r2, [r3, #0]
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	09db      	lsrs	r3, r3, #7
 800a8f0:	61bb      	str	r3, [r7, #24]
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	2b7f      	cmp	r3, #127	; 0x7f
 800a8f6:	d8f0      	bhi.n	800a8da <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	1c5a      	adds	r2, r3, #1
 800a8fc:	61fa      	str	r2, [r7, #28]
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	b2d2      	uxtb	r2, r2
 800a902:	701a      	strb	r2, [r3, #0]
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a908:	2208      	movs	r2, #8
 800a90a:	68f9      	ldr	r1, [r7, #12]
 800a90c:	6938      	ldr	r0, [r7, #16]
 800a90e:	f7ff f975 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f383 8811 	msr	BASEPRI, r3
}
 800a918:	bf00      	nop
 800a91a:	3720      	adds	r7, #32
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	200054fc 	.word	0x200054fc
 800a924:	200054cc 	.word	0x200054cc

0800a928 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a930:	f3ef 8311 	mrs	r3, BASEPRI
 800a934:	f04f 0120 	mov.w	r1, #32
 800a938:	f381 8811 	msr	BASEPRI, r1
 800a93c:	617b      	str	r3, [r7, #20]
 800a93e:	4819      	ldr	r0, [pc, #100]	; (800a9a4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a940:	f7ff f86b 	bl	8009a1a <_PreparePacket>
 800a944:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a94a:	4b17      	ldr	r3, [pc, #92]	; (800a9a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	61fb      	str	r3, [r7, #28]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	61bb      	str	r3, [r7, #24]
 800a95c:	e00b      	b.n	800a976 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	b2da      	uxtb	r2, r3
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	1c59      	adds	r1, r3, #1
 800a966:	61f9      	str	r1, [r7, #28]
 800a968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a96c:	b2d2      	uxtb	r2, r2
 800a96e:	701a      	strb	r2, [r3, #0]
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	09db      	lsrs	r3, r3, #7
 800a974:	61bb      	str	r3, [r7, #24]
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	2b7f      	cmp	r3, #127	; 0x7f
 800a97a:	d8f0      	bhi.n	800a95e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	61fa      	str	r2, [r7, #28]
 800a982:	69ba      	ldr	r2, [r7, #24]
 800a984:	b2d2      	uxtb	r2, r2
 800a986:	701a      	strb	r2, [r3, #0]
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a98c:	2204      	movs	r2, #4
 800a98e:	68f9      	ldr	r1, [r7, #12]
 800a990:	6938      	ldr	r0, [r7, #16]
 800a992:	f7ff f933 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f383 8811 	msr	BASEPRI, r3
}
 800a99c:	bf00      	nop
 800a99e:	3720      	adds	r7, #32
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	200054fc 	.word	0x200054fc
 800a9a8:	200054cc 	.word	0x200054cc

0800a9ac <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b088      	sub	sp, #32
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a9b4:	f3ef 8311 	mrs	r3, BASEPRI
 800a9b8:	f04f 0120 	mov.w	r1, #32
 800a9bc:	f381 8811 	msr	BASEPRI, r1
 800a9c0:	617b      	str	r3, [r7, #20]
 800a9c2:	4819      	ldr	r0, [pc, #100]	; (800aa28 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a9c4:	f7ff f829 	bl	8009a1a <_PreparePacket>
 800a9c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a9ce:	4b17      	ldr	r3, [pc, #92]	; (800aa2c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	61fb      	str	r3, [r7, #28]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	61bb      	str	r3, [r7, #24]
 800a9e0:	e00b      	b.n	800a9fa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	1c59      	adds	r1, r3, #1
 800a9ea:	61f9      	str	r1, [r7, #28]
 800a9ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a9f0:	b2d2      	uxtb	r2, r2
 800a9f2:	701a      	strb	r2, [r3, #0]
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	09db      	lsrs	r3, r3, #7
 800a9f8:	61bb      	str	r3, [r7, #24]
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	2b7f      	cmp	r3, #127	; 0x7f
 800a9fe:	d8f0      	bhi.n	800a9e2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	61fa      	str	r2, [r7, #28]
 800aa06:	69ba      	ldr	r2, [r7, #24]
 800aa08:	b2d2      	uxtb	r2, r2
 800aa0a:	701a      	strb	r2, [r3, #0]
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800aa10:	2206      	movs	r2, #6
 800aa12:	68f9      	ldr	r1, [r7, #12]
 800aa14:	6938      	ldr	r0, [r7, #16]
 800aa16:	f7ff f8f1 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f383 8811 	msr	BASEPRI, r3
}
 800aa20:	bf00      	nop
 800aa22:	3720      	adds	r7, #32
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	200054fc 	.word	0x200054fc
 800aa2c:	200054cc 	.word	0x200054cc

0800aa30 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08a      	sub	sp, #40	; 0x28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800aa3a:	f3ef 8311 	mrs	r3, BASEPRI
 800aa3e:	f04f 0120 	mov.w	r1, #32
 800aa42:	f381 8811 	msr	BASEPRI, r1
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	4827      	ldr	r0, [pc, #156]	; (800aae8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800aa4a:	f7fe ffe6 	bl	8009a1a <_PreparePacket>
 800aa4e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800aa54:	4b25      	ldr	r3, [pc, #148]	; (800aaec <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	627b      	str	r3, [r7, #36]	; 0x24
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	623b      	str	r3, [r7, #32]
 800aa66:	e00b      	b.n	800aa80 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	1c59      	adds	r1, r3, #1
 800aa70:	6279      	str	r1, [r7, #36]	; 0x24
 800aa72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aa76:	b2d2      	uxtb	r2, r2
 800aa78:	701a      	strb	r2, [r3, #0]
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	09db      	lsrs	r3, r3, #7
 800aa7e:	623b      	str	r3, [r7, #32]
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	2b7f      	cmp	r3, #127	; 0x7f
 800aa84:	d8f0      	bhi.n	800aa68 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa88:	1c5a      	adds	r2, r3, #1
 800aa8a:	627a      	str	r2, [r7, #36]	; 0x24
 800aa8c:	6a3a      	ldr	r2, [r7, #32]
 800aa8e:	b2d2      	uxtb	r2, r2
 800aa90:	701a      	strb	r2, [r3, #0]
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	61fb      	str	r3, [r7, #28]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	61bb      	str	r3, [r7, #24]
 800aa9e:	e00b      	b.n	800aab8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	1c59      	adds	r1, r3, #1
 800aaa8:	61f9      	str	r1, [r7, #28]
 800aaaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aaae:	b2d2      	uxtb	r2, r2
 800aab0:	701a      	strb	r2, [r3, #0]
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	09db      	lsrs	r3, r3, #7
 800aab6:	61bb      	str	r3, [r7, #24]
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	2b7f      	cmp	r3, #127	; 0x7f
 800aabc:	d8f0      	bhi.n	800aaa0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	61fa      	str	r2, [r7, #28]
 800aac4:	69ba      	ldr	r2, [r7, #24]
 800aac6:	b2d2      	uxtb	r2, r2
 800aac8:	701a      	strb	r2, [r3, #0]
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800aace:	2207      	movs	r2, #7
 800aad0:	68f9      	ldr	r1, [r7, #12]
 800aad2:	6938      	ldr	r0, [r7, #16]
 800aad4:	f7ff f892 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f383 8811 	msr	BASEPRI, r3
}
 800aade:	bf00      	nop
 800aae0:	3728      	adds	r7, #40	; 0x28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	200054fc 	.word	0x200054fc
 800aaec:	200054cc 	.word	0x200054cc

0800aaf0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800aaf8:	4b04      	ldr	r3, [pc, #16]	; (800ab0c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	1ad3      	subs	r3, r2, r3
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	200054cc 	.word	0x200054cc

0800ab10 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08c      	sub	sp, #48	; 0x30
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800ab1a:	4b3b      	ldr	r3, [pc, #236]	; (800ac08 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d06d      	beq.n	800abfe <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800ab22:	4b39      	ldr	r3, [pc, #228]	; (800ac08 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800ab28:	2300      	movs	r3, #0
 800ab2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab2c:	e008      	b.n	800ab40 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800ab2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800ab34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d007      	beq.n	800ab4a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d3f2      	bcc.n	800ab2e <SEGGER_SYSVIEW_SendModule+0x1e>
 800ab48:	e000      	b.n	800ab4c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800ab4a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d055      	beq.n	800abfe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ab52:	f3ef 8311 	mrs	r3, BASEPRI
 800ab56:	f04f 0120 	mov.w	r1, #32
 800ab5a:	f381 8811 	msr	BASEPRI, r1
 800ab5e:	617b      	str	r3, [r7, #20]
 800ab60:	482a      	ldr	r0, [pc, #168]	; (800ac0c <SEGGER_SYSVIEW_SendModule+0xfc>)
 800ab62:	f7fe ff5a 	bl	8009a1a <_PreparePacket>
 800ab66:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab70:	79fb      	ldrb	r3, [r7, #7]
 800ab72:	623b      	str	r3, [r7, #32]
 800ab74:	e00b      	b.n	800ab8e <SEGGER_SYSVIEW_SendModule+0x7e>
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	1c59      	adds	r1, r3, #1
 800ab7e:	6279      	str	r1, [r7, #36]	; 0x24
 800ab80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ab84:	b2d2      	uxtb	r2, r2
 800ab86:	701a      	strb	r2, [r3, #0]
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	09db      	lsrs	r3, r3, #7
 800ab8c:	623b      	str	r3, [r7, #32]
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	2b7f      	cmp	r3, #127	; 0x7f
 800ab92:	d8f0      	bhi.n	800ab76 <SEGGER_SYSVIEW_SendModule+0x66>
 800ab94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab96:	1c5a      	adds	r2, r3, #1
 800ab98:	627a      	str	r2, [r7, #36]	; 0x24
 800ab9a:	6a3a      	ldr	r2, [r7, #32]
 800ab9c:	b2d2      	uxtb	r2, r2
 800ab9e:	701a      	strb	r2, [r3, #0]
 800aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	61fb      	str	r3, [r7, #28]
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	61bb      	str	r3, [r7, #24]
 800abae:	e00b      	b.n	800abc8 <SEGGER_SYSVIEW_SendModule+0xb8>
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	1c59      	adds	r1, r3, #1
 800abb8:	61f9      	str	r1, [r7, #28]
 800abba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	701a      	strb	r2, [r3, #0]
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	09db      	lsrs	r3, r3, #7
 800abc6:	61bb      	str	r3, [r7, #24]
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	2b7f      	cmp	r3, #127	; 0x7f
 800abcc:	d8f0      	bhi.n	800abb0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	1c5a      	adds	r2, r3, #1
 800abd2:	61fa      	str	r2, [r7, #28]
 800abd4:	69ba      	ldr	r2, [r7, #24]
 800abd6:	b2d2      	uxtb	r2, r2
 800abd8:	701a      	strb	r2, [r3, #0]
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2280      	movs	r2, #128	; 0x80
 800abe4:	4619      	mov	r1, r3
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f7fe feca 	bl	8009980 <_EncodeStr>
 800abec:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800abee:	2216      	movs	r2, #22
 800abf0:	68f9      	ldr	r1, [r7, #12]
 800abf2:	6938      	ldr	r0, [r7, #16]
 800abf4:	f7ff f802 	bl	8009bfc <_SendPacket>
      RECORD_END();
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800abfe:	bf00      	nop
 800ac00:	3730      	adds	r7, #48	; 0x30
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	200054f4 	.word	0x200054f4
 800ac0c:	200054fc 	.word	0x200054fc

0800ac10 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800ac16:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00f      	beq.n	800ac3e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800ac1e:	4b0a      	ldr	r3, [pc, #40]	; (800ac48 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1f2      	bne.n	800ac24 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800ac3e:	bf00      	nop
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	200054f4 	.word	0x200054f4

0800ac4c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800ac52:	f3ef 8311 	mrs	r3, BASEPRI
 800ac56:	f04f 0120 	mov.w	r1, #32
 800ac5a:	f381 8811 	msr	BASEPRI, r1
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	4817      	ldr	r0, [pc, #92]	; (800acc0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800ac62:	f7fe feda 	bl	8009a1a <_PreparePacket>
 800ac66:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	4b14      	ldr	r3, [pc, #80]	; (800acc4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	613b      	str	r3, [r7, #16]
 800ac76:	e00b      	b.n	800ac90 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	1c59      	adds	r1, r3, #1
 800ac80:	6179      	str	r1, [r7, #20]
 800ac82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ac86:	b2d2      	uxtb	r2, r2
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	09db      	lsrs	r3, r3, #7
 800ac8e:	613b      	str	r3, [r7, #16]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	2b7f      	cmp	r3, #127	; 0x7f
 800ac94:	d8f0      	bhi.n	800ac78 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	617a      	str	r2, [r7, #20]
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	b2d2      	uxtb	r2, r2
 800aca0:	701a      	strb	r2, [r3, #0]
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800aca6:	221b      	movs	r2, #27
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	68b8      	ldr	r0, [r7, #8]
 800acac:	f7fe ffa6 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f383 8811 	msr	BASEPRI, r3
}
 800acb6:	bf00      	nop
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	200054fc 	.word	0x200054fc
 800acc4:	200054f8 	.word	0x200054f8

0800acc8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800acc8:	b580      	push	{r7, lr}
 800acca:	b08a      	sub	sp, #40	; 0x28
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800acd0:	f3ef 8311 	mrs	r3, BASEPRI
 800acd4:	f04f 0120 	mov.w	r1, #32
 800acd8:	f381 8811 	msr	BASEPRI, r1
 800acdc:	617b      	str	r3, [r7, #20]
 800acde:	4827      	ldr	r0, [pc, #156]	; (800ad7c <SEGGER_SYSVIEW_Warn+0xb4>)
 800ace0:	f7fe fe9b 	bl	8009a1a <_PreparePacket>
 800ace4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ace6:	2280      	movs	r2, #128	; 0x80
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	6938      	ldr	r0, [r7, #16]
 800acec:	f7fe fe48 	bl	8009980 <_EncodeStr>
 800acf0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	627b      	str	r3, [r7, #36]	; 0x24
 800acf6:	2301      	movs	r3, #1
 800acf8:	623b      	str	r3, [r7, #32]
 800acfa:	e00b      	b.n	800ad14 <SEGGER_SYSVIEW_Warn+0x4c>
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	1c59      	adds	r1, r3, #1
 800ad04:	6279      	str	r1, [r7, #36]	; 0x24
 800ad06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ad0a:	b2d2      	uxtb	r2, r2
 800ad0c:	701a      	strb	r2, [r3, #0]
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	09db      	lsrs	r3, r3, #7
 800ad12:	623b      	str	r3, [r7, #32]
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	2b7f      	cmp	r3, #127	; 0x7f
 800ad18:	d8f0      	bhi.n	800acfc <SEGGER_SYSVIEW_Warn+0x34>
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1c:	1c5a      	adds	r2, r3, #1
 800ad1e:	627a      	str	r2, [r7, #36]	; 0x24
 800ad20:	6a3a      	ldr	r2, [r7, #32]
 800ad22:	b2d2      	uxtb	r2, r2
 800ad24:	701a      	strb	r2, [r3, #0]
 800ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	61fb      	str	r3, [r7, #28]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	61bb      	str	r3, [r7, #24]
 800ad32:	e00b      	b.n	800ad4c <SEGGER_SYSVIEW_Warn+0x84>
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	1c59      	adds	r1, r3, #1
 800ad3c:	61f9      	str	r1, [r7, #28]
 800ad3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ad42:	b2d2      	uxtb	r2, r2
 800ad44:	701a      	strb	r2, [r3, #0]
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	09db      	lsrs	r3, r3, #7
 800ad4a:	61bb      	str	r3, [r7, #24]
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	2b7f      	cmp	r3, #127	; 0x7f
 800ad50:	d8f0      	bhi.n	800ad34 <SEGGER_SYSVIEW_Warn+0x6c>
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	61fa      	str	r2, [r7, #28]
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800ad62:	221a      	movs	r2, #26
 800ad64:	68f9      	ldr	r1, [r7, #12]
 800ad66:	6938      	ldr	r0, [r7, #16]
 800ad68:	f7fe ff48 	bl	8009bfc <_SendPacket>
  RECORD_END();
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f383 8811 	msr	BASEPRI, r3
}
 800ad72:	bf00      	nop
 800ad74:	3728      	adds	r7, #40	; 0x28
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	200054fc 	.word	0x200054fc

0800ad80 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	2000      	movs	r0, #0
 800ad94:	f7fe fcda 	bl	800974c <SEGGER_RTT_Write>
  return len;
 800ad98:	683b      	ldr	r3, [r7, #0]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
	...

0800ada4 <__errno>:
 800ada4:	4b01      	ldr	r3, [pc, #4]	; (800adac <__errno+0x8>)
 800ada6:	6818      	ldr	r0, [r3, #0]
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	20000014 	.word	0x20000014

0800adb0 <__libc_init_array>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	4d0d      	ldr	r5, [pc, #52]	; (800ade8 <__libc_init_array+0x38>)
 800adb4:	4c0d      	ldr	r4, [pc, #52]	; (800adec <__libc_init_array+0x3c>)
 800adb6:	1b64      	subs	r4, r4, r5
 800adb8:	10a4      	asrs	r4, r4, #2
 800adba:	2600      	movs	r6, #0
 800adbc:	42a6      	cmp	r6, r4
 800adbe:	d109      	bne.n	800add4 <__libc_init_array+0x24>
 800adc0:	4d0b      	ldr	r5, [pc, #44]	; (800adf0 <__libc_init_array+0x40>)
 800adc2:	4c0c      	ldr	r4, [pc, #48]	; (800adf4 <__libc_init_array+0x44>)
 800adc4:	f000 fcf8 	bl	800b7b8 <_init>
 800adc8:	1b64      	subs	r4, r4, r5
 800adca:	10a4      	asrs	r4, r4, #2
 800adcc:	2600      	movs	r6, #0
 800adce:	42a6      	cmp	r6, r4
 800add0:	d105      	bne.n	800adde <__libc_init_array+0x2e>
 800add2:	bd70      	pop	{r4, r5, r6, pc}
 800add4:	f855 3b04 	ldr.w	r3, [r5], #4
 800add8:	4798      	blx	r3
 800adda:	3601      	adds	r6, #1
 800addc:	e7ee      	b.n	800adbc <__libc_init_array+0xc>
 800adde:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade2:	4798      	blx	r3
 800ade4:	3601      	adds	r6, #1
 800ade6:	e7f2      	b.n	800adce <__libc_init_array+0x1e>
 800ade8:	0800be54 	.word	0x0800be54
 800adec:	0800be54 	.word	0x0800be54
 800adf0:	0800be54 	.word	0x0800be54
 800adf4:	0800be58 	.word	0x0800be58

0800adf8 <malloc>:
 800adf8:	4b02      	ldr	r3, [pc, #8]	; (800ae04 <malloc+0xc>)
 800adfa:	4601      	mov	r1, r0
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	f000 b877 	b.w	800aef0 <_malloc_r>
 800ae02:	bf00      	nop
 800ae04:	20000014 	.word	0x20000014

0800ae08 <memcmp>:
 800ae08:	b530      	push	{r4, r5, lr}
 800ae0a:	3901      	subs	r1, #1
 800ae0c:	2400      	movs	r4, #0
 800ae0e:	42a2      	cmp	r2, r4
 800ae10:	d101      	bne.n	800ae16 <memcmp+0xe>
 800ae12:	2000      	movs	r0, #0
 800ae14:	e005      	b.n	800ae22 <memcmp+0x1a>
 800ae16:	5d03      	ldrb	r3, [r0, r4]
 800ae18:	3401      	adds	r4, #1
 800ae1a:	5d0d      	ldrb	r5, [r1, r4]
 800ae1c:	42ab      	cmp	r3, r5
 800ae1e:	d0f6      	beq.n	800ae0e <memcmp+0x6>
 800ae20:	1b58      	subs	r0, r3, r5
 800ae22:	bd30      	pop	{r4, r5, pc}

0800ae24 <memcpy>:
 800ae24:	440a      	add	r2, r1
 800ae26:	4291      	cmp	r1, r2
 800ae28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae2c:	d100      	bne.n	800ae30 <memcpy+0xc>
 800ae2e:	4770      	bx	lr
 800ae30:	b510      	push	{r4, lr}
 800ae32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae3a:	4291      	cmp	r1, r2
 800ae3c:	d1f9      	bne.n	800ae32 <memcpy+0xe>
 800ae3e:	bd10      	pop	{r4, pc}

0800ae40 <memset>:
 800ae40:	4402      	add	r2, r0
 800ae42:	4603      	mov	r3, r0
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d100      	bne.n	800ae4a <memset+0xa>
 800ae48:	4770      	bx	lr
 800ae4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae4e:	e7f9      	b.n	800ae44 <memset+0x4>

0800ae50 <_free_r>:
 800ae50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae52:	2900      	cmp	r1, #0
 800ae54:	d048      	beq.n	800aee8 <_free_r+0x98>
 800ae56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae5a:	9001      	str	r0, [sp, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f1a1 0404 	sub.w	r4, r1, #4
 800ae62:	bfb8      	it	lt
 800ae64:	18e4      	addlt	r4, r4, r3
 800ae66:	f000 fc01 	bl	800b66c <__malloc_lock>
 800ae6a:	4a20      	ldr	r2, [pc, #128]	; (800aeec <_free_r+0x9c>)
 800ae6c:	9801      	ldr	r0, [sp, #4]
 800ae6e:	6813      	ldr	r3, [r2, #0]
 800ae70:	4615      	mov	r5, r2
 800ae72:	b933      	cbnz	r3, 800ae82 <_free_r+0x32>
 800ae74:	6063      	str	r3, [r4, #4]
 800ae76:	6014      	str	r4, [r2, #0]
 800ae78:	b003      	add	sp, #12
 800ae7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae7e:	f000 bbfb 	b.w	800b678 <__malloc_unlock>
 800ae82:	42a3      	cmp	r3, r4
 800ae84:	d90b      	bls.n	800ae9e <_free_r+0x4e>
 800ae86:	6821      	ldr	r1, [r4, #0]
 800ae88:	1862      	adds	r2, r4, r1
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	bf04      	itt	eq
 800ae8e:	681a      	ldreq	r2, [r3, #0]
 800ae90:	685b      	ldreq	r3, [r3, #4]
 800ae92:	6063      	str	r3, [r4, #4]
 800ae94:	bf04      	itt	eq
 800ae96:	1852      	addeq	r2, r2, r1
 800ae98:	6022      	streq	r2, [r4, #0]
 800ae9a:	602c      	str	r4, [r5, #0]
 800ae9c:	e7ec      	b.n	800ae78 <_free_r+0x28>
 800ae9e:	461a      	mov	r2, r3
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	b10b      	cbz	r3, 800aea8 <_free_r+0x58>
 800aea4:	42a3      	cmp	r3, r4
 800aea6:	d9fa      	bls.n	800ae9e <_free_r+0x4e>
 800aea8:	6811      	ldr	r1, [r2, #0]
 800aeaa:	1855      	adds	r5, r2, r1
 800aeac:	42a5      	cmp	r5, r4
 800aeae:	d10b      	bne.n	800aec8 <_free_r+0x78>
 800aeb0:	6824      	ldr	r4, [r4, #0]
 800aeb2:	4421      	add	r1, r4
 800aeb4:	1854      	adds	r4, r2, r1
 800aeb6:	42a3      	cmp	r3, r4
 800aeb8:	6011      	str	r1, [r2, #0]
 800aeba:	d1dd      	bne.n	800ae78 <_free_r+0x28>
 800aebc:	681c      	ldr	r4, [r3, #0]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	6053      	str	r3, [r2, #4]
 800aec2:	4421      	add	r1, r4
 800aec4:	6011      	str	r1, [r2, #0]
 800aec6:	e7d7      	b.n	800ae78 <_free_r+0x28>
 800aec8:	d902      	bls.n	800aed0 <_free_r+0x80>
 800aeca:	230c      	movs	r3, #12
 800aecc:	6003      	str	r3, [r0, #0]
 800aece:	e7d3      	b.n	800ae78 <_free_r+0x28>
 800aed0:	6825      	ldr	r5, [r4, #0]
 800aed2:	1961      	adds	r1, r4, r5
 800aed4:	428b      	cmp	r3, r1
 800aed6:	bf04      	itt	eq
 800aed8:	6819      	ldreq	r1, [r3, #0]
 800aeda:	685b      	ldreq	r3, [r3, #4]
 800aedc:	6063      	str	r3, [r4, #4]
 800aede:	bf04      	itt	eq
 800aee0:	1949      	addeq	r1, r1, r5
 800aee2:	6021      	streq	r1, [r4, #0]
 800aee4:	6054      	str	r4, [r2, #4]
 800aee6:	e7c7      	b.n	800ae78 <_free_r+0x28>
 800aee8:	b003      	add	sp, #12
 800aeea:	bd30      	pop	{r4, r5, pc}
 800aeec:	200055e0 	.word	0x200055e0

0800aef0 <_malloc_r>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	1ccd      	adds	r5, r1, #3
 800aef4:	f025 0503 	bic.w	r5, r5, #3
 800aef8:	3508      	adds	r5, #8
 800aefa:	2d0c      	cmp	r5, #12
 800aefc:	bf38      	it	cc
 800aefe:	250c      	movcc	r5, #12
 800af00:	2d00      	cmp	r5, #0
 800af02:	4606      	mov	r6, r0
 800af04:	db01      	blt.n	800af0a <_malloc_r+0x1a>
 800af06:	42a9      	cmp	r1, r5
 800af08:	d903      	bls.n	800af12 <_malloc_r+0x22>
 800af0a:	230c      	movs	r3, #12
 800af0c:	6033      	str	r3, [r6, #0]
 800af0e:	2000      	movs	r0, #0
 800af10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af12:	f000 fbab 	bl	800b66c <__malloc_lock>
 800af16:	4921      	ldr	r1, [pc, #132]	; (800af9c <_malloc_r+0xac>)
 800af18:	680a      	ldr	r2, [r1, #0]
 800af1a:	4614      	mov	r4, r2
 800af1c:	b99c      	cbnz	r4, 800af46 <_malloc_r+0x56>
 800af1e:	4f20      	ldr	r7, [pc, #128]	; (800afa0 <_malloc_r+0xb0>)
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	b923      	cbnz	r3, 800af2e <_malloc_r+0x3e>
 800af24:	4621      	mov	r1, r4
 800af26:	4630      	mov	r0, r6
 800af28:	f000 f8b2 	bl	800b090 <_sbrk_r>
 800af2c:	6038      	str	r0, [r7, #0]
 800af2e:	4629      	mov	r1, r5
 800af30:	4630      	mov	r0, r6
 800af32:	f000 f8ad 	bl	800b090 <_sbrk_r>
 800af36:	1c43      	adds	r3, r0, #1
 800af38:	d123      	bne.n	800af82 <_malloc_r+0x92>
 800af3a:	230c      	movs	r3, #12
 800af3c:	6033      	str	r3, [r6, #0]
 800af3e:	4630      	mov	r0, r6
 800af40:	f000 fb9a 	bl	800b678 <__malloc_unlock>
 800af44:	e7e3      	b.n	800af0e <_malloc_r+0x1e>
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	1b5b      	subs	r3, r3, r5
 800af4a:	d417      	bmi.n	800af7c <_malloc_r+0x8c>
 800af4c:	2b0b      	cmp	r3, #11
 800af4e:	d903      	bls.n	800af58 <_malloc_r+0x68>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	441c      	add	r4, r3
 800af54:	6025      	str	r5, [r4, #0]
 800af56:	e004      	b.n	800af62 <_malloc_r+0x72>
 800af58:	6863      	ldr	r3, [r4, #4]
 800af5a:	42a2      	cmp	r2, r4
 800af5c:	bf0c      	ite	eq
 800af5e:	600b      	streq	r3, [r1, #0]
 800af60:	6053      	strne	r3, [r2, #4]
 800af62:	4630      	mov	r0, r6
 800af64:	f000 fb88 	bl	800b678 <__malloc_unlock>
 800af68:	f104 000b 	add.w	r0, r4, #11
 800af6c:	1d23      	adds	r3, r4, #4
 800af6e:	f020 0007 	bic.w	r0, r0, #7
 800af72:	1ac2      	subs	r2, r0, r3
 800af74:	d0cc      	beq.n	800af10 <_malloc_r+0x20>
 800af76:	1a1b      	subs	r3, r3, r0
 800af78:	50a3      	str	r3, [r4, r2]
 800af7a:	e7c9      	b.n	800af10 <_malloc_r+0x20>
 800af7c:	4622      	mov	r2, r4
 800af7e:	6864      	ldr	r4, [r4, #4]
 800af80:	e7cc      	b.n	800af1c <_malloc_r+0x2c>
 800af82:	1cc4      	adds	r4, r0, #3
 800af84:	f024 0403 	bic.w	r4, r4, #3
 800af88:	42a0      	cmp	r0, r4
 800af8a:	d0e3      	beq.n	800af54 <_malloc_r+0x64>
 800af8c:	1a21      	subs	r1, r4, r0
 800af8e:	4630      	mov	r0, r6
 800af90:	f000 f87e 	bl	800b090 <_sbrk_r>
 800af94:	3001      	adds	r0, #1
 800af96:	d1dd      	bne.n	800af54 <_malloc_r+0x64>
 800af98:	e7cf      	b.n	800af3a <_malloc_r+0x4a>
 800af9a:	bf00      	nop
 800af9c:	200055e0 	.word	0x200055e0
 800afa0:	200055e4 	.word	0x200055e4

0800afa4 <_puts_r>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	460e      	mov	r6, r1
 800afa8:	4605      	mov	r5, r0
 800afaa:	b118      	cbz	r0, 800afb4 <_puts_r+0x10>
 800afac:	6983      	ldr	r3, [r0, #24]
 800afae:	b90b      	cbnz	r3, 800afb4 <_puts_r+0x10>
 800afb0:	f000 fa58 	bl	800b464 <__sinit>
 800afb4:	69ab      	ldr	r3, [r5, #24]
 800afb6:	68ac      	ldr	r4, [r5, #8]
 800afb8:	b913      	cbnz	r3, 800afc0 <_puts_r+0x1c>
 800afba:	4628      	mov	r0, r5
 800afbc:	f000 fa52 	bl	800b464 <__sinit>
 800afc0:	4b2c      	ldr	r3, [pc, #176]	; (800b074 <_puts_r+0xd0>)
 800afc2:	429c      	cmp	r4, r3
 800afc4:	d120      	bne.n	800b008 <_puts_r+0x64>
 800afc6:	686c      	ldr	r4, [r5, #4]
 800afc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afca:	07db      	lsls	r3, r3, #31
 800afcc:	d405      	bmi.n	800afda <_puts_r+0x36>
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	0598      	lsls	r0, r3, #22
 800afd2:	d402      	bmi.n	800afda <_puts_r+0x36>
 800afd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afd6:	f000 fae3 	bl	800b5a0 <__retarget_lock_acquire_recursive>
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	0719      	lsls	r1, r3, #28
 800afde:	d51d      	bpl.n	800b01c <_puts_r+0x78>
 800afe0:	6923      	ldr	r3, [r4, #16]
 800afe2:	b1db      	cbz	r3, 800b01c <_puts_r+0x78>
 800afe4:	3e01      	subs	r6, #1
 800afe6:	68a3      	ldr	r3, [r4, #8]
 800afe8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800afec:	3b01      	subs	r3, #1
 800afee:	60a3      	str	r3, [r4, #8]
 800aff0:	bb39      	cbnz	r1, 800b042 <_puts_r+0x9e>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	da38      	bge.n	800b068 <_puts_r+0xc4>
 800aff6:	4622      	mov	r2, r4
 800aff8:	210a      	movs	r1, #10
 800affa:	4628      	mov	r0, r5
 800affc:	f000 f858 	bl	800b0b0 <__swbuf_r>
 800b000:	3001      	adds	r0, #1
 800b002:	d011      	beq.n	800b028 <_puts_r+0x84>
 800b004:	250a      	movs	r5, #10
 800b006:	e011      	b.n	800b02c <_puts_r+0x88>
 800b008:	4b1b      	ldr	r3, [pc, #108]	; (800b078 <_puts_r+0xd4>)
 800b00a:	429c      	cmp	r4, r3
 800b00c:	d101      	bne.n	800b012 <_puts_r+0x6e>
 800b00e:	68ac      	ldr	r4, [r5, #8]
 800b010:	e7da      	b.n	800afc8 <_puts_r+0x24>
 800b012:	4b1a      	ldr	r3, [pc, #104]	; (800b07c <_puts_r+0xd8>)
 800b014:	429c      	cmp	r4, r3
 800b016:	bf08      	it	eq
 800b018:	68ec      	ldreq	r4, [r5, #12]
 800b01a:	e7d5      	b.n	800afc8 <_puts_r+0x24>
 800b01c:	4621      	mov	r1, r4
 800b01e:	4628      	mov	r0, r5
 800b020:	f000 f898 	bl	800b154 <__swsetup_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	d0dd      	beq.n	800afe4 <_puts_r+0x40>
 800b028:	f04f 35ff 	mov.w	r5, #4294967295
 800b02c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b02e:	07da      	lsls	r2, r3, #31
 800b030:	d405      	bmi.n	800b03e <_puts_r+0x9a>
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	059b      	lsls	r3, r3, #22
 800b036:	d402      	bmi.n	800b03e <_puts_r+0x9a>
 800b038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b03a:	f000 fab2 	bl	800b5a2 <__retarget_lock_release_recursive>
 800b03e:	4628      	mov	r0, r5
 800b040:	bd70      	pop	{r4, r5, r6, pc}
 800b042:	2b00      	cmp	r3, #0
 800b044:	da04      	bge.n	800b050 <_puts_r+0xac>
 800b046:	69a2      	ldr	r2, [r4, #24]
 800b048:	429a      	cmp	r2, r3
 800b04a:	dc06      	bgt.n	800b05a <_puts_r+0xb6>
 800b04c:	290a      	cmp	r1, #10
 800b04e:	d004      	beq.n	800b05a <_puts_r+0xb6>
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	6022      	str	r2, [r4, #0]
 800b056:	7019      	strb	r1, [r3, #0]
 800b058:	e7c5      	b.n	800afe6 <_puts_r+0x42>
 800b05a:	4622      	mov	r2, r4
 800b05c:	4628      	mov	r0, r5
 800b05e:	f000 f827 	bl	800b0b0 <__swbuf_r>
 800b062:	3001      	adds	r0, #1
 800b064:	d1bf      	bne.n	800afe6 <_puts_r+0x42>
 800b066:	e7df      	b.n	800b028 <_puts_r+0x84>
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	250a      	movs	r5, #10
 800b06c:	1c5a      	adds	r2, r3, #1
 800b06e:	6022      	str	r2, [r4, #0]
 800b070:	701d      	strb	r5, [r3, #0]
 800b072:	e7db      	b.n	800b02c <_puts_r+0x88>
 800b074:	0800be0c 	.word	0x0800be0c
 800b078:	0800be2c 	.word	0x0800be2c
 800b07c:	0800bdec 	.word	0x0800bdec

0800b080 <puts>:
 800b080:	4b02      	ldr	r3, [pc, #8]	; (800b08c <puts+0xc>)
 800b082:	4601      	mov	r1, r0
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	f7ff bf8d 	b.w	800afa4 <_puts_r>
 800b08a:	bf00      	nop
 800b08c:	20000014 	.word	0x20000014

0800b090 <_sbrk_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d06      	ldr	r5, [pc, #24]	; (800b0ac <_sbrk_r+0x1c>)
 800b094:	2300      	movs	r3, #0
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	602b      	str	r3, [r5, #0]
 800b09c:	f7f7 fcce 	bl	8002a3c <_sbrk>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	d102      	bne.n	800b0aa <_sbrk_r+0x1a>
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	b103      	cbz	r3, 800b0aa <_sbrk_r+0x1a>
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}
 800b0ac:	20005994 	.word	0x20005994

0800b0b0 <__swbuf_r>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	460e      	mov	r6, r1
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	b118      	cbz	r0, 800b0c2 <__swbuf_r+0x12>
 800b0ba:	6983      	ldr	r3, [r0, #24]
 800b0bc:	b90b      	cbnz	r3, 800b0c2 <__swbuf_r+0x12>
 800b0be:	f000 f9d1 	bl	800b464 <__sinit>
 800b0c2:	4b21      	ldr	r3, [pc, #132]	; (800b148 <__swbuf_r+0x98>)
 800b0c4:	429c      	cmp	r4, r3
 800b0c6:	d12b      	bne.n	800b120 <__swbuf_r+0x70>
 800b0c8:	686c      	ldr	r4, [r5, #4]
 800b0ca:	69a3      	ldr	r3, [r4, #24]
 800b0cc:	60a3      	str	r3, [r4, #8]
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	071a      	lsls	r2, r3, #28
 800b0d2:	d52f      	bpl.n	800b134 <__swbuf_r+0x84>
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	b36b      	cbz	r3, 800b134 <__swbuf_r+0x84>
 800b0d8:	6923      	ldr	r3, [r4, #16]
 800b0da:	6820      	ldr	r0, [r4, #0]
 800b0dc:	1ac0      	subs	r0, r0, r3
 800b0de:	6963      	ldr	r3, [r4, #20]
 800b0e0:	b2f6      	uxtb	r6, r6
 800b0e2:	4283      	cmp	r3, r0
 800b0e4:	4637      	mov	r7, r6
 800b0e6:	dc04      	bgt.n	800b0f2 <__swbuf_r+0x42>
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f000 f926 	bl	800b33c <_fflush_r>
 800b0f0:	bb30      	cbnz	r0, 800b140 <__swbuf_r+0x90>
 800b0f2:	68a3      	ldr	r3, [r4, #8]
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	60a3      	str	r3, [r4, #8]
 800b0f8:	6823      	ldr	r3, [r4, #0]
 800b0fa:	1c5a      	adds	r2, r3, #1
 800b0fc:	6022      	str	r2, [r4, #0]
 800b0fe:	701e      	strb	r6, [r3, #0]
 800b100:	6963      	ldr	r3, [r4, #20]
 800b102:	3001      	adds	r0, #1
 800b104:	4283      	cmp	r3, r0
 800b106:	d004      	beq.n	800b112 <__swbuf_r+0x62>
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	07db      	lsls	r3, r3, #31
 800b10c:	d506      	bpl.n	800b11c <__swbuf_r+0x6c>
 800b10e:	2e0a      	cmp	r6, #10
 800b110:	d104      	bne.n	800b11c <__swbuf_r+0x6c>
 800b112:	4621      	mov	r1, r4
 800b114:	4628      	mov	r0, r5
 800b116:	f000 f911 	bl	800b33c <_fflush_r>
 800b11a:	b988      	cbnz	r0, 800b140 <__swbuf_r+0x90>
 800b11c:	4638      	mov	r0, r7
 800b11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b120:	4b0a      	ldr	r3, [pc, #40]	; (800b14c <__swbuf_r+0x9c>)
 800b122:	429c      	cmp	r4, r3
 800b124:	d101      	bne.n	800b12a <__swbuf_r+0x7a>
 800b126:	68ac      	ldr	r4, [r5, #8]
 800b128:	e7cf      	b.n	800b0ca <__swbuf_r+0x1a>
 800b12a:	4b09      	ldr	r3, [pc, #36]	; (800b150 <__swbuf_r+0xa0>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	bf08      	it	eq
 800b130:	68ec      	ldreq	r4, [r5, #12]
 800b132:	e7ca      	b.n	800b0ca <__swbuf_r+0x1a>
 800b134:	4621      	mov	r1, r4
 800b136:	4628      	mov	r0, r5
 800b138:	f000 f80c 	bl	800b154 <__swsetup_r>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d0cb      	beq.n	800b0d8 <__swbuf_r+0x28>
 800b140:	f04f 37ff 	mov.w	r7, #4294967295
 800b144:	e7ea      	b.n	800b11c <__swbuf_r+0x6c>
 800b146:	bf00      	nop
 800b148:	0800be0c 	.word	0x0800be0c
 800b14c:	0800be2c 	.word	0x0800be2c
 800b150:	0800bdec 	.word	0x0800bdec

0800b154 <__swsetup_r>:
 800b154:	4b32      	ldr	r3, [pc, #200]	; (800b220 <__swsetup_r+0xcc>)
 800b156:	b570      	push	{r4, r5, r6, lr}
 800b158:	681d      	ldr	r5, [r3, #0]
 800b15a:	4606      	mov	r6, r0
 800b15c:	460c      	mov	r4, r1
 800b15e:	b125      	cbz	r5, 800b16a <__swsetup_r+0x16>
 800b160:	69ab      	ldr	r3, [r5, #24]
 800b162:	b913      	cbnz	r3, 800b16a <__swsetup_r+0x16>
 800b164:	4628      	mov	r0, r5
 800b166:	f000 f97d 	bl	800b464 <__sinit>
 800b16a:	4b2e      	ldr	r3, [pc, #184]	; (800b224 <__swsetup_r+0xd0>)
 800b16c:	429c      	cmp	r4, r3
 800b16e:	d10f      	bne.n	800b190 <__swsetup_r+0x3c>
 800b170:	686c      	ldr	r4, [r5, #4]
 800b172:	89a3      	ldrh	r3, [r4, #12]
 800b174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b178:	0719      	lsls	r1, r3, #28
 800b17a:	d42c      	bmi.n	800b1d6 <__swsetup_r+0x82>
 800b17c:	06dd      	lsls	r5, r3, #27
 800b17e:	d411      	bmi.n	800b1a4 <__swsetup_r+0x50>
 800b180:	2309      	movs	r3, #9
 800b182:	6033      	str	r3, [r6, #0]
 800b184:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b188:	81a3      	strh	r3, [r4, #12]
 800b18a:	f04f 30ff 	mov.w	r0, #4294967295
 800b18e:	e03e      	b.n	800b20e <__swsetup_r+0xba>
 800b190:	4b25      	ldr	r3, [pc, #148]	; (800b228 <__swsetup_r+0xd4>)
 800b192:	429c      	cmp	r4, r3
 800b194:	d101      	bne.n	800b19a <__swsetup_r+0x46>
 800b196:	68ac      	ldr	r4, [r5, #8]
 800b198:	e7eb      	b.n	800b172 <__swsetup_r+0x1e>
 800b19a:	4b24      	ldr	r3, [pc, #144]	; (800b22c <__swsetup_r+0xd8>)
 800b19c:	429c      	cmp	r4, r3
 800b19e:	bf08      	it	eq
 800b1a0:	68ec      	ldreq	r4, [r5, #12]
 800b1a2:	e7e6      	b.n	800b172 <__swsetup_r+0x1e>
 800b1a4:	0758      	lsls	r0, r3, #29
 800b1a6:	d512      	bpl.n	800b1ce <__swsetup_r+0x7a>
 800b1a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1aa:	b141      	cbz	r1, 800b1be <__swsetup_r+0x6a>
 800b1ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	d002      	beq.n	800b1ba <__swsetup_r+0x66>
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f7ff fe4b 	bl	800ae50 <_free_r>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	6363      	str	r3, [r4, #52]	; 0x34
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	6063      	str	r3, [r4, #4]
 800b1ca:	6923      	ldr	r3, [r4, #16]
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	f043 0308 	orr.w	r3, r3, #8
 800b1d4:	81a3      	strh	r3, [r4, #12]
 800b1d6:	6923      	ldr	r3, [r4, #16]
 800b1d8:	b94b      	cbnz	r3, 800b1ee <__swsetup_r+0x9a>
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1e4:	d003      	beq.n	800b1ee <__swsetup_r+0x9a>
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 f9ff 	bl	800b5ec <__smakebuf_r>
 800b1ee:	89a0      	ldrh	r0, [r4, #12]
 800b1f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1f4:	f010 0301 	ands.w	r3, r0, #1
 800b1f8:	d00a      	beq.n	800b210 <__swsetup_r+0xbc>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60a3      	str	r3, [r4, #8]
 800b1fe:	6963      	ldr	r3, [r4, #20]
 800b200:	425b      	negs	r3, r3
 800b202:	61a3      	str	r3, [r4, #24]
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	b943      	cbnz	r3, 800b21a <__swsetup_r+0xc6>
 800b208:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b20c:	d1ba      	bne.n	800b184 <__swsetup_r+0x30>
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	0781      	lsls	r1, r0, #30
 800b212:	bf58      	it	pl
 800b214:	6963      	ldrpl	r3, [r4, #20]
 800b216:	60a3      	str	r3, [r4, #8]
 800b218:	e7f4      	b.n	800b204 <__swsetup_r+0xb0>
 800b21a:	2000      	movs	r0, #0
 800b21c:	e7f7      	b.n	800b20e <__swsetup_r+0xba>
 800b21e:	bf00      	nop
 800b220:	20000014 	.word	0x20000014
 800b224:	0800be0c 	.word	0x0800be0c
 800b228:	0800be2c 	.word	0x0800be2c
 800b22c:	0800bdec 	.word	0x0800bdec

0800b230 <__sflush_r>:
 800b230:	898a      	ldrh	r2, [r1, #12]
 800b232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b236:	4605      	mov	r5, r0
 800b238:	0710      	lsls	r0, r2, #28
 800b23a:	460c      	mov	r4, r1
 800b23c:	d458      	bmi.n	800b2f0 <__sflush_r+0xc0>
 800b23e:	684b      	ldr	r3, [r1, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	dc05      	bgt.n	800b250 <__sflush_r+0x20>
 800b244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b246:	2b00      	cmp	r3, #0
 800b248:	dc02      	bgt.n	800b250 <__sflush_r+0x20>
 800b24a:	2000      	movs	r0, #0
 800b24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b252:	2e00      	cmp	r6, #0
 800b254:	d0f9      	beq.n	800b24a <__sflush_r+0x1a>
 800b256:	2300      	movs	r3, #0
 800b258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b25c:	682f      	ldr	r7, [r5, #0]
 800b25e:	602b      	str	r3, [r5, #0]
 800b260:	d032      	beq.n	800b2c8 <__sflush_r+0x98>
 800b262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	075a      	lsls	r2, r3, #29
 800b268:	d505      	bpl.n	800b276 <__sflush_r+0x46>
 800b26a:	6863      	ldr	r3, [r4, #4]
 800b26c:	1ac0      	subs	r0, r0, r3
 800b26e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b270:	b10b      	cbz	r3, 800b276 <__sflush_r+0x46>
 800b272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b274:	1ac0      	subs	r0, r0, r3
 800b276:	2300      	movs	r3, #0
 800b278:	4602      	mov	r2, r0
 800b27a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b27c:	6a21      	ldr	r1, [r4, #32]
 800b27e:	4628      	mov	r0, r5
 800b280:	47b0      	blx	r6
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	d106      	bne.n	800b296 <__sflush_r+0x66>
 800b288:	6829      	ldr	r1, [r5, #0]
 800b28a:	291d      	cmp	r1, #29
 800b28c:	d82c      	bhi.n	800b2e8 <__sflush_r+0xb8>
 800b28e:	4a2a      	ldr	r2, [pc, #168]	; (800b338 <__sflush_r+0x108>)
 800b290:	40ca      	lsrs	r2, r1
 800b292:	07d6      	lsls	r6, r2, #31
 800b294:	d528      	bpl.n	800b2e8 <__sflush_r+0xb8>
 800b296:	2200      	movs	r2, #0
 800b298:	6062      	str	r2, [r4, #4]
 800b29a:	04d9      	lsls	r1, r3, #19
 800b29c:	6922      	ldr	r2, [r4, #16]
 800b29e:	6022      	str	r2, [r4, #0]
 800b2a0:	d504      	bpl.n	800b2ac <__sflush_r+0x7c>
 800b2a2:	1c42      	adds	r2, r0, #1
 800b2a4:	d101      	bne.n	800b2aa <__sflush_r+0x7a>
 800b2a6:	682b      	ldr	r3, [r5, #0]
 800b2a8:	b903      	cbnz	r3, 800b2ac <__sflush_r+0x7c>
 800b2aa:	6560      	str	r0, [r4, #84]	; 0x54
 800b2ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2ae:	602f      	str	r7, [r5, #0]
 800b2b0:	2900      	cmp	r1, #0
 800b2b2:	d0ca      	beq.n	800b24a <__sflush_r+0x1a>
 800b2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2b8:	4299      	cmp	r1, r3
 800b2ba:	d002      	beq.n	800b2c2 <__sflush_r+0x92>
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f7ff fdc7 	bl	800ae50 <_free_r>
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	6360      	str	r0, [r4, #52]	; 0x34
 800b2c6:	e7c1      	b.n	800b24c <__sflush_r+0x1c>
 800b2c8:	6a21      	ldr	r1, [r4, #32]
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	47b0      	blx	r6
 800b2d0:	1c41      	adds	r1, r0, #1
 800b2d2:	d1c7      	bne.n	800b264 <__sflush_r+0x34>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d0c4      	beq.n	800b264 <__sflush_r+0x34>
 800b2da:	2b1d      	cmp	r3, #29
 800b2dc:	d001      	beq.n	800b2e2 <__sflush_r+0xb2>
 800b2de:	2b16      	cmp	r3, #22
 800b2e0:	d101      	bne.n	800b2e6 <__sflush_r+0xb6>
 800b2e2:	602f      	str	r7, [r5, #0]
 800b2e4:	e7b1      	b.n	800b24a <__sflush_r+0x1a>
 800b2e6:	89a3      	ldrh	r3, [r4, #12]
 800b2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ec:	81a3      	strh	r3, [r4, #12]
 800b2ee:	e7ad      	b.n	800b24c <__sflush_r+0x1c>
 800b2f0:	690f      	ldr	r7, [r1, #16]
 800b2f2:	2f00      	cmp	r7, #0
 800b2f4:	d0a9      	beq.n	800b24a <__sflush_r+0x1a>
 800b2f6:	0793      	lsls	r3, r2, #30
 800b2f8:	680e      	ldr	r6, [r1, #0]
 800b2fa:	bf08      	it	eq
 800b2fc:	694b      	ldreq	r3, [r1, #20]
 800b2fe:	600f      	str	r7, [r1, #0]
 800b300:	bf18      	it	ne
 800b302:	2300      	movne	r3, #0
 800b304:	eba6 0807 	sub.w	r8, r6, r7
 800b308:	608b      	str	r3, [r1, #8]
 800b30a:	f1b8 0f00 	cmp.w	r8, #0
 800b30e:	dd9c      	ble.n	800b24a <__sflush_r+0x1a>
 800b310:	6a21      	ldr	r1, [r4, #32]
 800b312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b314:	4643      	mov	r3, r8
 800b316:	463a      	mov	r2, r7
 800b318:	4628      	mov	r0, r5
 800b31a:	47b0      	blx	r6
 800b31c:	2800      	cmp	r0, #0
 800b31e:	dc06      	bgt.n	800b32e <__sflush_r+0xfe>
 800b320:	89a3      	ldrh	r3, [r4, #12]
 800b322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b326:	81a3      	strh	r3, [r4, #12]
 800b328:	f04f 30ff 	mov.w	r0, #4294967295
 800b32c:	e78e      	b.n	800b24c <__sflush_r+0x1c>
 800b32e:	4407      	add	r7, r0
 800b330:	eba8 0800 	sub.w	r8, r8, r0
 800b334:	e7e9      	b.n	800b30a <__sflush_r+0xda>
 800b336:	bf00      	nop
 800b338:	20400001 	.word	0x20400001

0800b33c <_fflush_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	690b      	ldr	r3, [r1, #16]
 800b340:	4605      	mov	r5, r0
 800b342:	460c      	mov	r4, r1
 800b344:	b913      	cbnz	r3, 800b34c <_fflush_r+0x10>
 800b346:	2500      	movs	r5, #0
 800b348:	4628      	mov	r0, r5
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	b118      	cbz	r0, 800b356 <_fflush_r+0x1a>
 800b34e:	6983      	ldr	r3, [r0, #24]
 800b350:	b90b      	cbnz	r3, 800b356 <_fflush_r+0x1a>
 800b352:	f000 f887 	bl	800b464 <__sinit>
 800b356:	4b14      	ldr	r3, [pc, #80]	; (800b3a8 <_fflush_r+0x6c>)
 800b358:	429c      	cmp	r4, r3
 800b35a:	d11b      	bne.n	800b394 <_fflush_r+0x58>
 800b35c:	686c      	ldr	r4, [r5, #4]
 800b35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0ef      	beq.n	800b346 <_fflush_r+0xa>
 800b366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b368:	07d0      	lsls	r0, r2, #31
 800b36a:	d404      	bmi.n	800b376 <_fflush_r+0x3a>
 800b36c:	0599      	lsls	r1, r3, #22
 800b36e:	d402      	bmi.n	800b376 <_fflush_r+0x3a>
 800b370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b372:	f000 f915 	bl	800b5a0 <__retarget_lock_acquire_recursive>
 800b376:	4628      	mov	r0, r5
 800b378:	4621      	mov	r1, r4
 800b37a:	f7ff ff59 	bl	800b230 <__sflush_r>
 800b37e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b380:	07da      	lsls	r2, r3, #31
 800b382:	4605      	mov	r5, r0
 800b384:	d4e0      	bmi.n	800b348 <_fflush_r+0xc>
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	059b      	lsls	r3, r3, #22
 800b38a:	d4dd      	bmi.n	800b348 <_fflush_r+0xc>
 800b38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b38e:	f000 f908 	bl	800b5a2 <__retarget_lock_release_recursive>
 800b392:	e7d9      	b.n	800b348 <_fflush_r+0xc>
 800b394:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <_fflush_r+0x70>)
 800b396:	429c      	cmp	r4, r3
 800b398:	d101      	bne.n	800b39e <_fflush_r+0x62>
 800b39a:	68ac      	ldr	r4, [r5, #8]
 800b39c:	e7df      	b.n	800b35e <_fflush_r+0x22>
 800b39e:	4b04      	ldr	r3, [pc, #16]	; (800b3b0 <_fflush_r+0x74>)
 800b3a0:	429c      	cmp	r4, r3
 800b3a2:	bf08      	it	eq
 800b3a4:	68ec      	ldreq	r4, [r5, #12]
 800b3a6:	e7da      	b.n	800b35e <_fflush_r+0x22>
 800b3a8:	0800be0c 	.word	0x0800be0c
 800b3ac:	0800be2c 	.word	0x0800be2c
 800b3b0:	0800bdec 	.word	0x0800bdec

0800b3b4 <std>:
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	b510      	push	{r4, lr}
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	e9c0 3300 	strd	r3, r3, [r0]
 800b3be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3c2:	6083      	str	r3, [r0, #8]
 800b3c4:	8181      	strh	r1, [r0, #12]
 800b3c6:	6643      	str	r3, [r0, #100]	; 0x64
 800b3c8:	81c2      	strh	r2, [r0, #14]
 800b3ca:	6183      	str	r3, [r0, #24]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	2208      	movs	r2, #8
 800b3d0:	305c      	adds	r0, #92	; 0x5c
 800b3d2:	f7ff fd35 	bl	800ae40 <memset>
 800b3d6:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <std+0x38>)
 800b3d8:	6263      	str	r3, [r4, #36]	; 0x24
 800b3da:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <std+0x3c>)
 800b3dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3de:	4b05      	ldr	r3, [pc, #20]	; (800b3f4 <std+0x40>)
 800b3e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3e2:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <std+0x44>)
 800b3e4:	6224      	str	r4, [r4, #32]
 800b3e6:	6323      	str	r3, [r4, #48]	; 0x30
 800b3e8:	bd10      	pop	{r4, pc}
 800b3ea:	bf00      	nop
 800b3ec:	0800b685 	.word	0x0800b685
 800b3f0:	0800b6a7 	.word	0x0800b6a7
 800b3f4:	0800b6df 	.word	0x0800b6df
 800b3f8:	0800b703 	.word	0x0800b703

0800b3fc <_cleanup_r>:
 800b3fc:	4901      	ldr	r1, [pc, #4]	; (800b404 <_cleanup_r+0x8>)
 800b3fe:	f000 b8af 	b.w	800b560 <_fwalk_reent>
 800b402:	bf00      	nop
 800b404:	0800b33d 	.word	0x0800b33d

0800b408 <__sfmoreglue>:
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	1e4a      	subs	r2, r1, #1
 800b40c:	2568      	movs	r5, #104	; 0x68
 800b40e:	4355      	muls	r5, r2
 800b410:	460e      	mov	r6, r1
 800b412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b416:	f7ff fd6b 	bl	800aef0 <_malloc_r>
 800b41a:	4604      	mov	r4, r0
 800b41c:	b140      	cbz	r0, 800b430 <__sfmoreglue+0x28>
 800b41e:	2100      	movs	r1, #0
 800b420:	e9c0 1600 	strd	r1, r6, [r0]
 800b424:	300c      	adds	r0, #12
 800b426:	60a0      	str	r0, [r4, #8]
 800b428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b42c:	f7ff fd08 	bl	800ae40 <memset>
 800b430:	4620      	mov	r0, r4
 800b432:	bd70      	pop	{r4, r5, r6, pc}

0800b434 <__sfp_lock_acquire>:
 800b434:	4801      	ldr	r0, [pc, #4]	; (800b43c <__sfp_lock_acquire+0x8>)
 800b436:	f000 b8b3 	b.w	800b5a0 <__retarget_lock_acquire_recursive>
 800b43a:	bf00      	nop
 800b43c:	20005990 	.word	0x20005990

0800b440 <__sfp_lock_release>:
 800b440:	4801      	ldr	r0, [pc, #4]	; (800b448 <__sfp_lock_release+0x8>)
 800b442:	f000 b8ae 	b.w	800b5a2 <__retarget_lock_release_recursive>
 800b446:	bf00      	nop
 800b448:	20005990 	.word	0x20005990

0800b44c <__sinit_lock_acquire>:
 800b44c:	4801      	ldr	r0, [pc, #4]	; (800b454 <__sinit_lock_acquire+0x8>)
 800b44e:	f000 b8a7 	b.w	800b5a0 <__retarget_lock_acquire_recursive>
 800b452:	bf00      	nop
 800b454:	2000598b 	.word	0x2000598b

0800b458 <__sinit_lock_release>:
 800b458:	4801      	ldr	r0, [pc, #4]	; (800b460 <__sinit_lock_release+0x8>)
 800b45a:	f000 b8a2 	b.w	800b5a2 <__retarget_lock_release_recursive>
 800b45e:	bf00      	nop
 800b460:	2000598b 	.word	0x2000598b

0800b464 <__sinit>:
 800b464:	b510      	push	{r4, lr}
 800b466:	4604      	mov	r4, r0
 800b468:	f7ff fff0 	bl	800b44c <__sinit_lock_acquire>
 800b46c:	69a3      	ldr	r3, [r4, #24]
 800b46e:	b11b      	cbz	r3, 800b478 <__sinit+0x14>
 800b470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b474:	f7ff bff0 	b.w	800b458 <__sinit_lock_release>
 800b478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b47c:	6523      	str	r3, [r4, #80]	; 0x50
 800b47e:	4b13      	ldr	r3, [pc, #76]	; (800b4cc <__sinit+0x68>)
 800b480:	4a13      	ldr	r2, [pc, #76]	; (800b4d0 <__sinit+0x6c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	62a2      	str	r2, [r4, #40]	; 0x28
 800b486:	42a3      	cmp	r3, r4
 800b488:	bf04      	itt	eq
 800b48a:	2301      	moveq	r3, #1
 800b48c:	61a3      	streq	r3, [r4, #24]
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 f820 	bl	800b4d4 <__sfp>
 800b494:	6060      	str	r0, [r4, #4]
 800b496:	4620      	mov	r0, r4
 800b498:	f000 f81c 	bl	800b4d4 <__sfp>
 800b49c:	60a0      	str	r0, [r4, #8]
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 f818 	bl	800b4d4 <__sfp>
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	60e0      	str	r0, [r4, #12]
 800b4a8:	2104      	movs	r1, #4
 800b4aa:	6860      	ldr	r0, [r4, #4]
 800b4ac:	f7ff ff82 	bl	800b3b4 <std>
 800b4b0:	68a0      	ldr	r0, [r4, #8]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	2109      	movs	r1, #9
 800b4b6:	f7ff ff7d 	bl	800b3b4 <std>
 800b4ba:	68e0      	ldr	r0, [r4, #12]
 800b4bc:	2202      	movs	r2, #2
 800b4be:	2112      	movs	r1, #18
 800b4c0:	f7ff ff78 	bl	800b3b4 <std>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	61a3      	str	r3, [r4, #24]
 800b4c8:	e7d2      	b.n	800b470 <__sinit+0xc>
 800b4ca:	bf00      	nop
 800b4cc:	0800bde8 	.word	0x0800bde8
 800b4d0:	0800b3fd 	.word	0x0800b3fd

0800b4d4 <__sfp>:
 800b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d6:	4607      	mov	r7, r0
 800b4d8:	f7ff ffac 	bl	800b434 <__sfp_lock_acquire>
 800b4dc:	4b1e      	ldr	r3, [pc, #120]	; (800b558 <__sfp+0x84>)
 800b4de:	681e      	ldr	r6, [r3, #0]
 800b4e0:	69b3      	ldr	r3, [r6, #24]
 800b4e2:	b913      	cbnz	r3, 800b4ea <__sfp+0x16>
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f7ff ffbd 	bl	800b464 <__sinit>
 800b4ea:	3648      	adds	r6, #72	; 0x48
 800b4ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	d503      	bpl.n	800b4fc <__sfp+0x28>
 800b4f4:	6833      	ldr	r3, [r6, #0]
 800b4f6:	b30b      	cbz	r3, 800b53c <__sfp+0x68>
 800b4f8:	6836      	ldr	r6, [r6, #0]
 800b4fa:	e7f7      	b.n	800b4ec <__sfp+0x18>
 800b4fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b500:	b9d5      	cbnz	r5, 800b538 <__sfp+0x64>
 800b502:	4b16      	ldr	r3, [pc, #88]	; (800b55c <__sfp+0x88>)
 800b504:	60e3      	str	r3, [r4, #12]
 800b506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b50a:	6665      	str	r5, [r4, #100]	; 0x64
 800b50c:	f000 f847 	bl	800b59e <__retarget_lock_init_recursive>
 800b510:	f7ff ff96 	bl	800b440 <__sfp_lock_release>
 800b514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b51c:	6025      	str	r5, [r4, #0]
 800b51e:	61a5      	str	r5, [r4, #24]
 800b520:	2208      	movs	r2, #8
 800b522:	4629      	mov	r1, r5
 800b524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b528:	f7ff fc8a 	bl	800ae40 <memset>
 800b52c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b534:	4620      	mov	r0, r4
 800b536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b538:	3468      	adds	r4, #104	; 0x68
 800b53a:	e7d9      	b.n	800b4f0 <__sfp+0x1c>
 800b53c:	2104      	movs	r1, #4
 800b53e:	4638      	mov	r0, r7
 800b540:	f7ff ff62 	bl	800b408 <__sfmoreglue>
 800b544:	4604      	mov	r4, r0
 800b546:	6030      	str	r0, [r6, #0]
 800b548:	2800      	cmp	r0, #0
 800b54a:	d1d5      	bne.n	800b4f8 <__sfp+0x24>
 800b54c:	f7ff ff78 	bl	800b440 <__sfp_lock_release>
 800b550:	230c      	movs	r3, #12
 800b552:	603b      	str	r3, [r7, #0]
 800b554:	e7ee      	b.n	800b534 <__sfp+0x60>
 800b556:	bf00      	nop
 800b558:	0800bde8 	.word	0x0800bde8
 800b55c:	ffff0001 	.word	0xffff0001

0800b560 <_fwalk_reent>:
 800b560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b564:	4606      	mov	r6, r0
 800b566:	4688      	mov	r8, r1
 800b568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b56c:	2700      	movs	r7, #0
 800b56e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b572:	f1b9 0901 	subs.w	r9, r9, #1
 800b576:	d505      	bpl.n	800b584 <_fwalk_reent+0x24>
 800b578:	6824      	ldr	r4, [r4, #0]
 800b57a:	2c00      	cmp	r4, #0
 800b57c:	d1f7      	bne.n	800b56e <_fwalk_reent+0xe>
 800b57e:	4638      	mov	r0, r7
 800b580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b584:	89ab      	ldrh	r3, [r5, #12]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d907      	bls.n	800b59a <_fwalk_reent+0x3a>
 800b58a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b58e:	3301      	adds	r3, #1
 800b590:	d003      	beq.n	800b59a <_fwalk_reent+0x3a>
 800b592:	4629      	mov	r1, r5
 800b594:	4630      	mov	r0, r6
 800b596:	47c0      	blx	r8
 800b598:	4307      	orrs	r7, r0
 800b59a:	3568      	adds	r5, #104	; 0x68
 800b59c:	e7e9      	b.n	800b572 <_fwalk_reent+0x12>

0800b59e <__retarget_lock_init_recursive>:
 800b59e:	4770      	bx	lr

0800b5a0 <__retarget_lock_acquire_recursive>:
 800b5a0:	4770      	bx	lr

0800b5a2 <__retarget_lock_release_recursive>:
 800b5a2:	4770      	bx	lr

0800b5a4 <__swhatbuf_r>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	460e      	mov	r6, r1
 800b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	b096      	sub	sp, #88	; 0x58
 800b5b0:	4614      	mov	r4, r2
 800b5b2:	461d      	mov	r5, r3
 800b5b4:	da07      	bge.n	800b5c6 <__swhatbuf_r+0x22>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	602b      	str	r3, [r5, #0]
 800b5ba:	89b3      	ldrh	r3, [r6, #12]
 800b5bc:	061a      	lsls	r2, r3, #24
 800b5be:	d410      	bmi.n	800b5e2 <__swhatbuf_r+0x3e>
 800b5c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5c4:	e00e      	b.n	800b5e4 <__swhatbuf_r+0x40>
 800b5c6:	466a      	mov	r2, sp
 800b5c8:	f000 f8b0 	bl	800b72c <_fstat_r>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	dbf2      	blt.n	800b5b6 <__swhatbuf_r+0x12>
 800b5d0:	9a01      	ldr	r2, [sp, #4]
 800b5d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5da:	425a      	negs	r2, r3
 800b5dc:	415a      	adcs	r2, r3
 800b5de:	602a      	str	r2, [r5, #0]
 800b5e0:	e7ee      	b.n	800b5c0 <__swhatbuf_r+0x1c>
 800b5e2:	2340      	movs	r3, #64	; 0x40
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	b016      	add	sp, #88	; 0x58
 800b5ea:	bd70      	pop	{r4, r5, r6, pc}

0800b5ec <__smakebuf_r>:
 800b5ec:	898b      	ldrh	r3, [r1, #12]
 800b5ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5f0:	079d      	lsls	r5, r3, #30
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	460c      	mov	r4, r1
 800b5f6:	d507      	bpl.n	800b608 <__smakebuf_r+0x1c>
 800b5f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	6123      	str	r3, [r4, #16]
 800b600:	2301      	movs	r3, #1
 800b602:	6163      	str	r3, [r4, #20]
 800b604:	b002      	add	sp, #8
 800b606:	bd70      	pop	{r4, r5, r6, pc}
 800b608:	ab01      	add	r3, sp, #4
 800b60a:	466a      	mov	r2, sp
 800b60c:	f7ff ffca 	bl	800b5a4 <__swhatbuf_r>
 800b610:	9900      	ldr	r1, [sp, #0]
 800b612:	4605      	mov	r5, r0
 800b614:	4630      	mov	r0, r6
 800b616:	f7ff fc6b 	bl	800aef0 <_malloc_r>
 800b61a:	b948      	cbnz	r0, 800b630 <__smakebuf_r+0x44>
 800b61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b620:	059a      	lsls	r2, r3, #22
 800b622:	d4ef      	bmi.n	800b604 <__smakebuf_r+0x18>
 800b624:	f023 0303 	bic.w	r3, r3, #3
 800b628:	f043 0302 	orr.w	r3, r3, #2
 800b62c:	81a3      	strh	r3, [r4, #12]
 800b62e:	e7e3      	b.n	800b5f8 <__smakebuf_r+0xc>
 800b630:	4b0d      	ldr	r3, [pc, #52]	; (800b668 <__smakebuf_r+0x7c>)
 800b632:	62b3      	str	r3, [r6, #40]	; 0x28
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	6020      	str	r0, [r4, #0]
 800b638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b63c:	81a3      	strh	r3, [r4, #12]
 800b63e:	9b00      	ldr	r3, [sp, #0]
 800b640:	6163      	str	r3, [r4, #20]
 800b642:	9b01      	ldr	r3, [sp, #4]
 800b644:	6120      	str	r0, [r4, #16]
 800b646:	b15b      	cbz	r3, 800b660 <__smakebuf_r+0x74>
 800b648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b64c:	4630      	mov	r0, r6
 800b64e:	f000 f87f 	bl	800b750 <_isatty_r>
 800b652:	b128      	cbz	r0, 800b660 <__smakebuf_r+0x74>
 800b654:	89a3      	ldrh	r3, [r4, #12]
 800b656:	f023 0303 	bic.w	r3, r3, #3
 800b65a:	f043 0301 	orr.w	r3, r3, #1
 800b65e:	81a3      	strh	r3, [r4, #12]
 800b660:	89a0      	ldrh	r0, [r4, #12]
 800b662:	4305      	orrs	r5, r0
 800b664:	81a5      	strh	r5, [r4, #12]
 800b666:	e7cd      	b.n	800b604 <__smakebuf_r+0x18>
 800b668:	0800b3fd 	.word	0x0800b3fd

0800b66c <__malloc_lock>:
 800b66c:	4801      	ldr	r0, [pc, #4]	; (800b674 <__malloc_lock+0x8>)
 800b66e:	f7ff bf97 	b.w	800b5a0 <__retarget_lock_acquire_recursive>
 800b672:	bf00      	nop
 800b674:	2000598c 	.word	0x2000598c

0800b678 <__malloc_unlock>:
 800b678:	4801      	ldr	r0, [pc, #4]	; (800b680 <__malloc_unlock+0x8>)
 800b67a:	f7ff bf92 	b.w	800b5a2 <__retarget_lock_release_recursive>
 800b67e:	bf00      	nop
 800b680:	2000598c 	.word	0x2000598c

0800b684 <__sread>:
 800b684:	b510      	push	{r4, lr}
 800b686:	460c      	mov	r4, r1
 800b688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b68c:	f000 f882 	bl	800b794 <_read_r>
 800b690:	2800      	cmp	r0, #0
 800b692:	bfab      	itete	ge
 800b694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b696:	89a3      	ldrhlt	r3, [r4, #12]
 800b698:	181b      	addge	r3, r3, r0
 800b69a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b69e:	bfac      	ite	ge
 800b6a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6a2:	81a3      	strhlt	r3, [r4, #12]
 800b6a4:	bd10      	pop	{r4, pc}

0800b6a6 <__swrite>:
 800b6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6aa:	461f      	mov	r7, r3
 800b6ac:	898b      	ldrh	r3, [r1, #12]
 800b6ae:	05db      	lsls	r3, r3, #23
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	4616      	mov	r6, r2
 800b6b6:	d505      	bpl.n	800b6c4 <__swrite+0x1e>
 800b6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6bc:	2302      	movs	r3, #2
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f000 f856 	bl	800b770 <_lseek_r>
 800b6c4:	89a3      	ldrh	r3, [r4, #12]
 800b6c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6ce:	81a3      	strh	r3, [r4, #12]
 800b6d0:	4632      	mov	r2, r6
 800b6d2:	463b      	mov	r3, r7
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6da:	f7ff bb51 	b.w	800ad80 <_write_r>

0800b6de <__sseek>:
 800b6de:	b510      	push	{r4, lr}
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e6:	f000 f843 	bl	800b770 <_lseek_r>
 800b6ea:	1c43      	adds	r3, r0, #1
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	bf15      	itete	ne
 800b6f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6fa:	81a3      	strheq	r3, [r4, #12]
 800b6fc:	bf18      	it	ne
 800b6fe:	81a3      	strhne	r3, [r4, #12]
 800b700:	bd10      	pop	{r4, pc}

0800b702 <__sclose>:
 800b702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b706:	f000 b801 	b.w	800b70c <_close_r>
	...

0800b70c <_close_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4d06      	ldr	r5, [pc, #24]	; (800b728 <_close_r+0x1c>)
 800b710:	2300      	movs	r3, #0
 800b712:	4604      	mov	r4, r0
 800b714:	4608      	mov	r0, r1
 800b716:	602b      	str	r3, [r5, #0]
 800b718:	f7f7 f95b 	bl	80029d2 <_close>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_close_r+0x1a>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_close_r+0x1a>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20005994 	.word	0x20005994

0800b72c <_fstat_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d07      	ldr	r5, [pc, #28]	; (800b74c <_fstat_r+0x20>)
 800b730:	2300      	movs	r3, #0
 800b732:	4604      	mov	r4, r0
 800b734:	4608      	mov	r0, r1
 800b736:	4611      	mov	r1, r2
 800b738:	602b      	str	r3, [r5, #0]
 800b73a:	f7f7 f956 	bl	80029ea <_fstat>
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	d102      	bne.n	800b748 <_fstat_r+0x1c>
 800b742:	682b      	ldr	r3, [r5, #0]
 800b744:	b103      	cbz	r3, 800b748 <_fstat_r+0x1c>
 800b746:	6023      	str	r3, [r4, #0]
 800b748:	bd38      	pop	{r3, r4, r5, pc}
 800b74a:	bf00      	nop
 800b74c:	20005994 	.word	0x20005994

0800b750 <_isatty_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4d06      	ldr	r5, [pc, #24]	; (800b76c <_isatty_r+0x1c>)
 800b754:	2300      	movs	r3, #0
 800b756:	4604      	mov	r4, r0
 800b758:	4608      	mov	r0, r1
 800b75a:	602b      	str	r3, [r5, #0]
 800b75c:	f7f7 f955 	bl	8002a0a <_isatty>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d102      	bne.n	800b76a <_isatty_r+0x1a>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	b103      	cbz	r3, 800b76a <_isatty_r+0x1a>
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	20005994 	.word	0x20005994

0800b770 <_lseek_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4d07      	ldr	r5, [pc, #28]	; (800b790 <_lseek_r+0x20>)
 800b774:	4604      	mov	r4, r0
 800b776:	4608      	mov	r0, r1
 800b778:	4611      	mov	r1, r2
 800b77a:	2200      	movs	r2, #0
 800b77c:	602a      	str	r2, [r5, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	f7f7 f94e 	bl	8002a20 <_lseek>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_lseek_r+0x1e>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_lseek_r+0x1e>
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	20005994 	.word	0x20005994

0800b794 <_read_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	4d07      	ldr	r5, [pc, #28]	; (800b7b4 <_read_r+0x20>)
 800b798:	4604      	mov	r4, r0
 800b79a:	4608      	mov	r0, r1
 800b79c:	4611      	mov	r1, r2
 800b79e:	2200      	movs	r2, #0
 800b7a0:	602a      	str	r2, [r5, #0]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	f7f7 f8f8 	bl	8002998 <_read>
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	d102      	bne.n	800b7b2 <_read_r+0x1e>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	b103      	cbz	r3, 800b7b2 <_read_r+0x1e>
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	20005994 	.word	0x20005994

0800b7b8 <_init>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	bf00      	nop
 800b7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7be:	bc08      	pop	{r3}
 800b7c0:	469e      	mov	lr, r3
 800b7c2:	4770      	bx	lr

0800b7c4 <_fini>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	bf00      	nop
 800b7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ca:	bc08      	pop	{r3}
 800b7cc:	469e      	mov	lr, r3
 800b7ce:	4770      	bx	lr
